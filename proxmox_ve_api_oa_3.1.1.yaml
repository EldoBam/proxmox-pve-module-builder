openapi: 3.1.1
info:
  title: Proxmox VE Module 1.0
  summary: Module to access Proxmox VE Api
  description: Generated OpenApiDescription to render Modules via OpenapiGenerator
  termsOfService: ""
  contact:
    name: Timo Wolf
    url: ""
    email: ""
  version: "0.1"
  licence:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
jsonSchemaDialect: https://spec.openapis.org/oas/3.1/dialect/base
paths:
  /access:
    get:
      tags:
      - access
      description: Directory index.
      summary: Directory index.
      operationId: getAccess
      parameter: []
      responses: ""
    summary: access
  /access/acl:
    summary: acl
    put:
      tags:
      - access
      description: Update Access Control List (add or remove permissions).
      summary: Update Access Control List (add or remove permissions).
      operationId: setAccessAcl
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - access
      description: Get Access Control List (ACLs).
      summary: Get Access Control List (ACLs).
      operationId: getAccessAcl
      parameter: []
      responses:
        "200":
          description: Get Access Control List (ACLs).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessAcl'
  /access/domains:
    summary: domains
    post:
      tags:
      - access
      description: Add an authentication server.
      summary: Add an authentication server.
      operationId: newAccessDomains
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - access
      description: Authentication domain index.
      summary: Authentication domain index.
      operationId: getAccessDomains
      parameter: []
      responses:
        "200":
          description: Authentication domain index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDomains'
  /access/domains/{realm}:
    summary: realm
    put:
      tags:
      - access
      description: Update authentication server settings.
      summary: Update authentication server settings.
      operationId: setAccessDomainsByRealm
      parameter:
      - name: realm
        in: path
        description: Authentication domain ID
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - access
      description: Get auth server configuration.
      summary: Get auth server configuration.
      operationId: getAccessDomainsByRealm
      parameter:
      - name: realm
        in: path
        description: Authentication domain ID
        required: true
      responses: ""
    delete:
      tags:
      - access
      description: Delete an authentication server.
      summary: Delete an authentication server.
      operationId: removeAccessDomainsByRealm
      parameter:
      - name: realm
        in: path
        description: Authentication domain ID
        required: true
      responses:
        "200":
          description: ok
  /access/domains/{realm}/sync:
    post:
      tags:
      - access
      description: "Syncs users and/or groups from the configured LDAP to user.cfg. NOTE: Synced groups will have the name 'name-$realm', so make sure those groups do not exist to prevent overwriting."
      summary: "Syncs users and/or groups from the configured LDAP to user.cfg. NOTE: Synced groups will have the name 'name-$realm', so make sure those groups do not exist to prevent overwriting."
      operationId: newAccessDomainsSyncByRealm
      parameter:
      - name: realm
        in: path
        description: Authentication domain ID
        required: true
      responses: ""
    summary: sync
  /access/groups:
    summary: groups
    post:
      tags:
      - access
      description: Create new group.
      summary: Create new group.
      operationId: newAccessGroups
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - access
      description: Group index.
      summary: Group index.
      operationId: getAccessGroups
      parameter: []
      responses:
        "200":
          description: Group index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGroups'
  /access/groups/{groupid}:
    summary: groupid
    put:
      tags:
      - access
      description: Update group data.
      summary: Update group data.
      operationId: setAccessGroupsByGroupid
      parameter:
      - name: groupid
        in: path
        description: 
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - access
      description: Get group configuration.
      summary: Get group configuration.
      operationId: getAccessGroupsByGroupid
      parameter:
      - name: groupid
        in: path
        description: 
        required: true
      responses:
        "200":
          description: Get group configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGroups'
    delete:
      tags:
      - access
      description: Delete group.
      summary: Delete group.
      operationId: removeAccessGroupsByGroupid
      parameter:
      - name: groupid
        in: path
        description: 
        required: true
      responses:
        "200":
          description: ok
  /access/openid:
    get:
      tags:
      - access
      description: Directory index.
      summary: Directory index.
      operationId: getAccessOpenid
      parameter: []
      responses: ""
    summary: openid
  /access/openid/auth-url:
    post:
      tags:
      - access
      description: Get the OpenId Authorization Url for the specified realm.
      summary: Get the OpenId Authorization Url for the specified realm.
      operationId: newAccessOpenidAuthurl
      parameter: []
      responses: ""
    summary: auth-url
  /access/openid/login:
    post:
      tags:
      - access
      description: ' Verify OpenID authorization code and create a ticket.'
      summary: ' Verify OpenID authorization code and create a ticket.'
      operationId: newAccessOpenidLogin
      parameter: []
      responses: ""
    summary: login
  /access/password:
    put:
      tags:
      - access
      description: Change user password.
      summary: Change user password.
      operationId: setAccessPassword
      parameter: []
      responses:
        "200":
          description: ok
    summary: password
  /access/permissions:
    get:
      tags:
      - access
      description: Retrieve effective permissions of given user/token.
      summary: Retrieve effective permissions of given user/token.
      operationId: getAccessPermissions
      parameter: []
      responses: ""
    summary: permissions
  /access/roles:
    summary: roles
    post:
      tags:
      - access
      description: Create new role.
      summary: Create new role.
      operationId: newAccessRoles
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - access
      description: Role index.
      summary: Role index.
      operationId: getAccessRoles
      parameter: []
      responses:
        "200":
          description: Role index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRoles'
  /access/roles/{roleid}:
    summary: roleid
    put:
      tags:
      - access
      description: Update an existing role.
      summary: Update an existing role.
      operationId: setAccessRolesByRoleid
      parameter:
      - name: roleid
        in: path
        description: 
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - access
      description: Get role configuration.
      summary: Get role configuration.
      operationId: getAccessRolesByRoleid
      parameter:
      - name: roleid
        in: path
        description: 
        required: true
      responses:
        "200":
          description: Get role configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRoles'
    delete:
      tags:
      - access
      description: Delete role.
      summary: Delete role.
      operationId: removeAccessRolesByRoleid
      parameter:
      - name: roleid
        in: path
        description: 
        required: true
      responses:
        "200":
          description: ok
  /access/tfa:
    get:
      tags:
      - access
      description: List TFA configurations of users.
      summary: List TFA configurations of users.
      operationId: getAccessTfa
      parameter: []
      responses:
        "200":
          description: List TFA configurations of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTfa'
    summary: tfa
  /access/tfa/{userid}:
    summary: userid
    post:
      tags:
      - access
      description: Add a TFA entry for a user.
      summary: Add a TFA entry for a user.
      operationId: newAccessTfaByUserid
      parameter:
      - name: userid
        in: path
        description: Full User ID, in the `name@realm` format.
        required: true
      responses: ""
    get:
      tags:
      - access
      description: List TFA configurations of users.
      summary: List TFA configurations of users.
      operationId: getAccessTfaByUserid
      parameter:
      - name: userid
        in: path
        description: Full User ID, in the `name@realm` format.
        required: true
      responses:
        "200":
          description: List TFA configurations of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTfa-AV'
  /access/tfa/{userid}/{id}:
    summary: id
    put:
      tags:
      - access
      description: Add a TFA entry for a user.
      summary: Add a TFA entry for a user.
      operationId: setAccessTfaByUseridAndId
      parameter:
      - name: id
        in: path
        description: A TFA entry id.
        required: true
      - name: userid
        in: path
        description: Full User ID, in the `name@realm` format.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - access
      description: Fetch a requested TFA entry if present.
      summary: Fetch a requested TFA entry if present.
      operationId: getAccessTfaByUseridAndId
      parameter:
      - name: id
        in: path
        description: A TFA entry id.
        required: true
      - name: userid
        in: path
        description: Full User ID, in the `name@realm` format.
        required: true
      responses:
        "200":
          description: Fetch a requested TFA entry if present.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTfa'
    delete:
      tags:
      - access
      description: Delete a TFA entry by ID.
      summary: Delete a TFA entry by ID.
      operationId: removeAccessTfaByUseridAndId
      parameter:
      - name: id
        in: path
        description: A TFA entry id.
        required: true
      - name: userid
        in: path
        description: Full User ID, in the `name@realm` format.
        required: true
      responses:
        "200":
          description: ok
  /access/ticket:
    summary: ticket
    post:
      tags:
      - access
      description: Create or verify authentication ticket.
      summary: Create or verify authentication ticket.
      operationId: newAccessTicket
      parameter: []
      responses: ""
    get:
      tags:
      - access
      description: Dummy. Useful for formatters which want to provide a login page.
      summary: Dummy. Useful for formatters which want to provide a login page.
      operationId: getAccessTicket
      parameter: []
      responses:
        "200":
          description: ok
  /access/users:
    summary: users
    post:
      tags:
      - access
      description: Create new user.
      summary: Create new user.
      operationId: newAccessUsers
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - access
      description: User index.
      summary: User index.
      operationId: getAccessUsers
      parameter: []
      responses:
        "200":
          description: User index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessUsers'
  /access/users/{userid}:
    summary: userid
    put:
      tags:
      - access
      description: Update user configuration.
      summary: Update user configuration.
      operationId: setAccessUsersByUserid
      parameter:
      - name: userid
        in: path
        description: Full User ID, in the `name@realm` format.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - access
      description: Get user configuration.
      summary: Get user configuration.
      operationId: getAccessUsersByUserid
      parameter:
      - name: userid
        in: path
        description: Full User ID, in the `name@realm` format.
        required: true
      responses:
        "200":
          description: Get user configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessUsers'
    delete:
      tags:
      - access
      description: Delete user.
      summary: Delete user.
      operationId: removeAccessUsersByUserid
      parameter:
      - name: userid
        in: path
        description: Full User ID, in the `name@realm` format.
        required: true
      responses:
        "200":
          description: ok
  /access/users/{userid}/tfa:
    get:
      tags:
      - access
      description: Get user TFA types (Personal and Realm).
      summary: Get user TFA types (Personal and Realm).
      operationId: getAccessUsersTfaByUserid
      parameter:
      - name: userid
        in: path
        description: Full User ID, in the `name@realm` format.
        required: true
      responses:
        "200":
          description: Get user TFA types (Personal and Realm).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessUsersTfa'
    summary: tfa
  /access/users/{userid}/token:
    get:
      tags:
      - access
      description: Get user API tokens.
      summary: Get user API tokens.
      operationId: getAccessUsersTokenByUserid
      parameter:
      - name: userid
        in: path
        description: Full User ID, in the `name@realm` format.
        required: true
      responses:
        "200":
          description: Get user API tokens.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessUsersToken'
    summary: token
  /access/users/{userid}/token/{tokenid}:
    summary: tokenid
    post:
      tags:
      - access
      description: 'Generate a new API token for a specific user. NOTE: returns API token value, which needs to be stored as it cannot be retrieved afterwards!'
      summary: 'Generate a new API token for a specific user. NOTE: returns API token value, which needs to be stored as it cannot be retrieved afterwards!'
      operationId: newAccessUsersTokenByUseridAndTokenid
      parameter:
      - name: tokenid
        in: path
        description: User-specific token identifier.
        required: true
      - name: userid
        in: path
        description: Full User ID, in the `name@realm` format.
        required: true
      responses: ""
    put:
      tags:
      - access
      description: Update API token for a specific user.
      summary: Update API token for a specific user.
      operationId: setAccessUsersTokenByUseridAndTokenid
      parameter:
      - name: tokenid
        in: path
        description: User-specific token identifier.
        required: true
      - name: userid
        in: path
        description: Full User ID, in the `name@realm` format.
        required: true
      responses: ""
    get:
      tags:
      - access
      description: Get specific API token information.
      summary: Get specific API token information.
      operationId: getAccessUsersTokenByUseridAndTokenid
      parameter:
      - name: tokenid
        in: path
        description: User-specific token identifier.
        required: true
      - name: userid
        in: path
        description: Full User ID, in the `name@realm` format.
        required: true
      responses:
        "200":
          description: Get specific API token information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessUsersToken'
    delete:
      tags:
      - access
      description: Remove API token for a specific user.
      summary: Remove API token for a specific user.
      operationId: removeAccessUsersTokenByUseridAndTokenid
      parameter:
      - name: tokenid
        in: path
        description: User-specific token identifier.
        required: true
      - name: userid
        in: path
        description: Full User ID, in the `name@realm` format.
        required: true
      responses:
        "200":
          description: ok
  /access/users/{userid}/unlock-tfa:
    put:
      tags:
      - access
      description: Unlock a user's TFA authentication.
      summary: Unlock a user's TFA authentication.
      operationId: setAccessUsersUnlocktfaByUserid
      parameter:
      - name: userid
        in: path
        description: Full User ID, in the `name@realm` format.
        required: true
      responses: ""
    summary: unlock-tfa
  /cluster:
    get:
      tags:
      - cluster
      description: Cluster index.
      summary: Cluster index.
      operationId: getCluster
      parameter: []
      responses:
        "200":
          description: Cluster index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
    summary: cluster
  /cluster/acme:
    get:
      tags:
      - cluster
      description: ACMEAccount index.
      summary: ACMEAccount index.
      operationId: getClusterAcme
      parameter: []
      responses:
        "200":
          description: ACMEAccount index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterAcme'
    summary: acme
  /cluster/acme/account:
    summary: account
    post:
      tags:
      - cluster
      description: Register a new ACME account with CA.
      summary: Register a new ACME account with CA.
      operationId: newClusterAcmeAccount
      parameter: []
      responses: ""
    get:
      tags:
      - cluster
      description: ACMEAccount index.
      summary: ACMEAccount index.
      operationId: getClusterAcmeAccount
      parameter: []
      responses:
        "200":
          description: ACMEAccount index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterAcmeAccount'
  /cluster/acme/account/{name}:
    summary: name
    put:
      tags:
      - cluster
      description: 'Update existing ACME account information with CA. Note: not specifying any new account information triggers a refresh.'
      summary: 'Update existing ACME account information with CA. Note: not specifying any new account information triggers a refresh.'
      operationId: setClusterAcmeAccountByName
      parameter:
      - name: name
        in: path
        description: ACME account config file name.
        required: true
      responses: ""
    get:
      tags:
      - cluster
      description: Return existing ACME account information.
      summary: Return existing ACME account information.
      operationId: getClusterAcmeAccountByName
      parameter:
      - name: name
        in: path
        description: ACME account config file name.
        required: true
      responses:
        "200":
          description: Return existing ACME account information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterAcmeAccount'
    delete:
      tags:
      - cluster
      description: Deactivate existing ACME account at CA.
      summary: Deactivate existing ACME account at CA.
      operationId: removeClusterAcmeAccountByName
      parameter:
      - name: name
        in: path
        description: ACME account config file name.
        required: true
      responses: ""
  /cluster/acme/challenge-schema:
    get:
      tags:
      - cluster
      description: Get schema of ACME challenge types.
      summary: Get schema of ACME challenge types.
      operationId: getClusterAcmeChallengeschema
      parameter: []
      responses:
        "200":
          description: Get schema of ACME challenge types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterAcmeChallengeschema'
    summary: challenge-schema
  /cluster/acme/directories:
    get:
      tags:
      - cluster
      description: Get named known ACME directory endpoints.
      summary: Get named known ACME directory endpoints.
      operationId: getClusterAcmeDirectories
      parameter: []
      responses:
        "200":
          description: Get named known ACME directory endpoints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterAcmeDirectories'
    summary: directories
  /cluster/acme/meta:
    get:
      tags:
      - cluster
      description: Retrieve ACME Directory Meta Information
      summary: Retrieve ACME Directory Meta Information
      operationId: getClusterAcmeMeta
      parameter: []
      responses:
        "200":
          description: Retrieve ACME Directory Meta Information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterAcmeMeta'
    summary: meta
  /cluster/acme/plugins:
    summary: plugins
    post:
      tags:
      - cluster
      description: Add ACME plugin configuration.
      summary: Add ACME plugin configuration.
      operationId: newClusterAcmePlugins
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: ACME plugin index.
      summary: ACME plugin index.
      operationId: getClusterAcmePlugins
      parameter: []
      responses:
        "200":
          description: ACME plugin index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterAcmePlugins'
  /cluster/acme/plugins/{id}:
    summary: id
    put:
      tags:
      - cluster
      description: Update ACME plugin configuration.
      summary: Update ACME plugin configuration.
      operationId: setClusterAcmePluginsById
      parameter:
      - name: id
        in: path
        description: ACME Plugin ID name
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Get ACME plugin configuration.
      summary: Get ACME plugin configuration.
      operationId: getClusterAcmePluginsById
      parameter:
      - name: id
        in: path
        description: Unique identifier for ACME plugin instance.
        required: true
      responses: ""
    delete:
      tags:
      - cluster
      description: Delete ACME plugin configuration.
      summary: Delete ACME plugin configuration.
      operationId: removeClusterAcmePluginsById
      parameter:
      - name: id
        in: path
        description: Unique identifier for ACME plugin instance.
        required: true
      responses:
        "200":
          description: ok
  /cluster/acme/tos:
    get:
      tags:
      - cluster
      description: Retrieve ACME TermsOfService URL from CA. Deprecated, please use /cluster/acme/meta.
      summary: Retrieve ACME TermsOfService URL from CA. Deprecated, please use /cluster/acme/meta.
      operationId: getClusterAcmeTos
      parameter: []
      responses: ""
    summary: tos
  /cluster/backup:
    summary: backup
    post:
      tags:
      - cluster
      description: Create new vzdump backup job.
      summary: Create new vzdump backup job.
      operationId: newClusterBackup
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: List vzdump backup schedule.
      summary: List vzdump backup schedule.
      operationId: getClusterBackup
      parameter: []
      responses:
        "200":
          description: List vzdump backup schedule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterBackup'
  /cluster/backup-info:
    get:
      tags:
      - cluster
      description: Index for backup info related endpoints
      summary: Index for backup info related endpoints
      operationId: getClusterBackupinfo
      parameter: []
      responses: ""
    summary: backup-info
  /cluster/backup-info/not-backed-up:
    get:
      tags:
      - cluster
      description: Shows all guests which are not covered by any backup job.
      summary: Shows all guests which are not covered by any backup job.
      operationId: getClusterBackupinfoNotbackedup
      parameter: []
      responses:
        "200":
          description: Shows all guests which are not covered by any backup job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterBackupinfoNotbackedup'
    summary: not-backed-up
  /cluster/backup/{id}:
    summary: id
    put:
      tags:
      - cluster
      description: Update vzdump backup job definition.
      summary: Update vzdump backup job definition.
      operationId: setClusterBackupById
      parameter:
      - name: id
        in: path
        description: The job ID.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Read vzdump backup job definition.
      summary: Read vzdump backup job definition.
      operationId: getClusterBackupById
      parameter:
      - name: id
        in: path
        description: The job ID.
        required: true
      responses: ""
    delete:
      tags:
      - cluster
      description: Delete vzdump backup job definition.
      summary: Delete vzdump backup job definition.
      operationId: removeClusterBackupById
      parameter:
      - name: id
        in: path
        description: The job ID.
        required: true
      responses:
        "200":
          description: ok
  /cluster/backup/{id}/included_volumes:
    get:
      tags:
      - cluster
      description: Returns included guests and the backup status of their disks. Optimized to be used in ExtJS tree views.
      summary: Returns included guests and the backup status of their disks. Optimized to be used in ExtJS tree views.
      operationId: getClusterBackupIncludedvolumesById
      parameter:
      - name: id
        in: path
        description: The job ID.
        required: true
      responses:
        "200":
          description: Returns included guests and the backup status of their disks. Optimized to be used in ExtJS tree views.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterBackupIncludedvolumes'
    summary: includedvolumes
  /cluster/ceph:
    get:
      tags:
      - cluster
      description: Cluster ceph index.
      summary: Cluster ceph index.
      operationId: getClusterCeph
      parameter: []
      responses:
        "200":
          description: Cluster ceph index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterCeph'
    summary: ceph
  /cluster/ceph/flags:
    summary: flags
    put:
      tags:
      - cluster
      description: Set/Unset multiple ceph flags at once.
      summary: Set/Unset multiple ceph flags at once.
      operationId: setClusterCephFlags
      parameter: []
      responses: ""
    get:
      tags:
      - cluster
      description: get the status of all ceph flags
      summary: get the status of all ceph flags
      operationId: getClusterCephFlags
      parameter: []
      responses:
        "200":
          description: get the status of all ceph flags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterCephFlags'
  /cluster/ceph/flags/{flag}:
    summary: flag
    put:
      tags:
      - cluster
      description: Set or clear (unset) a specific ceph flag
      summary: Set or clear (unset) a specific ceph flag
      operationId: setClusterCephFlagsByFlag
      parameter:
      - name: flag
        in: path
        description: The ceph flag to update
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Get the status of a specific ceph flag.
      summary: Get the status of a specific ceph flag.
      operationId: getClusterCephFlagsByFlag
      parameter:
      - name: flag
        in: path
        description: The name of the flag name to get.
        required: true
      responses: ""
  /cluster/ceph/metadata:
    get:
      tags:
      - cluster
      description: Get ceph metadata.
      summary: Get ceph metadata.
      operationId: getClusterCephMetadata
      parameter: []
      responses:
        "200":
          description: Get ceph metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterCephMetadata'
    summary: metadata
  /cluster/ceph/status:
    get:
      tags:
      - cluster
      description: Get ceph status.
      summary: Get ceph status.
      operationId: getClusterCephStatus
      parameter: []
      responses: ""
    summary: status
  /cluster/config:
    summary: config
    post:
      tags:
      - cluster
      description: Generate new cluster configuration. If no links given, default to local IP address as link0.
      summary: Generate new cluster configuration. If no links given, default to local IP address as link0.
      operationId: newClusterConfig
      parameter: []
      responses: ""
    get:
      tags:
      - cluster
      description: Directory index.
      summary: Directory index.
      operationId: getClusterConfig
      parameter: []
      responses:
        "200":
          description: Directory index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterConfig'
  /cluster/config/apiversion:
    get:
      tags:
      - cluster
      description: Return the version of the cluster join API available on this node.
      summary: Return the version of the cluster join API available on this node.
      operationId: getClusterConfigApiversion
      parameter: []
      responses: ""
    summary: apiversion
  /cluster/config/join:
    summary: join
    post:
      tags:
      - cluster
      description: Joins this node into an existing cluster. If no links are given, default to IP resolved by node's hostname on single link (fallback fails for clusters with multiple links).
      summary: Joins this node into an existing cluster. If no links are given, default to IP resolved by node's hostname on single link (fallback fails for clusters with multiple links).
      operationId: newClusterConfigJoin
      parameter: []
      responses: ""
    get:
      tags:
      - cluster
      description: Get information needed to join this cluster over the connected node.
      summary: Get information needed to join this cluster over the connected node.
      operationId: getClusterConfigJoin
      parameter: []
      responses:
        "200":
          description: Get information needed to join this cluster over the connected node.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterConfigJoin'
  /cluster/config/nodes:
    get:
      tags:
      - cluster
      description: Corosync node list.
      summary: Corosync node list.
      operationId: getClusterConfigNodes
      parameter: []
      responses:
        "200":
          description: Corosync node list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterConfigNodes'
    summary: nodes
  /cluster/config/nodes/{node}:
    summary: node
    post:
      tags:
      - cluster
      description: Adds a node to the cluster configuration. This call is for internal use.
      summary: Adds a node to the cluster configuration. This call is for internal use.
      operationId: newClusterConfigNodesByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    delete:
      tags:
      - cluster
      description: Removes a node from the cluster configuration.
      summary: Removes a node from the cluster configuration.
      operationId: removeClusterConfigNodesByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: ok
  /cluster/config/qdevice:
    get:
      tags:
      - cluster
      description: Get QDevice status
      summary: Get QDevice status
      operationId: getClusterConfigQdevice
      parameter: []
      responses: ""
    summary: qdevice
  /cluster/config/totem:
    get:
      tags:
      - cluster
      description: Get corosync totem protocol settings.
      summary: Get corosync totem protocol settings.
      operationId: getClusterConfigTotem
      parameter: []
      responses: ""
    summary: totem
  /cluster/firewall:
    get:
      tags:
      - cluster
      description: Directory index.
      summary: Directory index.
      operationId: getClusterFirewall
      parameter: []
      responses:
        "200":
          description: Directory index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterFirewall'
    summary: firewall
  /cluster/firewall/aliases:
    summary: aliases
    post:
      tags:
      - cluster
      description: Create IP or Network Alias.
      summary: Create IP or Network Alias.
      operationId: newClusterFirewallAliases
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: List aliases
      summary: List aliases
      operationId: getClusterFirewallAliases
      parameter: []
      responses:
        "200":
          description: List aliases
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterFirewallAliases'
  /cluster/firewall/aliases/{name}:
    summary: name
    put:
      tags:
      - cluster
      description: Update IP or Network alias.
      summary: Update IP or Network alias.
      operationId: setClusterFirewallAliasesByName
      parameter:
      - name: name
        in: path
        description: Alias name.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Read alias.
      summary: Read alias.
      operationId: getClusterFirewallAliasesByName
      parameter:
      - name: name
        in: path
        description: Alias name.
        required: true
      responses: ""
    delete:
      tags:
      - cluster
      description: Remove IP or Network alias.
      summary: Remove IP or Network alias.
      operationId: removeClusterFirewallAliasesByName
      parameter:
      - name: name
        in: path
        description: Alias name.
        required: true
      responses:
        "200":
          description: ok
  /cluster/firewall/groups:
    summary: groups
    post:
      tags:
      - cluster
      description: Create new security group.
      summary: Create new security group.
      operationId: newClusterFirewallGroups
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: List security groups.
      summary: List security groups.
      operationId: getClusterFirewallGroups
      parameter: []
      responses:
        "200":
          description: List security groups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterFirewallGroups'
  /cluster/firewall/groups/{group}:
    summary: group
    post:
      tags:
      - cluster
      description: Create new rule.
      summary: Create new rule.
      operationId: newClusterFirewallGroupsByGroup
      parameter:
      - name: group
        in: path
        description: Security Group name.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: List rules.
      summary: List rules.
      operationId: getClusterFirewallGroupsByGroup
      parameter:
      - name: group
        in: path
        description: Security Group name.
        required: true
      responses:
        "200":
          description: List rules.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterFirewallGroups-AV'
    delete:
      tags:
      - cluster
      description: Delete security group.
      summary: Delete security group.
      operationId: removeClusterFirewallGroupsByGroup
      parameter:
      - name: group
        in: path
        description: Security Group name.
        required: true
      responses:
        "200":
          description: ok
  /cluster/firewall/groups/{group}/{pos}:
    summary: pos
    put:
      tags:
      - cluster
      description: Modify rule data.
      summary: Modify rule data.
      operationId: setClusterFirewallGroupsByGroupAndPos
      parameter:
      - name: group
        in: path
        description: Security Group name.
        required: true
      - name: pos
        in: path
        description: Update rule at position <pos>.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Get single rule data.
      summary: Get single rule data.
      operationId: getClusterFirewallGroupsByGroupAndPos
      parameter:
      - name: group
        in: path
        description: Security Group name.
        required: true
      - name: pos
        in: path
        description: Update rule at position <pos>.
        required: true
      responses:
        "200":
          description: Get single rule data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterFirewallGroups'
    delete:
      tags:
      - cluster
      description: Delete rule.
      summary: Delete rule.
      operationId: removeClusterFirewallGroupsByGroupAndPos
      parameter:
      - name: group
        in: path
        description: Security Group name.
        required: true
      - name: pos
        in: path
        description: Update rule at position <pos>.
        required: true
      responses:
        "200":
          description: ok
  /cluster/firewall/ipset:
    summary: ipset
    post:
      tags:
      - cluster
      description: Create new IPSet
      summary: Create new IPSet
      operationId: newClusterFirewallIpset
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: List IPSets
      summary: List IPSets
      operationId: getClusterFirewallIpset
      parameter: []
      responses:
        "200":
          description: List IPSets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterFirewallIpset'
  /cluster/firewall/ipset/{name}:
    summary: name
    post:
      tags:
      - cluster
      description: Add IP or Network to IPSet.
      summary: Add IP or Network to IPSet.
      operationId: newClusterFirewallIpsetByName
      parameter:
      - name: name
        in: path
        description: IP set name.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: List IPSet content
      summary: List IPSet content
      operationId: getClusterFirewallIpsetByName
      parameter:
      - name: name
        in: path
        description: IP set name.
        required: true
      responses:
        "200":
          description: List IPSet content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterFirewallIpset-AV'
    delete:
      tags:
      - cluster
      description: Delete IPSet
      summary: Delete IPSet
      operationId: removeClusterFirewallIpsetByName
      parameter:
      - name: name
        in: path
        description: IP set name.
        required: true
      responses:
        "200":
          description: ok
  /cluster/firewall/ipset/{name}/{cidr}:
    summary: cidr
    put:
      tags:
      - cluster
      description: Update IP or Network settings
      summary: Update IP or Network settings
      operationId: setClusterFirewallIpsetByNameAndCidr
      parameter:
      - name: cidr
        in: path
        description: Network/IP specification in CIDR format.
        required: true
      - name: name
        in: path
        description: IP set name.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Read IP or Network settings from IPSet.
      summary: Read IP or Network settings from IPSet.
      operationId: getClusterFirewallIpsetByNameAndCidr
      parameter:
      - name: cidr
        in: path
        description: Network/IP specification in CIDR format.
        required: true
      - name: name
        in: path
        description: IP set name.
        required: true
      responses: ""
    delete:
      tags:
      - cluster
      description: Remove IP or Network from IPSet.
      summary: Remove IP or Network from IPSet.
      operationId: removeClusterFirewallIpsetByNameAndCidr
      parameter:
      - name: cidr
        in: path
        description: Network/IP specification in CIDR format.
        required: true
      - name: name
        in: path
        description: IP set name.
        required: true
      responses:
        "200":
          description: ok
  /cluster/firewall/macros:
    get:
      tags:
      - cluster
      description: List available macros
      summary: List available macros
      operationId: getClusterFirewallMacros
      parameter: []
      responses:
        "200":
          description: List available macros
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterFirewallMacros'
    summary: macros
  /cluster/firewall/options:
    summary: options
    put:
      tags:
      - cluster
      description: Set Firewall options.
      summary: Set Firewall options.
      operationId: setClusterFirewallOptions
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Get Firewall options.
      summary: Get Firewall options.
      operationId: getClusterFirewallOptions
      parameter: []
      responses:
        "200":
          description: Get Firewall options.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterFirewallOptions'
  /cluster/firewall/refs:
    get:
      tags:
      - cluster
      description: Lists possible IPSet/Alias reference which are allowed in source/dest properties.
      summary: Lists possible IPSet/Alias reference which are allowed in source/dest properties.
      operationId: getClusterFirewallRefs
      parameter: []
      responses:
        "200":
          description: Lists possible IPSet/Alias reference which are allowed in source/dest properties.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterFirewallRefs'
    summary: refs
  /cluster/firewall/rules:
    summary: rules
    post:
      tags:
      - cluster
      description: Create new rule.
      summary: Create new rule.
      operationId: newClusterFirewallRules
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: List rules.
      summary: List rules.
      operationId: getClusterFirewallRules
      parameter: []
      responses:
        "200":
          description: List rules.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterFirewallRules'
  /cluster/firewall/rules/{pos}:
    summary: pos
    put:
      tags:
      - cluster
      description: Modify rule data.
      summary: Modify rule data.
      operationId: setClusterFirewallRulesByPos
      parameter:
      - name: pos
        in: path
        description: Update rule at position <pos>.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Get single rule data.
      summary: Get single rule data.
      operationId: getClusterFirewallRulesByPos
      parameter:
      - name: pos
        in: path
        description: Update rule at position <pos>.
        required: true
      responses:
        "200":
          description: Get single rule data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterFirewallRules'
    delete:
      tags:
      - cluster
      description: Delete rule.
      summary: Delete rule.
      operationId: removeClusterFirewallRulesByPos
      parameter:
      - name: pos
        in: path
        description: Update rule at position <pos>.
        required: true
      responses:
        "200":
          description: ok
  /cluster/ha:
    get:
      tags:
      - cluster
      description: Directory index.
      summary: Directory index.
      operationId: getClusterHa
      parameter: []
      responses:
        "200":
          description: Directory index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterHa'
    summary: ha
  /cluster/ha/groups:
    summary: groups
    post:
      tags:
      - cluster
      description: Create a new HA group.
      summary: Create a new HA group.
      operationId: newClusterHaGroups
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Get HA groups.
      summary: Get HA groups.
      operationId: getClusterHaGroups
      parameter: []
      responses:
        "200":
          description: Get HA groups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterHaGroups'
  /cluster/ha/groups/{group}:
    summary: group
    put:
      tags:
      - cluster
      description: Update ha group configuration.
      summary: Update ha group configuration.
      operationId: setClusterHaGroupsByGroup
      parameter:
      - name: group
        in: path
        description: The HA group identifier.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Read ha group configuration.
      summary: Read ha group configuration.
      operationId: getClusterHaGroupsByGroup
      parameter:
      - name: group
        in: path
        description: The HA group identifier.
        required: true
      responses: ""
    delete:
      tags:
      - cluster
      description: Delete ha group configuration.
      summary: Delete ha group configuration.
      operationId: removeClusterHaGroupsByGroup
      parameter:
      - name: group
        in: path
        description: The HA group identifier.
        required: true
      responses:
        "200":
          description: ok
  /cluster/ha/resources:
    summary: resources
    post:
      tags:
      - cluster
      description: Create a new HA resource.
      summary: Create a new HA resource.
      operationId: newClusterHaResources
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: List HA resources.
      summary: List HA resources.
      operationId: getClusterHaResources
      parameter: []
      responses:
        "200":
          description: List HA resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterHaResources'
  /cluster/ha/resources/{sid}:
    summary: sid
    put:
      tags:
      - cluster
      description: Update resource configuration.
      summary: Update resource configuration.
      operationId: setClusterHaResourcesBySid
      parameter:
      - name: sid
        in: path
        description: 'HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100).'
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Read resource configuration.
      summary: Read resource configuration.
      operationId: getClusterHaResourcesBySid
      parameter:
      - name: sid
        in: path
        description: 'HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100).'
        required: true
      responses:
        "200":
          description: Read resource configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterHaResources'
    delete:
      tags:
      - cluster
      description: Delete resource configuration.
      summary: Delete resource configuration.
      operationId: removeClusterHaResourcesBySid
      parameter:
      - name: sid
        in: path
        description: 'HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100).'
        required: true
      responses:
        "200":
          description: ok
  /cluster/ha/resources/{sid}/migrate:
    post:
      tags:
      - cluster
      description: Request resource migration (online) to another node.
      summary: Request resource migration (online) to another node.
      operationId: newClusterHaResourcesMigrateBySid
      parameter:
      - name: sid
        in: path
        description: 'HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100).'
        required: true
      responses:
        "200":
          description: ok
    summary: migrate
  /cluster/ha/resources/{sid}/relocate:
    post:
      tags:
      - cluster
      description: Request resource relocatzion to another node. This stops the service on the old node, and restarts it on the target node.
      summary: Request resource relocatzion to another node. This stops the service on the old node, and restarts it on the target node.
      operationId: newClusterHaResourcesRelocateBySid
      parameter:
      - name: sid
        in: path
        description: 'HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100).'
        required: true
      responses:
        "200":
          description: ok
    summary: relocate
  /cluster/ha/status:
    get:
      tags:
      - cluster
      description: Directory index.
      summary: Directory index.
      operationId: getClusterHaStatus
      parameter: []
      responses:
        "200":
          description: Directory index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterHaStatus'
    summary: status
  /cluster/ha/status/current:
    get:
      tags:
      - cluster
      description: Get HA manger status.
      summary: Get HA manger status.
      operationId: getClusterHaStatusCurrent
      parameter: []
      responses:
        "200":
          description: Get HA manger status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterHaStatusCurrent'
    summary: current
  /cluster/ha/status/manager_status:
    get:
      tags:
      - cluster
      description: Get full HA manger status, including LRM status.
      summary: Get full HA manger status, including LRM status.
      operationId: getClusterHaStatusManagerstatus
      parameter: []
      responses: ""
    summary: managerstatus
  /cluster/jobs:
    get:
      tags:
      - cluster
      description: Index for jobs related endpoints.
      summary: Index for jobs related endpoints.
      operationId: getClusterJobs
      parameter: []
      responses: ""
    summary: jobs
  /cluster/jobs/realm-sync:
    get:
      tags:
      - cluster
      description: List configured realm-sync-jobs.
      summary: List configured realm-sync-jobs.
      operationId: getClusterJobsRealmsync
      parameter: []
      responses:
        "200":
          description: List configured realm-sync-jobs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterJobsRealmsync'
    summary: realm-sync
  /cluster/jobs/realm-sync/{id}:
    summary: id
    post:
      tags:
      - cluster
      description: Create new realm-sync job.
      summary: Create new realm-sync job.
      operationId: newClusterJobsRealmsyncById
      parameter:
      - name: id
        in: path
        description: The ID of the job.
        required: true
      responses:
        "200":
          description: ok
    put:
      tags:
      - cluster
      description: Update realm-sync job definition.
      summary: Update realm-sync job definition.
      operationId: setClusterJobsRealmsyncById
      parameter:
      - name: id
        in: path
        description: The ID of the job.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Read realm-sync job definition.
      summary: Read realm-sync job definition.
      operationId: getClusterJobsRealmsyncById
      parameter:
      - name: id
        in: path
        description: 
        required: true
      responses: ""
    delete:
      tags:
      - cluster
      description: Delete realm-sync job definition.
      summary: Delete realm-sync job definition.
      operationId: removeClusterJobsRealmsyncById
      parameter:
      - name: id
        in: path
        description: 
        required: true
      responses:
        "200":
          description: ok
  /cluster/jobs/schedule-analyze:
    get:
      tags:
      - cluster
      description: Returns a list of future schedule runtimes.
      summary: Returns a list of future schedule runtimes.
      operationId: getClusterJobsScheduleanalyze
      parameter: []
      responses:
        "200":
          description: Returns a list of future schedule runtimes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterJobsScheduleanalyze'
    summary: schedule-analyze
  /cluster/log:
    get:
      tags:
      - cluster
      description: Read cluster log
      summary: Read cluster log
      operationId: getClusterLog
      parameter: []
      responses:
        "200":
          description: Read cluster log
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterLog'
    summary: log
  /cluster/mapping:
    get:
      tags:
      - cluster
      description: List resource types.
      summary: List resource types.
      operationId: getClusterMapping
      parameter: []
      responses: ""
    summary: mapping
  /cluster/mapping/pci:
    summary: pci
    post:
      tags:
      - cluster
      description: Create a new hardware mapping.
      summary: Create a new hardware mapping.
      operationId: newClusterMappingPci
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: List PCI Hardware Mapping
      summary: List PCI Hardware Mapping
      operationId: getClusterMappingPci
      parameter: []
      responses:
        "200":
          description: List PCI Hardware Mapping
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterMappingPci'
  /cluster/mapping/pci/{id}:
    summary: id
    put:
      tags:
      - cluster
      description: Update a hardware mapping.
      summary: Update a hardware mapping.
      operationId: setClusterMappingPciById
      parameter:
      - name: id
        in: path
        description: The ID of the logical PCI mapping.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Get PCI Mapping.
      summary: Get PCI Mapping.
      operationId: getClusterMappingPciById
      parameter:
      - name: id
        in: path
        description: 
        required: true
      responses: ""
    delete:
      tags:
      - cluster
      description: Remove Hardware Mapping.
      summary: Remove Hardware Mapping.
      operationId: removeClusterMappingPciById
      parameter:
      - name: id
        in: path
        description: 
        required: true
      responses:
        "200":
          description: ok
  /cluster/mapping/usb:
    summary: usb
    post:
      tags:
      - cluster
      description: Create a new hardware mapping.
      summary: Create a new hardware mapping.
      operationId: newClusterMappingUsb
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: List USB Hardware Mappings
      summary: List USB Hardware Mappings
      operationId: getClusterMappingUsb
      parameter: []
      responses:
        "200":
          description: List USB Hardware Mappings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterMappingUsb'
  /cluster/mapping/usb/{id}:
    summary: id
    put:
      tags:
      - cluster
      description: Update a hardware mapping.
      summary: Update a hardware mapping.
      operationId: setClusterMappingUsbById
      parameter:
      - name: id
        in: path
        description: The ID of the logical USB mapping.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Get USB Mapping.
      summary: Get USB Mapping.
      operationId: getClusterMappingUsbById
      parameter:
      - name: id
        in: path
        description: 
        required: true
      responses: ""
    delete:
      tags:
      - cluster
      description: Remove Hardware Mapping.
      summary: Remove Hardware Mapping.
      operationId: removeClusterMappingUsbById
      parameter:
      - name: id
        in: path
        description: 
        required: true
      responses:
        "200":
          description: ok
  /cluster/metrics:
    get:
      tags:
      - cluster
      description: Metrics index.
      summary: Metrics index.
      operationId: getClusterMetrics
      parameter: []
      responses:
        "200":
          description: Metrics index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterMetrics'
    summary: metrics
  /cluster/metrics/export:
    get:
      tags:
      - cluster
      description: Retrieve metrics of the cluster.
      summary: Retrieve metrics of the cluster.
      operationId: getClusterMetricsExport
      parameter: []
      responses:
        "200":
          description: Retrieve metrics of the cluster.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterMetricsExport'
    summary: export
  /cluster/metrics/server:
    get:
      tags:
      - cluster
      description: List configured metric servers.
      summary: List configured metric servers.
      operationId: getClusterMetricsServer
      parameter: []
      responses:
        "200":
          description: List configured metric servers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterMetricsServer'
    summary: server
  /cluster/metrics/server/{id}:
    summary: id
    post:
      tags:
      - cluster
      description: Create a new external metric server config
      summary: Create a new external metric server config
      operationId: newClusterMetricsServerById
      parameter:
      - name: id
        in: path
        description: The ID of the entry.
        required: true
      responses:
        "200":
          description: ok
    put:
      tags:
      - cluster
      description: Update metric server configuration.
      summary: Update metric server configuration.
      operationId: setClusterMetricsServerById
      parameter:
      - name: id
        in: path
        description: The ID of the entry.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Read metric server configuration.
      summary: Read metric server configuration.
      operationId: getClusterMetricsServerById
      parameter:
      - name: id
        in: path
        description: 
        required: true
      responses: ""
    delete:
      tags:
      - cluster
      description: Remove Metric server.
      summary: Remove Metric server.
      operationId: removeClusterMetricsServerById
      parameter:
      - name: id
        in: path
        description: 
        required: true
      responses:
        "200":
          description: ok
  /cluster/nextid:
    get:
      tags:
      - cluster
      description: Get next free VMID. Pass a VMID to assert that its free (at time of check).
      summary: Get next free VMID. Pass a VMID to assert that its free (at time of check).
      operationId: getClusterNextid
      parameter: []
      responses: ""
    summary: nextid
  /cluster/notifications:
    get:
      tags:
      - cluster
      description: Index for notification-related API endpoints.
      summary: Index for notification-related API endpoints.
      operationId: getClusterNotifications
      parameter: []
      responses:
        "200":
          description: Index for notification-related API endpoints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotifications'
    summary: notifications
  /cluster/notifications/endpoints:
    get:
      tags:
      - cluster
      description: Index for all available endpoint types.
      summary: Index for all available endpoint types.
      operationId: getClusterNotificationsEndpoints
      parameter: []
      responses:
        "200":
          description: Index for all available endpoint types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotificationsEndpoints'
    summary: endpoints
  /cluster/notifications/endpoints/gotify:
    summary: gotify
    post:
      tags:
      - cluster
      description: Create a new gotify endpoint
      summary: Create a new gotify endpoint
      operationId: newClusterNotificationsEndpointsGotify
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Returns a list of all gotify endpoints
      summary: Returns a list of all gotify endpoints
      operationId: getClusterNotificationsEndpointsGotify
      parameter: []
      responses:
        "200":
          description: Returns a list of all gotify endpoints
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotificationsEndpointsGotify'
  /cluster/notifications/endpoints/gotify/{name}:
    summary: name
    put:
      tags:
      - cluster
      description: Update existing gotify endpoint
      summary: Update existing gotify endpoint
      operationId: setClusterNotificationsEndpointsGotifyByName
      parameter:
      - name: name
        in: path
        description: The name of the endpoint.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Return a specific gotify endpoint
      summary: Return a specific gotify endpoint
      operationId: getClusterNotificationsEndpointsGotifyByName
      parameter:
      - name: name
        in: path
        description: Name of the endpoint.
        required: true
      responses:
        "200":
          description: Return a specific gotify endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotificationsEndpointsGotify'
    delete:
      tags:
      - cluster
      description: Remove gotify endpoint
      summary: Remove gotify endpoint
      operationId: removeClusterNotificationsEndpointsGotifyByName
      parameter:
      - name: name
        in: path
        description: 
        required: true
      responses:
        "200":
          description: ok
  /cluster/notifications/endpoints/sendmail:
    summary: sendmail
    post:
      tags:
      - cluster
      description: Create a new sendmail endpoint
      summary: Create a new sendmail endpoint
      operationId: newClusterNotificationsEndpointsSendmail
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Returns a list of all sendmail endpoints
      summary: Returns a list of all sendmail endpoints
      operationId: getClusterNotificationsEndpointsSendmail
      parameter: []
      responses:
        "200":
          description: Returns a list of all sendmail endpoints
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotificationsEndpointsSendmail'
  /cluster/notifications/endpoints/sendmail/{name}:
    summary: name
    put:
      tags:
      - cluster
      description: Update existing sendmail endpoint
      summary: Update existing sendmail endpoint
      operationId: setClusterNotificationsEndpointsSendmailByName
      parameter:
      - name: name
        in: path
        description: The name of the endpoint.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Return a specific sendmail endpoint
      summary: Return a specific sendmail endpoint
      operationId: getClusterNotificationsEndpointsSendmailByName
      parameter:
      - name: name
        in: path
        description: 
        required: true
      responses:
        "200":
          description: Return a specific sendmail endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotificationsEndpointsSendmail'
    delete:
      tags:
      - cluster
      description: Remove sendmail endpoint
      summary: Remove sendmail endpoint
      operationId: removeClusterNotificationsEndpointsSendmailByName
      parameter:
      - name: name
        in: path
        description: 
        required: true
      responses:
        "200":
          description: ok
  /cluster/notifications/endpoints/smtp:
    summary: smtp
    post:
      tags:
      - cluster
      description: Create a new smtp endpoint
      summary: Create a new smtp endpoint
      operationId: newClusterNotificationsEndpointsSmtp
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Returns a list of all smtp endpoints
      summary: Returns a list of all smtp endpoints
      operationId: getClusterNotificationsEndpointsSmtp
      parameter: []
      responses:
        "200":
          description: Returns a list of all smtp endpoints
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotificationsEndpointsSmtp'
  /cluster/notifications/endpoints/smtp/{name}:
    summary: name
    put:
      tags:
      - cluster
      description: Update existing smtp endpoint
      summary: Update existing smtp endpoint
      operationId: setClusterNotificationsEndpointsSmtpByName
      parameter:
      - name: name
        in: path
        description: The name of the endpoint.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Return a specific smtp endpoint
      summary: Return a specific smtp endpoint
      operationId: getClusterNotificationsEndpointsSmtpByName
      parameter:
      - name: name
        in: path
        description: 
        required: true
      responses:
        "200":
          description: Return a specific smtp endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotificationsEndpointsSmtp'
    delete:
      tags:
      - cluster
      description: Remove smtp endpoint
      summary: Remove smtp endpoint
      operationId: removeClusterNotificationsEndpointsSmtpByName
      parameter:
      - name: name
        in: path
        description: 
        required: true
      responses:
        "200":
          description: ok
  /cluster/notifications/endpoints/webhook:
    summary: webhook
    post:
      tags:
      - cluster
      description: Create a new webhook endpoint
      summary: Create a new webhook endpoint
      operationId: newClusterNotificationsEndpointsWebhook
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Returns a list of all webhook endpoints
      summary: Returns a list of all webhook endpoints
      operationId: getClusterNotificationsEndpointsWebhook
      parameter: []
      responses:
        "200":
          description: Returns a list of all webhook endpoints
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotificationsEndpointsWebhook'
  /cluster/notifications/endpoints/webhook/{name}:
    summary: name
    put:
      tags:
      - cluster
      description: Update existing webhook endpoint
      summary: Update existing webhook endpoint
      operationId: setClusterNotificationsEndpointsWebhookByName
      parameter:
      - name: name
        in: path
        description: The name of the endpoint.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Return a specific webhook endpoint
      summary: Return a specific webhook endpoint
      operationId: getClusterNotificationsEndpointsWebhookByName
      parameter:
      - name: name
        in: path
        description: Name of the endpoint.
        required: true
      responses:
        "200":
          description: Return a specific webhook endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotificationsEndpointsWebhook'
    delete:
      tags:
      - cluster
      description: Remove webhook endpoint
      summary: Remove webhook endpoint
      operationId: removeClusterNotificationsEndpointsWebhookByName
      parameter:
      - name: name
        in: path
        description: 
        required: true
      responses:
        "200":
          description: ok
  /cluster/notifications/matcher-field-values:
    get:
      tags:
      - cluster
      description: Returns known notification metadata fields and their known values
      summary: Returns known notification metadata fields and their known values
      operationId: getClusterNotificationsMatcherfieldvalues
      parameter: []
      responses:
        "200":
          description: Returns known notification metadata fields and their known values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotificationsMatcherfieldvalues'
    summary: matcher-field-values
  /cluster/notifications/matcher-fields:
    get:
      tags:
      - cluster
      description: Returns known notification metadata fields
      summary: Returns known notification metadata fields
      operationId: getClusterNotificationsMatcherfields
      parameter: []
      responses:
        "200":
          description: Returns known notification metadata fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotificationsMatcherfields'
    summary: matcher-fields
  /cluster/notifications/matchers:
    summary: matchers
    post:
      tags:
      - cluster
      description: Create a new matcher
      summary: Create a new matcher
      operationId: newClusterNotificationsMatchers
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Returns a list of all matchers
      summary: Returns a list of all matchers
      operationId: getClusterNotificationsMatchers
      parameter: []
      responses:
        "200":
          description: Returns a list of all matchers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotificationsMatchers'
  /cluster/notifications/matchers/{name}:
    summary: name
    put:
      tags:
      - cluster
      description: Update existing matcher
      summary: Update existing matcher
      operationId: setClusterNotificationsMatchersByName
      parameter:
      - name: name
        in: path
        description: Name of the matcher.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Return a specific matcher
      summary: Return a specific matcher
      operationId: getClusterNotificationsMatchersByName
      parameter:
      - name: name
        in: path
        description: 
        required: true
      responses:
        "200":
          description: Return a specific matcher
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotificationsMatchers'
    delete:
      tags:
      - cluster
      description: Remove matcher
      summary: Remove matcher
      operationId: removeClusterNotificationsMatchersByName
      parameter:
      - name: name
        in: path
        description: 
        required: true
      responses:
        "200":
          description: ok
  /cluster/notifications/targets:
    get:
      tags:
      - cluster
      description: Returns a list of all entities that can be used as notification targets.
      summary: Returns a list of all entities that can be used as notification targets.
      operationId: getClusterNotificationsTargets
      parameter: []
      responses:
        "200":
          description: Returns a list of all entities that can be used as notification targets.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNotificationsTargets'
    summary: targets
  /cluster/notifications/targets/{name}/test:
    post:
      tags:
      - cluster
      description: Send a test notification to a provided target.
      summary: Send a test notification to a provided target.
      operationId: newClusterNotificationsTargetsTestByName
      parameter:
      - name: name
        in: path
        description: Name of the target.
        required: true
      responses:
        "200":
          description: ok
    summary: test
  /cluster/options:
    summary: options
    put:
      tags:
      - cluster
      description: Set datacenter options.
      summary: Set datacenter options.
      operationId: setClusterOptions
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Get datacenter options. Without 'Sys.Audit' on '/' not all options are returned.
      summary: Get datacenter options. Without 'Sys.Audit' on '/' not all options are returned.
      operationId: getClusterOptions
      parameter: []
      responses: ""
  /cluster/replication:
    summary: replication
    post:
      tags:
      - cluster
      description: Create a new replication job
      summary: Create a new replication job
      operationId: newClusterReplication
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: List replication jobs.
      summary: List replication jobs.
      operationId: getClusterReplication
      parameter: []
      responses:
        "200":
          description: List replication jobs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterReplication'
  /cluster/replication/{id}:
    summary: id
    put:
      tags:
      - cluster
      description: Update replication job configuration.
      summary: Update replication job configuration.
      operationId: setClusterReplicationById
      parameter:
      - name: id
        in: path
        description: Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Read replication job configuration.
      summary: Read replication job configuration.
      operationId: getClusterReplicationById
      parameter:
      - name: id
        in: path
        description: Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.
        required: true
      responses: ""
    delete:
      tags:
      - cluster
      description: Mark replication job for removal.
      summary: Mark replication job for removal.
      operationId: removeClusterReplicationById
      parameter:
      - name: id
        in: path
        description: Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.
        required: true
      responses:
        "200":
          description: ok
  /cluster/resources:
    get:
      tags:
      - cluster
      description: Resources index (cluster wide).
      summary: Resources index (cluster wide).
      operationId: getClusterResources
      parameter: []
      responses:
        "200":
          description: Resources index (cluster wide).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterResources'
    summary: resources
  /cluster/sdn:
    summary: sdn
    put:
      tags:
      - cluster
      description: Apply sdn controller changes && reload.
      summary: Apply sdn controller changes && reload.
      operationId: setClusterSdn
      parameter: []
      responses: ""
    get:
      tags:
      - cluster
      description: Directory index.
      summary: Directory index.
      operationId: getClusterSdn
      parameter: []
      responses:
        "200":
          description: Directory index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterSdn'
  /cluster/sdn/controllers:
    summary: controllers
    post:
      tags:
      - cluster
      description: Create a new sdn controller object.
      summary: Create a new sdn controller object.
      operationId: newClusterSdnControllers
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: SDN controllers index.
      summary: SDN controllers index.
      operationId: getClusterSdnControllers
      parameter: []
      responses:
        "200":
          description: SDN controllers index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterSdnControllers'
  /cluster/sdn/controllers/{controller}:
    summary: controller
    put:
      tags:
      - cluster
      description: Update sdn controller object configuration.
      summary: Update sdn controller object configuration.
      operationId: setClusterSdnControllersByController
      parameter:
      - name: controller
        in: path
        description: The SDN controller object identifier.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Read sdn controller configuration.
      summary: Read sdn controller configuration.
      operationId: getClusterSdnControllersByController
      parameter:
      - name: controller
        in: path
        description: The SDN controller object identifier.
        required: true
      responses: ""
    delete:
      tags:
      - cluster
      description: Delete sdn controller object configuration.
      summary: Delete sdn controller object configuration.
      operationId: removeClusterSdnControllersByController
      parameter:
      - name: controller
        in: path
        description: The SDN controller object identifier.
        required: true
      responses:
        "200":
          description: ok
  /cluster/sdn/dns:
    summary: dns
    post:
      tags:
      - cluster
      description: Create a new sdn dns object.
      summary: Create a new sdn dns object.
      operationId: newClusterSdnDns
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: SDN dns index.
      summary: SDN dns index.
      operationId: getClusterSdnDns
      parameter: []
      responses:
        "200":
          description: SDN dns index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterSdnDns'
  /cluster/sdn/dns/{dns}:
    summary: dns
    put:
      tags:
      - cluster
      description: Update sdn dns object configuration.
      summary: Update sdn dns object configuration.
      operationId: setClusterSdnDnsByDns
      parameter:
      - name: dns
        in: path
        description: The SDN dns object identifier.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Read sdn dns configuration.
      summary: Read sdn dns configuration.
      operationId: getClusterSdnDnsByDns
      parameter:
      - name: dns
        in: path
        description: The SDN dns object identifier.
        required: true
      responses: ""
    delete:
      tags:
      - cluster
      description: Delete sdn dns object configuration.
      summary: Delete sdn dns object configuration.
      operationId: removeClusterSdnDnsByDns
      parameter:
      - name: dns
        in: path
        description: The SDN dns object identifier.
        required: true
      responses:
        "200":
          description: ok
  /cluster/sdn/ipams:
    summary: ipams
    post:
      tags:
      - cluster
      description: Create a new sdn ipam object.
      summary: Create a new sdn ipam object.
      operationId: newClusterSdnIpams
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: SDN ipams index.
      summary: SDN ipams index.
      operationId: getClusterSdnIpams
      parameter: []
      responses:
        "200":
          description: SDN ipams index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterSdnIpams'
  /cluster/sdn/ipams/{ipam}:
    summary: ipam
    put:
      tags:
      - cluster
      description: Update sdn ipam object configuration.
      summary: Update sdn ipam object configuration.
      operationId: setClusterSdnIpamsByIpam
      parameter:
      - name: ipam
        in: path
        description: The SDN ipam object identifier.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Read sdn ipam configuration.
      summary: Read sdn ipam configuration.
      operationId: getClusterSdnIpamsByIpam
      parameter:
      - name: ipam
        in: path
        description: The SDN ipam object identifier.
        required: true
      responses: ""
    delete:
      tags:
      - cluster
      description: Delete sdn ipam object configuration.
      summary: Delete sdn ipam object configuration.
      operationId: removeClusterSdnIpamsByIpam
      parameter:
      - name: ipam
        in: path
        description: The SDN ipam object identifier.
        required: true
      responses:
        "200":
          description: ok
  /cluster/sdn/ipams/{ipam}/status:
    get:
      tags:
      - cluster
      description: List PVE IPAM Entries
      summary: List PVE IPAM Entries
      operationId: getClusterSdnIpamsStatusByIpam
      parameter:
      - name: ipam
        in: path
        description: The SDN ipam object identifier.
        required: true
      responses: ""
    summary: status
  /cluster/sdn/vnets:
    summary: vnets
    post:
      tags:
      - cluster
      description: Create a new sdn vnet object.
      summary: Create a new sdn vnet object.
      operationId: newClusterSdnVnets
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: SDN vnets index.
      summary: SDN vnets index.
      operationId: getClusterSdnVnets
      parameter: []
      responses:
        "200":
          description: SDN vnets index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterSdnVnets'
  /cluster/sdn/vnets/{vnet}:
    summary: vnet
    put:
      tags:
      - cluster
      description: Update sdn vnet object configuration.
      summary: Update sdn vnet object configuration.
      operationId: setClusterSdnVnetsByVnet
      parameter:
      - name: vnet
        in: path
        description: The SDN vnet object identifier.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Read sdn vnet configuration.
      summary: Read sdn vnet configuration.
      operationId: getClusterSdnVnetsByVnet
      parameter:
      - name: vnet
        in: path
        description: The SDN vnet object identifier.
        required: true
      responses: ""
    delete:
      tags:
      - cluster
      description: Delete sdn vnet object configuration.
      summary: Delete sdn vnet object configuration.
      operationId: removeClusterSdnVnetsByVnet
      parameter:
      - name: vnet
        in: path
        description: The SDN vnet object identifier.
        required: true
      responses:
        "200":
          description: ok
  /cluster/sdn/vnets/{vnet}/firewall:
    get:
      tags:
      - cluster
      description: Directory index.
      summary: Directory index.
      operationId: getClusterSdnVnetsFirewallByVnet
      parameter:
      - name: vnet
        in: path
        description: The SDN vnet object identifier.
        required: true
      responses:
        "200":
          description: Directory index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterSdnVnetsFirewall'
    summary: firewall
  /cluster/sdn/vnets/{vnet}/firewall/options:
    summary: options
    put:
      tags:
      - cluster
      description: Set Firewall options.
      summary: Set Firewall options.
      operationId: setClusterSdnVnetsFirewallOptionsByVnet
      parameter:
      - name: vnet
        in: path
        description: The SDN vnet object identifier.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Get vnet firewall options.
      summary: Get vnet firewall options.
      operationId: getClusterSdnVnetsFirewallOptionsByVnet
      parameter:
      - name: vnet
        in: path
        description: The SDN vnet object identifier.
        required: true
      responses:
        "200":
          description: Get vnet firewall options.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterSdnVnetsFirewallOptions'
  /cluster/sdn/vnets/{vnet}/firewall/rules:
    summary: rules
    post:
      tags:
      - cluster
      description: Create new rule.
      summary: Create new rule.
      operationId: newClusterSdnVnetsFirewallRulesByVnet
      parameter:
      - name: vnet
        in: path
        description: The SDN vnet object identifier.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: List rules.
      summary: List rules.
      operationId: getClusterSdnVnetsFirewallRulesByVnet
      parameter:
      - name: vnet
        in: path
        description: The SDN vnet object identifier.
        required: true
      responses:
        "200":
          description: List rules.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterSdnVnetsFirewallRules'
  /cluster/sdn/vnets/{vnet}/firewall/rules/{pos}:
    summary: pos
    put:
      tags:
      - cluster
      description: Modify rule data.
      summary: Modify rule data.
      operationId: setClusterSdnVnetsFirewallRulesByVnetAndPos
      parameter:
      - name: pos
        in: path
        description: Update rule at position <pos>.
        required: true
      - name: vnet
        in: path
        description: The SDN vnet object identifier.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Get single rule data.
      summary: Get single rule data.
      operationId: getClusterSdnVnetsFirewallRulesByVnetAndPos
      parameter:
      - name: pos
        in: path
        description: Update rule at position <pos>.
        required: true
      - name: vnet
        in: path
        description: The SDN vnet object identifier.
        required: true
      responses:
        "200":
          description: Get single rule data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterSdnVnetsFirewallRules'
    delete:
      tags:
      - cluster
      description: Delete rule.
      summary: Delete rule.
      operationId: removeClusterSdnVnetsFirewallRulesByVnetAndPos
      parameter:
      - name: pos
        in: path
        description: Update rule at position <pos>.
        required: true
      - name: vnet
        in: path
        description: The SDN vnet object identifier.
        required: true
      responses:
        "200":
          description: ok
  /cluster/sdn/vnets/{vnet}/ips:
    summary: ips
    post:
      tags:
      - cluster
      description: Create IP Mapping in a VNet
      summary: Create IP Mapping in a VNet
      operationId: newClusterSdnVnetsIpsByVnet
      parameter:
      - name: vnet
        in: path
        description: The SDN vnet object identifier.
        required: true
      responses:
        "200":
          description: ok
    put:
      tags:
      - cluster
      description: Update IP Mapping in a VNet
      summary: Update IP Mapping in a VNet
      operationId: setClusterSdnVnetsIpsByVnet
      parameter:
      - name: vnet
        in: path
        description: The SDN vnet object identifier.
        required: true
      responses:
        "200":
          description: ok
    delete:
      tags:
      - cluster
      description: Delete IP Mappings in a VNet
      summary: Delete IP Mappings in a VNet
      operationId: removeClusterSdnVnetsIpsByVnet
      parameter:
      - name: vnet
        in: path
        description: The SDN vnet object identifier.
        required: true
      responses:
        "200":
          description: ok
  /cluster/sdn/vnets/{vnet}/subnets:
    summary: subnets
    post:
      tags:
      - cluster
      description: Create a new sdn subnet object.
      summary: Create a new sdn subnet object.
      operationId: newClusterSdnVnetsSubnetsByVnet
      parameter:
      - name: vnet
        in: path
        description: associated vnet
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: SDN subnets index.
      summary: SDN subnets index.
      operationId: getClusterSdnVnetsSubnetsByVnet
      parameter:
      - name: vnet
        in: path
        description: The SDN vnet object identifier.
        required: true
      responses:
        "200":
          description: SDN subnets index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterSdnVnetsSubnets'
  /cluster/sdn/vnets/{vnet}/subnets/{subnet}:
    summary: subnet
    put:
      tags:
      - cluster
      description: Update sdn subnet object configuration.
      summary: Update sdn subnet object configuration.
      operationId: setClusterSdnVnetsSubnetsByVnetAndSubnet
      parameter:
      - name: subnet
        in: path
        description: The SDN subnet object identifier.
        required: true
      - name: vnet
        in: path
        description: associated vnet
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Read sdn subnet configuration.
      summary: Read sdn subnet configuration.
      operationId: getClusterSdnVnetsSubnetsByVnetAndSubnet
      parameter:
      - name: subnet
        in: path
        description: The SDN subnet object identifier.
        required: true
      - name: vnet
        in: path
        description: The SDN vnet object identifier.
        required: true
      responses: ""
    delete:
      tags:
      - cluster
      description: Delete sdn subnet object configuration.
      summary: Delete sdn subnet object configuration.
      operationId: removeClusterSdnVnetsSubnetsByVnetAndSubnet
      parameter:
      - name: subnet
        in: path
        description: The SDN subnet object identifier.
        required: true
      - name: vnet
        in: path
        description: The SDN vnet object identifier.
        required: true
      responses:
        "200":
          description: ok
  /cluster/sdn/zones:
    summary: zones
    post:
      tags:
      - cluster
      description: Create a new sdn zone object.
      summary: Create a new sdn zone object.
      operationId: newClusterSdnZones
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: SDN zones index.
      summary: SDN zones index.
      operationId: getClusterSdnZones
      parameter: []
      responses:
        "200":
          description: SDN zones index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterSdnZones'
  /cluster/sdn/zones/{zone}:
    summary: zone
    put:
      tags:
      - cluster
      description: Update sdn zone object configuration.
      summary: Update sdn zone object configuration.
      operationId: setClusterSdnZonesByZone
      parameter:
      - name: zone
        in: path
        description: The SDN zone object identifier.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - cluster
      description: Read sdn zone configuration.
      summary: Read sdn zone configuration.
      operationId: getClusterSdnZonesByZone
      parameter:
      - name: zone
        in: path
        description: The SDN zone object identifier.
        required: true
      responses: ""
    delete:
      tags:
      - cluster
      description: Delete sdn zone object configuration.
      summary: Delete sdn zone object configuration.
      operationId: removeClusterSdnZonesByZone
      parameter:
      - name: zone
        in: path
        description: The SDN zone object identifier.
        required: true
      responses:
        "200":
          description: ok
  /cluster/status:
    get:
      tags:
      - cluster
      description: Get cluster status information.
      summary: Get cluster status information.
      operationId: getClusterStatus
      parameter: []
      responses:
        "200":
          description: Get cluster status information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterStatus'
    summary: status
  /cluster/tasks:
    get:
      tags:
      - cluster
      description: List recent tasks (cluster wide).
      summary: List recent tasks (cluster wide).
      operationId: getClusterTasks
      parameter: []
      responses:
        "200":
          description: List recent tasks (cluster wide).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterTasks'
    summary: tasks
  /nodes:
    get:
      tags:
      - nodes
      description: Cluster node index.
      summary: Cluster node index.
      operationId: getNodes
      parameter: []
      responses:
        "200":
          description: Cluster node index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nodes'
    summary: nodes
  /nodes/{node}:
    get:
      tags:
      - nodes
      description: Node index.
      summary: Node index.
      operationId: getNodesByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Node index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nodes-AV'
    summary: node
  /nodes/{node}/aplinfo:
    summary: aplinfo
    post:
      tags:
      - nodes
      description: Download appliance templates.
      summary: Download appliance templates.
      operationId: newNodesAplinfoByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    get:
      tags:
      - nodes
      description: Get list of appliances.
      summary: Get list of appliances.
      operationId: getNodesAplinfoByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Get list of appliances.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesAplinfo'
  /nodes/{node}/apt:
    get:
      tags:
      - nodes
      description: Directory index for apt (Advanced Package Tool).
      summary: Directory index for apt (Advanced Package Tool).
      operationId: getNodesAptByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Directory index for apt (Advanced Package Tool).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesApt'
    summary: apt
  /nodes/{node}/apt/changelog:
    get:
      tags:
      - nodes
      description: Get package changelogs.
      summary: Get package changelogs.
      operationId: getNodesAptChangelogByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: changelog
  /nodes/{node}/apt/repositories:
    summary: repositories
    post:
      tags:
      - nodes
      description: Change the properties of a repository. Currently only allows enabling/disabling.
      summary: Change the properties of a repository. Currently only allows enabling/disabling.
      operationId: newNodesAptRepositoriesByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: ok
    put:
      tags:
      - nodes
      description: Add a standard repository to the configuration
      summary: Add a standard repository to the configuration
      operationId: setNodesAptRepositoriesByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: Get APT repository information.
      summary: Get APT repository information.
      operationId: getNodesAptRepositoriesByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Get APT repository information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesAptRepositories'
  /nodes/{node}/apt/update:
    summary: update
    post:
      tags:
      - nodes
      description: This is used to resynchronize the package index files from their sources (apt-get update).
      summary: This is used to resynchronize the package index files from their sources (apt-get update).
      operationId: newNodesAptUpdateByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    get:
      tags:
      - nodes
      description: List available updates.
      summary: List available updates.
      operationId: getNodesAptUpdateByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: List available updates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesAptUpdate'
  /nodes/{node}/apt/versions:
    get:
      tags:
      - nodes
      description: Get package information for important Proxmox packages.
      summary: Get package information for important Proxmox packages.
      operationId: getNodesAptVersionsByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Get package information for important Proxmox packages.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesAptVersions'
    summary: versions
  /nodes/{node}/capabilities:
    get:
      tags:
      - nodes
      description: Node capabilities index.
      summary: Node capabilities index.
      operationId: getNodesCapabilitiesByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Node capabilities index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesCapabilities'
    summary: capabilities
  /nodes/{node}/capabilities/qemu:
    get:
      tags:
      - nodes
      description: QEMU capabilities index.
      summary: QEMU capabilities index.
      operationId: getNodesCapabilitiesQemuByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: QEMU capabilities index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesCapabilitiesQemu'
    summary: qemu
  /nodes/{node}/capabilities/qemu/cpu:
    get:
      tags:
      - nodes
      description: List all custom and default CPU models.
      summary: List all custom and default CPU models.
      operationId: getNodesCapabilitiesQemuCpuByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: List all custom and default CPU models.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesCapabilitiesQemuCpu'
    summary: cpu
  /nodes/{node}/capabilities/qemu/machines:
    get:
      tags:
      - nodes
      description: Get available QEMU/KVM machine types.
      summary: Get available QEMU/KVM machine types.
      operationId: getNodesCapabilitiesQemuMachinesByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Get available QEMU/KVM machine types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesCapabilitiesQemuMachines'
    summary: machines
  /nodes/{node}/ceph:
    get:
      tags:
      - nodes
      description: Directory index.
      summary: Directory index.
      operationId: getNodesCephByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Directory index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesCeph'
    summary: ceph
  /nodes/{node}/ceph/cfg:
    get:
      tags:
      - nodes
      description: Directory index.
      summary: Directory index.
      operationId: getNodesCephCfgByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Directory index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesCephCfg'
    summary: cfg
  /nodes/{node}/ceph/cfg/db:
    get:
      tags:
      - nodes
      description: Get the Ceph configuration database.
      summary: Get the Ceph configuration database.
      operationId: getNodesCephCfgDbByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Get the Ceph configuration database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesCephCfgDb'
    summary: db
  /nodes/{node}/ceph/cfg/raw:
    get:
      tags:
      - nodes
      description: Get the Ceph configuration file.
      summary: Get the Ceph configuration file.
      operationId: getNodesCephCfgRawByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: raw
  /nodes/{node}/ceph/cfg/value:
    get:
      tags:
      - nodes
      description: Get configured values from either the config file or config DB.
      summary: Get configured values from either the config file or config DB.
      operationId: getNodesCephCfgValueByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: value
  /nodes/{node}/ceph/cmd-safety:
    get:
      tags:
      - nodes
      description: Heuristical check if it is safe to perform an action.
      summary: Heuristical check if it is safe to perform an action.
      operationId: getNodesCephCmdsafetyByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Heuristical check if it is safe to perform an action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesCephCmdsafety'
    summary: cmd-safety
  /nodes/{node}/ceph/crush:
    get:
      tags:
      - nodes
      description: Get OSD crush map
      summary: Get OSD crush map
      operationId: getNodesCephCrushByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: crush
  /nodes/{node}/ceph/fs:
    get:
      tags:
      - nodes
      description: Directory index.
      summary: Directory index.
      operationId: getNodesCephFsByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Directory index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesCephFs'
    summary: fs
  /nodes/{node}/ceph/fs/{name}:
    post:
      tags:
      - nodes
      description: Create a Ceph filesystem
      summary: Create a Ceph filesystem
      operationId: newNodesCephFsByNodeAndName
      parameter:
      - name: name
        in: path
        description: The ceph filesystem name.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: name
  /nodes/{node}/ceph/init:
    post:
      tags:
      - nodes
      description: Create initial ceph default configuration and setup symlinks.
      summary: Create initial ceph default configuration and setup symlinks.
      operationId: newNodesCephInitByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: ok
    summary: init
  /nodes/{node}/ceph/log:
    get:
      tags:
      - nodes
      description: Read ceph log
      summary: Read ceph log
      operationId: getNodesCephLogByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Read ceph log
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesCephLog'
    summary: log
  /nodes/{node}/ceph/mds:
    get:
      tags:
      - nodes
      description: MDS directory index.
      summary: MDS directory index.
      operationId: getNodesCephMdsByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: MDS directory index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesCephMds'
    summary: mds
  /nodes/{node}/ceph/mds/{name}:
    summary: name
    post:
      tags:
      - nodes
      description: Create Ceph Metadata Server (MDS)
      summary: Create Ceph Metadata Server (MDS)
      operationId: newNodesCephMdsByNodeAndName
      parameter:
      - name: name
        in: path
        description: The ID for the mds, when omitted the same as the nodename
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    delete:
      tags:
      - nodes
      description: Destroy Ceph Metadata Server
      summary: Destroy Ceph Metadata Server
      operationId: removeNodesCephMdsByNodeAndName
      parameter:
      - name: name
        in: path
        description: The name (ID) of the mds
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
  /nodes/{node}/ceph/mgr:
    get:
      tags:
      - nodes
      description: MGR directory index.
      summary: MGR directory index.
      operationId: getNodesCephMgrByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: MGR directory index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesCephMgr'
    summary: mgr
  /nodes/{node}/ceph/mgr/{id}:
    summary: id
    post:
      tags:
      - nodes
      description: Create Ceph Manager
      summary: Create Ceph Manager
      operationId: newNodesCephMgrByNodeAndId
      parameter:
      - name: id
        in: path
        description: The ID for the manager, when omitted the same as the nodename
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    delete:
      tags:
      - nodes
      description: Destroy Ceph Manager.
      summary: Destroy Ceph Manager.
      operationId: removeNodesCephMgrByNodeAndId
      parameter:
      - name: id
        in: path
        description: The ID of the manager
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
  /nodes/{node}/ceph/mon:
    get:
      tags:
      - nodes
      description: Get Ceph monitor list.
      summary: Get Ceph monitor list.
      operationId: getNodesCephMonByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Get Ceph monitor list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesCephMon'
    summary: mon
  /nodes/{node}/ceph/mon/{monid}:
    summary: monid
    post:
      tags:
      - nodes
      description: Create Ceph Monitor and Manager
      summary: Create Ceph Monitor and Manager
      operationId: newNodesCephMonByNodeAndMonid
      parameter:
      - name: monid
        in: path
        description: The ID for the monitor, when omitted the same as the nodename
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    delete:
      tags:
      - nodes
      description: Destroy Ceph Monitor and Manager.
      summary: Destroy Ceph Monitor and Manager.
      operationId: removeNodesCephMonByNodeAndMonid
      parameter:
      - name: monid
        in: path
        description: Monitor ID
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
  /nodes/{node}/ceph/osd:
    summary: osd
    post:
      tags:
      - nodes
      description: Create OSD
      summary: Create OSD
      operationId: newNodesCephOsdByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    get:
      tags:
      - nodes
      description: Get Ceph osd list/tree.
      summary: Get Ceph osd list/tree.
      operationId: getNodesCephOsdByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
  /nodes/{node}/ceph/osd/{osdid}:
    summary: osdid
    get:
      tags:
      - nodes
      description: OSD index.
      summary: OSD index.
      operationId: getNodesCephOsdByNodeAndOsdid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: osdid
        in: path
        description: OSD ID
        required: true
      responses:
        "200":
          description: OSD index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesCephOsd'
    delete:
      tags:
      - nodes
      description: Destroy OSD
      summary: Destroy OSD
      operationId: removeNodesCephOsdByNodeAndOsdid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: osdid
        in: path
        description: OSD ID
        required: true
      responses: ""
  /nodes/{node}/ceph/osd/{osdid}/in:
    post:
      tags:
      - nodes
      description: ceph osd in
      summary: ceph osd in
      operationId: newNodesCephOsdInByNodeAndOsdid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: osdid
        in: path
        description: OSD ID
        required: true
      responses:
        "200":
          description: ok
    summary: in
  /nodes/{node}/ceph/osd/{osdid}/lv-info:
    get:
      tags:
      - nodes
      description: Get OSD volume details
      summary: Get OSD volume details
      operationId: getNodesCephOsdLvinfoByNodeAndOsdid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: osdid
        in: path
        description: OSD ID
        required: true
      responses:
        "200":
          description: Get OSD volume details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesCephOsdLvinfo'
    summary: lv-info
  /nodes/{node}/ceph/osd/{osdid}/metadata:
    get:
      tags:
      - nodes
      description: Get OSD details
      summary: Get OSD details
      operationId: getNodesCephOsdMetadataByNodeAndOsdid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: osdid
        in: path
        description: OSD ID
        required: true
      responses:
        "200":
          description: Get OSD details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesCephOsdMetadata'
    summary: metadata
  /nodes/{node}/ceph/osd/{osdid}/out:
    post:
      tags:
      - nodes
      description: ceph osd out
      summary: ceph osd out
      operationId: newNodesCephOsdOutByNodeAndOsdid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: osdid
        in: path
        description: OSD ID
        required: true
      responses:
        "200":
          description: ok
    summary: out
  /nodes/{node}/ceph/osd/{osdid}/scrub:
    post:
      tags:
      - nodes
      description: Instruct the OSD to scrub.
      summary: Instruct the OSD to scrub.
      operationId: newNodesCephOsdScrubByNodeAndOsdid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: osdid
        in: path
        description: OSD ID
        required: true
      responses:
        "200":
          description: ok
    summary: scrub
  /nodes/{node}/ceph/pool:
    summary: pool
    post:
      tags:
      - nodes
      description: Create Ceph pool
      summary: Create Ceph pool
      operationId: newNodesCephPoolByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    get:
      tags:
      - nodes
      description: List all pools and their settings (which are settable by the POST/PUT endpoints).
      summary: List all pools and their settings (which are settable by the POST/PUT endpoints).
      operationId: getNodesCephPoolByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: List all pools and their settings (which are settable by the POST/PUT endpoints).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesCephPool'
  /nodes/{node}/ceph/pool/{name}:
    summary: name
    put:
      tags:
      - nodes
      description: Change POOL settings
      summary: Change POOL settings
      operationId: setNodesCephPoolByNodeAndName
      parameter:
      - name: name
        in: path
        description: The name of the pool. It must be unique.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    get:
      tags:
      - nodes
      description: Pool index.
      summary: Pool index.
      operationId: getNodesCephPoolByNodeAndName
      parameter:
      - name: name
        in: path
        description: The name of the pool.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Pool index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesCephPool-AV'
    delete:
      tags:
      - nodes
      description: Destroy pool
      summary: Destroy pool
      operationId: removeNodesCephPoolByNodeAndName
      parameter:
      - name: name
        in: path
        description: The name of the pool. It must be unique.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
  /nodes/{node}/ceph/pool/{name}/status:
    get:
      tags:
      - nodes
      description: Show the current pool status.
      summary: Show the current pool status.
      operationId: getNodesCephPoolStatusByNodeAndName
      parameter:
      - name: name
        in: path
        description: The name of the pool. It must be unique.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Show the current pool status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesCephPoolStatus'
    summary: status
  /nodes/{node}/ceph/restart:
    post:
      tags:
      - nodes
      description: Restart ceph services.
      summary: Restart ceph services.
      operationId: newNodesCephRestartByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: restart
  /nodes/{node}/ceph/rules:
    get:
      tags:
      - nodes
      description: List ceph rules.
      summary: List ceph rules.
      operationId: getNodesCephRulesByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: List ceph rules.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesCephRules'
    summary: rules
  /nodes/{node}/ceph/start:
    post:
      tags:
      - nodes
      description: Start ceph services.
      summary: Start ceph services.
      operationId: newNodesCephStartByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: start
  /nodes/{node}/ceph/status:
    get:
      tags:
      - nodes
      description: Get ceph status.
      summary: Get ceph status.
      operationId: getNodesCephStatusByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: status
  /nodes/{node}/ceph/stop:
    post:
      tags:
      - nodes
      description: Stop ceph services.
      summary: Stop ceph services.
      operationId: newNodesCephStopByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: stop
  /nodes/{node}/certificates:
    get:
      tags:
      - nodes
      description: Node index.
      summary: Node index.
      operationId: getNodesCertificatesByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Node index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesCertificates'
    summary: certificates
  /nodes/{node}/certificates/acme:
    get:
      tags:
      - nodes
      description: ACME index.
      summary: ACME index.
      operationId: getNodesCertificatesAcmeByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: ACME index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesCertificatesAcme'
    summary: acme
  /nodes/{node}/certificates/acme/certificate:
    summary: certificate
    post:
      tags:
      - nodes
      description: Order a new certificate from ACME-compatible CA.
      summary: Order a new certificate from ACME-compatible CA.
      operationId: newNodesCertificatesAcmeCertificateByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    put:
      tags:
      - nodes
      description: Renew existing certificate from CA.
      summary: Renew existing certificate from CA.
      operationId: setNodesCertificatesAcmeCertificateByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    delete:
      tags:
      - nodes
      description: Revoke existing certificate from CA.
      summary: Revoke existing certificate from CA.
      operationId: removeNodesCertificatesAcmeCertificateByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
  /nodes/{node}/certificates/custom:
    summary: custom
    post:
      tags:
      - nodes
      description: Upload or update custom certificate chain and key.
      summary: Upload or update custom certificate chain and key.
      operationId: newNodesCertificatesCustomByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    delete:
      tags:
      - nodes
      description: DELETE custom certificate chain and key.
      summary: DELETE custom certificate chain and key.
      operationId: removeNodesCertificatesCustomByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: ok
  /nodes/{node}/certificates/info:
    get:
      tags:
      - nodes
      description: Get information about node's certificates.
      summary: Get information about node's certificates.
      operationId: getNodesCertificatesInfoByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Get information about node's certificates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesCertificatesInfo'
    summary: info
  /nodes/{node}/config:
    summary: config
    put:
      tags:
      - nodes
      description: Set node configuration options.
      summary: Set node configuration options.
      operationId: setNodesConfigByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: Get node configuration options.
      summary: Get node configuration options.
      operationId: getNodesConfigByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Get node configuration options.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesConfig'
  /nodes/{node}/disks:
    get:
      tags:
      - nodes
      description: Node index.
      summary: Node index.
      operationId: getNodesDisksByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Node index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesDisks'
    summary: disks
  /nodes/{node}/disks/directory:
    summary: directory
    post:
      tags:
      - nodes
      description: Create a Filesystem on an unused disk. Will be mounted under '/mnt/pve/NAME'.
      summary: Create a Filesystem on an unused disk. Will be mounted under '/mnt/pve/NAME'.
      operationId: newNodesDisksDirectoryByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    get:
      tags:
      - nodes
      description: PVE Managed Directory storages.
      summary: PVE Managed Directory storages.
      operationId: getNodesDisksDirectoryByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: PVE Managed Directory storages.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesDisksDirectory'
  /nodes/{node}/disks/directory/{name}:
    delete:
      tags:
      - nodes
      description: Unmounts the storage and removes the mount unit.
      summary: Unmounts the storage and removes the mount unit.
      operationId: removeNodesDisksDirectoryByNodeAndName
      parameter:
      - name: name
        in: path
        description: The storage identifier.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: name
  /nodes/{node}/disks/initgpt:
    post:
      tags:
      - nodes
      description: Initialize Disk with GPT
      summary: Initialize Disk with GPT
      operationId: newNodesDisksInitgptByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: initgpt
  /nodes/{node}/disks/list:
    get:
      tags:
      - nodes
      description: List local disks.
      summary: List local disks.
      operationId: getNodesDisksListByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: List local disks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesDisksList'
    summary: list
  /nodes/{node}/disks/lvm:
    summary: lvm
    post:
      tags:
      - nodes
      description: Create an LVM Volume Group
      summary: Create an LVM Volume Group
      operationId: newNodesDisksLvmByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    get:
      tags:
      - nodes
      description: List LVM Volume Groups
      summary: List LVM Volume Groups
      operationId: getNodesDisksLvmByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: List LVM Volume Groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesDisksLvm'
  /nodes/{node}/disks/lvm/{name}:
    delete:
      tags:
      - nodes
      description: Remove an LVM Volume Group.
      summary: Remove an LVM Volume Group.
      operationId: removeNodesDisksLvmByNodeAndName
      parameter:
      - name: name
        in: path
        description: The storage identifier.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: name
  /nodes/{node}/disks/lvmthin:
    summary: lvmthin
    post:
      tags:
      - nodes
      description: Create an LVM thinpool
      summary: Create an LVM thinpool
      operationId: newNodesDisksLvmthinByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    get:
      tags:
      - nodes
      description: List LVM thinpools
      summary: List LVM thinpools
      operationId: getNodesDisksLvmthinByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: List LVM thinpools
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesDisksLvmthin'
  /nodes/{node}/disks/lvmthin/{name}:
    delete:
      tags:
      - nodes
      description: Remove an LVM thin pool.
      summary: Remove an LVM thin pool.
      operationId: removeNodesDisksLvmthinByNodeAndName
      parameter:
      - name: name
        in: path
        description: The storage identifier.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: name
  /nodes/{node}/disks/smart:
    get:
      tags:
      - nodes
      description: Get SMART Health of a disk.
      summary: Get SMART Health of a disk.
      operationId: getNodesDisksSmartByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Get SMART Health of a disk.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesDisksSmart'
    summary: smart
  /nodes/{node}/disks/wipedisk:
    put:
      tags:
      - nodes
      description: Wipe a disk or partition.
      summary: Wipe a disk or partition.
      operationId: setNodesDisksWipediskByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: wipedisk
  /nodes/{node}/disks/zfs:
    summary: zfs
    post:
      tags:
      - nodes
      description: Create a ZFS pool.
      summary: Create a ZFS pool.
      operationId: newNodesDisksZfsByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    get:
      tags:
      - nodes
      description: List Zpools.
      summary: List Zpools.
      operationId: getNodesDisksZfsByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: List Zpools.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesDisksZfs'
  /nodes/{node}/disks/zfs/{name}:
    summary: name
    get:
      tags:
      - nodes
      description: Get details about a zpool.
      summary: Get details about a zpool.
      operationId: getNodesDisksZfsByNodeAndName
      parameter:
      - name: name
        in: path
        description: The storage identifier.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Get details about a zpool.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesDisksZfs'
    delete:
      tags:
      - nodes
      description: Destroy a ZFS pool.
      summary: Destroy a ZFS pool.
      operationId: removeNodesDisksZfsByNodeAndName
      parameter:
      - name: name
        in: path
        description: The storage identifier.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
  /nodes/{node}/dns:
    summary: dns
    put:
      tags:
      - nodes
      description: Write DNS settings.
      summary: Write DNS settings.
      operationId: setNodesDnsByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: Read DNS settings.
      summary: Read DNS settings.
      operationId: getNodesDnsByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Read DNS settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesDns'
  /nodes/{node}/execute:
    post:
      tags:
      - nodes
      description: Execute multiple commands in order, root only.
      summary: Execute multiple commands in order, root only.
      operationId: newNodesExecuteByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: execute
  /nodes/{node}/firewall:
    get:
      tags:
      - nodes
      description: Directory index.
      summary: Directory index.
      operationId: getNodesFirewallByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Directory index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesFirewall'
    summary: firewall
  /nodes/{node}/firewall/log:
    get:
      tags:
      - nodes
      description: Read firewall log
      summary: Read firewall log
      operationId: getNodesFirewallLogByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Read firewall log
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesFirewallLog'
    summary: log
  /nodes/{node}/firewall/options:
    summary: options
    put:
      tags:
      - nodes
      description: Set Firewall options.
      summary: Set Firewall options.
      operationId: setNodesFirewallOptionsByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: Get host firewall options.
      summary: Get host firewall options.
      operationId: getNodesFirewallOptionsByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Get host firewall options.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesFirewallOptions'
  /nodes/{node}/firewall/rules:
    summary: rules
    post:
      tags:
      - nodes
      description: Create new rule.
      summary: Create new rule.
      operationId: newNodesFirewallRulesByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: List rules.
      summary: List rules.
      operationId: getNodesFirewallRulesByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: List rules.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesFirewallRules'
  /nodes/{node}/firewall/rules/{pos}:
    summary: pos
    put:
      tags:
      - nodes
      description: Modify rule data.
      summary: Modify rule data.
      operationId: setNodesFirewallRulesByNodeAndPos
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: pos
        in: path
        description: Update rule at position <pos>.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: Get single rule data.
      summary: Get single rule data.
      operationId: getNodesFirewallRulesByNodeAndPos
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: pos
        in: path
        description: Update rule at position <pos>.
        required: true
      responses:
        "200":
          description: Get single rule data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesFirewallRules'
    delete:
      tags:
      - nodes
      description: Delete rule.
      summary: Delete rule.
      operationId: removeNodesFirewallRulesByNodeAndPos
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: pos
        in: path
        description: Update rule at position <pos>.
        required: true
      responses:
        "200":
          description: ok
  /nodes/{node}/hardware:
    get:
      tags:
      - nodes
      description: Index of hardware types
      summary: Index of hardware types
      operationId: getNodesHardwareByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Index of hardware types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesHardware'
    summary: hardware
  /nodes/{node}/hardware/pci:
    get:
      tags:
      - nodes
      description: List local PCI devices.
      summary: List local PCI devices.
      operationId: getNodesHardwarePciByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: List local PCI devices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesHardwarePci'
    summary: pci
  /nodes/{node}/hardware/pci/{pci-id-or-mapping}:
    get:
      tags:
      - nodes
      description: Index of available pci methods
      summary: Index of available pci methods
      operationId: getNodesHardwarePciByNodeAndPciidormapping
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: pci-id-or-mapping
        in: path
        description: 
        required: true
      responses:
        "200":
          description: Index of available pci methods
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesHardwarePci-AV'
    summary: pci-id-or-mapping
  /nodes/{node}/hardware/pci/{pci-id-or-mapping}/mdev:
    get:
      tags:
      - nodes
      description: List mediated device types for given PCI device.
      summary: List mediated device types for given PCI device.
      operationId: getNodesHardwarePciMdevByNodeAndPciidormapping
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: pci-id-or-mapping
        in: path
        description: The PCI ID or mapping to list the mdev types for.
        required: true
      responses:
        "200":
          description: List mediated device types for given PCI device.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesHardwarePciMdev'
    summary: mdev
  /nodes/{node}/hardware/usb:
    get:
      tags:
      - nodes
      description: List local USB devices.
      summary: List local USB devices.
      operationId: getNodesHardwareUsbByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: List local USB devices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesHardwareUsb'
    summary: usb
  /nodes/{node}/hosts:
    summary: hosts
    post:
      tags:
      - nodes
      description: Write /etc/hosts.
      summary: Write /etc/hosts.
      operationId: newNodesHostsByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: Get the content of /etc/hosts.
      summary: Get the content of /etc/hosts.
      operationId: getNodesHostsByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Get the content of /etc/hosts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesHosts'
  /nodes/{node}/journal:
    get:
      tags:
      - nodes
      description: Read Journal
      summary: Read Journal
      operationId: getNodesJournalByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: journal
  /nodes/{node}/lxc:
    summary: lxc
    post:
      tags:
      - nodes
      description: Create or restore a container.
      summary: Create or restore a container.
      operationId: newNodesLxcByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    get:
      tags:
      - nodes
      description: LXC container index (per node).
      summary: LXC container index (per node).
      operationId: getNodesLxcByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: LXC container index (per node).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesLxc'
  /nodes/{node}/lxc/{vmid}:
    summary: vmid
    get:
      tags:
      - nodes
      description: Directory index
      summary: Directory index
      operationId: getNodesLxcByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    delete:
      tags:
      - nodes
      description: Destroy the container (also delete all uses files).
      summary: Destroy the container (also delete all uses files).
      operationId: removeNodesLxcByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
  /nodes/{node}/lxc/{vmid}/clone:
    post:
      tags:
      - nodes
      description: Create a container clone/copy
      summary: Create a container clone/copy
      operationId: newNodesLxcCloneByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: clone
  /nodes/{node}/lxc/{vmid}/config:
    summary: config
    put:
      tags:
      - nodes
      description: Set container options.
      summary: Set container options.
      operationId: setNodesLxcConfigByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: Get container configuration.
      summary: Get container configuration.
      operationId: getNodesLxcConfigByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Get container configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesLxcConfig'
  /nodes/{node}/lxc/{vmid}/feature:
    get:
      tags:
      - nodes
      description: Check if feature for virtual machine is available.
      summary: Check if feature for virtual machine is available.
      operationId: getNodesLxcFeatureByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Check if feature for virtual machine is available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesLxcFeature'
    summary: feature
  /nodes/{node}/lxc/{vmid}/firewall:
    get:
      tags:
      - nodes
      description: Directory index.
      summary: Directory index.
      operationId: getNodesLxcFirewallByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Directory index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesLxcFirewall'
    summary: firewall
  /nodes/{node}/lxc/{vmid}/firewall/aliases:
    summary: aliases
    post:
      tags:
      - nodes
      description: Create IP or Network Alias.
      summary: Create IP or Network Alias.
      operationId: newNodesLxcFirewallAliasesByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: List aliases
      summary: List aliases
      operationId: getNodesLxcFirewallAliasesByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: List aliases
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesLxcFirewallAliases'
  /nodes/{node}/lxc/{vmid}/firewall/aliases/{name}:
    summary: name
    put:
      tags:
      - nodes
      description: Update IP or Network alias.
      summary: Update IP or Network alias.
      operationId: setNodesLxcFirewallAliasesByNodeAndVmidAndName
      parameter:
      - name: name
        in: path
        description: Alias name.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: Read alias.
      summary: Read alias.
      operationId: getNodesLxcFirewallAliasesByNodeAndVmidAndName
      parameter:
      - name: name
        in: path
        description: Alias name.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    delete:
      tags:
      - nodes
      description: Remove IP or Network alias.
      summary: Remove IP or Network alias.
      operationId: removeNodesLxcFirewallAliasesByNodeAndVmidAndName
      parameter:
      - name: name
        in: path
        description: Alias name.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
  /nodes/{node}/lxc/{vmid}/firewall/ipset:
    summary: ipset
    post:
      tags:
      - nodes
      description: Create new IPSet
      summary: Create new IPSet
      operationId: newNodesLxcFirewallIpsetByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: List IPSets
      summary: List IPSets
      operationId: getNodesLxcFirewallIpsetByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: List IPSets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesLxcFirewallIpset'
  /nodes/{node}/lxc/{vmid}/firewall/ipset/{name}:
    summary: name
    post:
      tags:
      - nodes
      description: Add IP or Network to IPSet.
      summary: Add IP or Network to IPSet.
      operationId: newNodesLxcFirewallIpsetByNodeAndVmidAndName
      parameter:
      - name: name
        in: path
        description: IP set name.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: List IPSet content
      summary: List IPSet content
      operationId: getNodesLxcFirewallIpsetByNodeAndVmidAndName
      parameter:
      - name: name
        in: path
        description: IP set name.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: List IPSet content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesLxcFirewallIpset-AV'
    delete:
      tags:
      - nodes
      description: Delete IPSet
      summary: Delete IPSet
      operationId: removeNodesLxcFirewallIpsetByNodeAndVmidAndName
      parameter:
      - name: name
        in: path
        description: IP set name.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
  /nodes/{node}/lxc/{vmid}/firewall/ipset/{name}/{cidr}:
    summary: cidr
    put:
      tags:
      - nodes
      description: Update IP or Network settings
      summary: Update IP or Network settings
      operationId: setNodesLxcFirewallIpsetByNodeAndVmidAndNameAndCidr
      parameter:
      - name: cidr
        in: path
        description: Network/IP specification in CIDR format.
        required: true
      - name: name
        in: path
        description: IP set name.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: Read IP or Network settings from IPSet.
      summary: Read IP or Network settings from IPSet.
      operationId: getNodesLxcFirewallIpsetByNodeAndVmidAndNameAndCidr
      parameter:
      - name: cidr
        in: path
        description: Network/IP specification in CIDR format.
        required: true
      - name: name
        in: path
        description: IP set name.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    delete:
      tags:
      - nodes
      description: Remove IP or Network from IPSet.
      summary: Remove IP or Network from IPSet.
      operationId: removeNodesLxcFirewallIpsetByNodeAndVmidAndNameAndCidr
      parameter:
      - name: cidr
        in: path
        description: Network/IP specification in CIDR format.
        required: true
      - name: name
        in: path
        description: IP set name.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
  /nodes/{node}/lxc/{vmid}/firewall/log:
    get:
      tags:
      - nodes
      description: Read firewall log
      summary: Read firewall log
      operationId: getNodesLxcFirewallLogByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Read firewall log
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesLxcFirewallLog'
    summary: log
  /nodes/{node}/lxc/{vmid}/firewall/options:
    summary: options
    put:
      tags:
      - nodes
      description: Set Firewall options.
      summary: Set Firewall options.
      operationId: setNodesLxcFirewallOptionsByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: Get VM firewall options.
      summary: Get VM firewall options.
      operationId: getNodesLxcFirewallOptionsByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Get VM firewall options.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesLxcFirewallOptions'
  /nodes/{node}/lxc/{vmid}/firewall/refs:
    get:
      tags:
      - nodes
      description: Lists possible IPSet/Alias reference which are allowed in source/dest properties.
      summary: Lists possible IPSet/Alias reference which are allowed in source/dest properties.
      operationId: getNodesLxcFirewallRefsByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Lists possible IPSet/Alias reference which are allowed in source/dest properties.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesLxcFirewallRefs'
    summary: refs
  /nodes/{node}/lxc/{vmid}/firewall/rules:
    summary: rules
    post:
      tags:
      - nodes
      description: Create new rule.
      summary: Create new rule.
      operationId: newNodesLxcFirewallRulesByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: List rules.
      summary: List rules.
      operationId: getNodesLxcFirewallRulesByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: List rules.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesLxcFirewallRules'
  /nodes/{node}/lxc/{vmid}/firewall/rules/{pos}:
    summary: pos
    put:
      tags:
      - nodes
      description: Modify rule data.
      summary: Modify rule data.
      operationId: setNodesLxcFirewallRulesByNodeAndVmidAndPos
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: pos
        in: path
        description: Update rule at position <pos>.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: Get single rule data.
      summary: Get single rule data.
      operationId: getNodesLxcFirewallRulesByNodeAndVmidAndPos
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: pos
        in: path
        description: Update rule at position <pos>.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Get single rule data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesLxcFirewallRules'
    delete:
      tags:
      - nodes
      description: Delete rule.
      summary: Delete rule.
      operationId: removeNodesLxcFirewallRulesByNodeAndVmidAndPos
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: pos
        in: path
        description: Update rule at position <pos>.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
  /nodes/{node}/lxc/{vmid}/interfaces:
    get:
      tags:
      - nodes
      description: Get IP addresses of the specified container interface.
      summary: Get IP addresses of the specified container interface.
      operationId: getNodesLxcInterfacesByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Get IP addresses of the specified container interface.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesLxcInterfaces'
    summary: interfaces
  /nodes/{node}/lxc/{vmid}/migrate:
    post:
      tags:
      - nodes
      description: Migrate the container to another node. Creates a new migration task.
      summary: Migrate the container to another node. Creates a new migration task.
      operationId: newNodesLxcMigrateByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: migrate
  /nodes/{node}/lxc/{vmid}/move_volume:
    post:
      tags:
      - nodes
      description: Move a rootfs-/mp-volume to a different storage or to a different container.
      summary: Move a rootfs-/mp-volume to a different storage or to a different container.
      operationId: newNodesLxcMovevolumeByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: movevolume
  /nodes/{node}/lxc/{vmid}/mtunnel:
    post:
      tags:
      - nodes
      description: Migration tunnel endpoint - only for internal use by CT migration.
      summary: Migration tunnel endpoint - only for internal use by CT migration.
      operationId: newNodesLxcMtunnelByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: mtunnel
  /nodes/{node}/lxc/{vmid}/mtunnelwebsocket:
    get:
      tags:
      - nodes
      description: Migration tunnel endpoint for websocket upgrade - only for internal use by VM migration.
      summary: Migration tunnel endpoint for websocket upgrade - only for internal use by VM migration.
      operationId: getNodesLxcMtunnelwebsocketByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Migration tunnel endpoint for websocket upgrade - only for internal use by VM migration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesLxcMtunnelwebsocket'
    summary: mtunnelwebsocket
  /nodes/{node}/lxc/{vmid}/pending:
    get:
      tags:
      - nodes
      description: Get container configuration, including pending changes.
      summary: Get container configuration, including pending changes.
      operationId: getNodesLxcPendingByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Get container configuration, including pending changes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesLxcPending'
    summary: pending
  /nodes/{node}/lxc/{vmid}/remote_migrate:
    post:
      tags:
      - nodes
      description: Migrate the container to another cluster. Creates a new migration task. EXPERIMENTAL feature!
      summary: Migrate the container to another cluster. Creates a new migration task. EXPERIMENTAL feature!
      operationId: newNodesLxcRemotemigrateByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: remotemigrate
  /nodes/{node}/lxc/{vmid}/resize:
    put:
      tags:
      - nodes
      description: Resize a container mount point.
      summary: Resize a container mount point.
      operationId: setNodesLxcResizeByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: resize
  /nodes/{node}/lxc/{vmid}/rrd:
    get:
      tags:
      - nodes
      description: Read VM RRD statistics (returns PNG)
      summary: Read VM RRD statistics (returns PNG)
      operationId: getNodesLxcRrdByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Read VM RRD statistics (returns PNG)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesLxcRrd'
    summary: rrd
  /nodes/{node}/lxc/{vmid}/rrddata:
    get:
      tags:
      - nodes
      description: Read VM RRD statistics
      summary: Read VM RRD statistics
      operationId: getNodesLxcRrddataByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Read VM RRD statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesLxcRrddata'
    summary: rrddata
  /nodes/{node}/lxc/{vmid}/snapshot:
    summary: snapshot
    post:
      tags:
      - nodes
      description: Snapshot a container.
      summary: Snapshot a container.
      operationId: newNodesLxcSnapshotByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    get:
      tags:
      - nodes
      description: List all snapshots.
      summary: List all snapshots.
      operationId: getNodesLxcSnapshotByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: List all snapshots.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesLxcSnapshot'
  /nodes/{node}/lxc/{vmid}/snapshot/{snapname}:
    summary: snapname
    get:
      tags:
      - nodes
      description: ""
      summary: ""
      operationId: getNodesLxcSnapshotByNodeAndVmidAndSnapname
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: snapname
        in: path
        description: The name of the snapshot.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesLxcSnapshot-AV'
    delete:
      tags:
      - nodes
      description: Delete a LXC snapshot.
      summary: Delete a LXC snapshot.
      operationId: removeNodesLxcSnapshotByNodeAndVmidAndSnapname
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: snapname
        in: path
        description: The name of the snapshot.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
  /nodes/{node}/lxc/{vmid}/snapshot/{snapname}/config:
    summary: config
    put:
      tags:
      - nodes
      description: Update snapshot metadata.
      summary: Update snapshot metadata.
      operationId: setNodesLxcSnapshotConfigByNodeAndVmidAndSnapname
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: snapname
        in: path
        description: The name of the snapshot.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: Get snapshot configuration
      summary: Get snapshot configuration
      operationId: getNodesLxcSnapshotConfigByNodeAndVmidAndSnapname
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: snapname
        in: path
        description: The name of the snapshot.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
  /nodes/{node}/lxc/{vmid}/snapshot/{snapname}/rollback:
    post:
      tags:
      - nodes
      description: Rollback LXC state to specified snapshot.
      summary: Rollback LXC state to specified snapshot.
      operationId: newNodesLxcSnapshotRollbackByNodeAndVmidAndSnapname
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: snapname
        in: path
        description: The name of the snapshot.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: rollback
  /nodes/{node}/lxc/{vmid}/spiceproxy:
    post:
      tags:
      - nodes
      description: Returns a SPICE configuration to connect to the CT.
      summary: Returns a SPICE configuration to connect to the CT.
      operationId: newNodesLxcSpiceproxyByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: spiceproxy
  /nodes/{node}/lxc/{vmid}/status:
    get:
      tags:
      - nodes
      description: Directory index
      summary: Directory index
      operationId: getNodesLxcStatusByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: status
  /nodes/{node}/lxc/{vmid}/status/current:
    get:
      tags:
      - nodes
      description: Get virtual machine status.
      summary: Get virtual machine status.
      operationId: getNodesLxcStatusCurrentByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Get virtual machine status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesLxcStatusCurrent'
    summary: current
  /nodes/{node}/lxc/{vmid}/status/reboot:
    post:
      tags:
      - nodes
      description: Reboot the container by shutting it down, and starting it again. Applies pending changes.
      summary: Reboot the container by shutting it down, and starting it again. Applies pending changes.
      operationId: newNodesLxcStatusRebootByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: reboot
  /nodes/{node}/lxc/{vmid}/status/resume:
    post:
      tags:
      - nodes
      description: Resume the container.
      summary: Resume the container.
      operationId: newNodesLxcStatusResumeByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: resume
  /nodes/{node}/lxc/{vmid}/status/shutdown:
    post:
      tags:
      - nodes
      description: Shutdown the container. This will trigger a clean shutdown of the container, see lxc-stop(1) for details.
      summary: Shutdown the container. This will trigger a clean shutdown of the container, see lxc-stop(1) for details.
      operationId: newNodesLxcStatusShutdownByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: shutdown
  /nodes/{node}/lxc/{vmid}/status/start:
    post:
      tags:
      - nodes
      description: Start the container.
      summary: Start the container.
      operationId: newNodesLxcStatusStartByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: start
  /nodes/{node}/lxc/{vmid}/status/stop:
    post:
      tags:
      - nodes
      description: Stop the container. This will abruptly stop all processes running in the container.
      summary: Stop the container. This will abruptly stop all processes running in the container.
      operationId: newNodesLxcStatusStopByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: stop
  /nodes/{node}/lxc/{vmid}/status/suspend:
    post:
      tags:
      - nodes
      description: Suspend the container. This is experimental.
      summary: Suspend the container. This is experimental.
      operationId: newNodesLxcStatusSuspendByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: suspend
  /nodes/{node}/lxc/{vmid}/template:
    post:
      tags:
      - nodes
      description: Create a Template.
      summary: Create a Template.
      operationId: newNodesLxcTemplateByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
    summary: template
  /nodes/{node}/lxc/{vmid}/termproxy:
    post:
      tags:
      - nodes
      description: Creates a TCP proxy connection.
      summary: Creates a TCP proxy connection.
      operationId: newNodesLxcTermproxyByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: termproxy
  /nodes/{node}/lxc/{vmid}/vncproxy:
    post:
      tags:
      - nodes
      description: Creates a TCP VNC proxy connections.
      summary: Creates a TCP VNC proxy connections.
      operationId: newNodesLxcVncproxyByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: vncproxy
  /nodes/{node}/lxc/{vmid}/vncwebsocket:
    get:
      tags:
      - nodes
      description: Opens a weksocket for VNC traffic.
      summary: Opens a weksocket for VNC traffic.
      operationId: getNodesLxcVncwebsocketByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Opens a weksocket for VNC traffic.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesLxcVncwebsocket'
    summary: vncwebsocket
  /nodes/{node}/migrateall:
    post:
      tags:
      - nodes
      description: Migrate all VMs and Containers.
      summary: Migrate all VMs and Containers.
      operationId: newNodesMigrateallByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: migrateall
  /nodes/{node}/netstat:
    get:
      tags:
      - nodes
      description: Read tap/vm network device interface counters
      summary: Read tap/vm network device interface counters
      operationId: getNodesNetstatByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Read tap/vm network device interface counters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesNetstat'
    summary: netstat
  /nodes/{node}/network:
    summary: network
    post:
      tags:
      - nodes
      description: Create network device configuration
      summary: Create network device configuration
      operationId: newNodesNetworkByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: ok
    put:
      tags:
      - nodes
      description: Reload network configuration
      summary: Reload network configuration
      operationId: setNodesNetworkByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    get:
      tags:
      - nodes
      description: List available networks
      summary: List available networks
      operationId: getNodesNetworkByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: List available networks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesNetwork'
    delete:
      tags:
      - nodes
      description: Revert network configuration changes.
      summary: Revert network configuration changes.
      operationId: removeNodesNetworkByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: ok
  /nodes/{node}/network/{iface}:
    summary: iface
    put:
      tags:
      - nodes
      description: Update network device configuration
      summary: Update network device configuration
      operationId: setNodesNetworkByNodeAndIface
      parameter:
      - name: iface
        in: path
        description: Network interface name.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: Read network device configuration
      summary: Read network device configuration
      operationId: getNodesNetworkByNodeAndIface
      parameter:
      - name: iface
        in: path
        description: Network interface name.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Read network device configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesNetwork'
    delete:
      tags:
      - nodes
      description: Delete network device configuration
      summary: Delete network device configuration
      operationId: removeNodesNetworkByNodeAndIface
      parameter:
      - name: iface
        in: path
        description: Network interface name.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: ok
  /nodes/{node}/qemu:
    summary: qemu
    post:
      tags:
      - nodes
      description: Create or restore a virtual machine.
      summary: Create or restore a virtual machine.
      operationId: newNodesQemuByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    get:
      tags:
      - nodes
      description: Virtual machine index (per node).
      summary: Virtual machine index (per node).
      operationId: getNodesQemuByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Virtual machine index (per node).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQemu'
  /nodes/{node}/qemu/{vmid}:
    summary: vmid
    get:
      tags:
      - nodes
      description: Directory index
      summary: Directory index
      operationId: getNodesQemuByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    delete:
      tags:
      - nodes
      description: Destroy the VM and  all used/owned volumes. Removes any VM specific permissions and firewall rules
      summary: Destroy the VM and  all used/owned volumes. Removes any VM specific permissions and firewall rules
      operationId: removeNodesQemuByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
  /nodes/{node}/qemu/{vmid}/agent:
    summary: agent
    post:
      tags:
      - nodes
      description: Execute QEMU Guest Agent commands.
      summary: Execute QEMU Guest Agent commands.
      operationId: newNodesQemuAgentByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    get:
      tags:
      - nodes
      description: QEMU Guest Agent command index.
      summary: QEMU Guest Agent command index.
      operationId: getNodesQemuAgentByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: QEMU Guest Agent command index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQemuAgent'
  /nodes/{node}/qemu/{vmid}/agent/exec:
    post:
      tags:
      - nodes
      description: Executes the given command in the vm via the guest-agent and returns an object with the pid.
      summary: Executes the given command in the vm via the guest-agent and returns an object with the pid.
      operationId: newNodesQemuAgentExecByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: exec
  /nodes/{node}/qemu/{vmid}/agent/exec-status:
    get:
      tags:
      - nodes
      description: Gets the status of the given pid started by the guest-agent
      summary: Gets the status of the given pid started by the guest-agent
      operationId: getNodesQemuAgentExecstatusByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Gets the status of the given pid started by the guest-agent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQemuAgentExecstatus'
    summary: exec-status
  /nodes/{node}/qemu/{vmid}/agent/file-read:
    get:
      tags:
      - nodes
      description: Reads the given file via guest agent. Is limited to 16777216 bytes.
      summary: Reads the given file via guest agent. Is limited to 16777216 bytes.
      operationId: getNodesQemuAgentFilereadByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Reads the given file via guest agent. Is limited to 16777216 bytes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQemuAgentFileread'
    summary: file-read
  /nodes/{node}/qemu/{vmid}/agent/file-write:
    post:
      tags:
      - nodes
      description: Writes the given file via guest agent.
      summary: Writes the given file via guest agent.
      operationId: newNodesQemuAgentFilewriteByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
    summary: file-write
  /nodes/{node}/qemu/{vmid}/agent/fsfreeze-freeze:
    post:
      tags:
      - nodes
      description: Execute fsfreeze-freeze.
      summary: Execute fsfreeze-freeze.
      operationId: newNodesQemuAgentFsfreezefreezeByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: fsfreeze-freeze
  /nodes/{node}/qemu/{vmid}/agent/fsfreeze-status:
    post:
      tags:
      - nodes
      description: Execute fsfreeze-status.
      summary: Execute fsfreeze-status.
      operationId: newNodesQemuAgentFsfreezestatusByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: fsfreeze-status
  /nodes/{node}/qemu/{vmid}/agent/fsfreeze-thaw:
    post:
      tags:
      - nodes
      description: Execute fsfreeze-thaw.
      summary: Execute fsfreeze-thaw.
      operationId: newNodesQemuAgentFsfreezethawByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: fsfreeze-thaw
  /nodes/{node}/qemu/{vmid}/agent/fstrim:
    post:
      tags:
      - nodes
      description: Execute fstrim.
      summary: Execute fstrim.
      operationId: newNodesQemuAgentFstrimByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: fstrim
  /nodes/{node}/qemu/{vmid}/agent/get-fsinfo:
    get:
      tags:
      - nodes
      description: Execute get-fsinfo.
      summary: Execute get-fsinfo.
      operationId: getNodesQemuAgentGetfsinfoByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: get-fsinfo
  /nodes/{node}/qemu/{vmid}/agent/get-host-name:
    get:
      tags:
      - nodes
      description: Execute get-host-name.
      summary: Execute get-host-name.
      operationId: getNodesQemuAgentGethostnameByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: get-host-name
  /nodes/{node}/qemu/{vmid}/agent/get-memory-block-info:
    get:
      tags:
      - nodes
      description: Execute get-memory-block-info.
      summary: Execute get-memory-block-info.
      operationId: getNodesQemuAgentGetmemoryblockinfoByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: get-memory-block-info
  /nodes/{node}/qemu/{vmid}/agent/get-memory-blocks:
    get:
      tags:
      - nodes
      description: Execute get-memory-blocks.
      summary: Execute get-memory-blocks.
      operationId: getNodesQemuAgentGetmemoryblocksByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: get-memory-blocks
  /nodes/{node}/qemu/{vmid}/agent/get-osinfo:
    get:
      tags:
      - nodes
      description: Execute get-osinfo.
      summary: Execute get-osinfo.
      operationId: getNodesQemuAgentGetosinfoByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: get-osinfo
  /nodes/{node}/qemu/{vmid}/agent/get-time:
    get:
      tags:
      - nodes
      description: Execute get-time.
      summary: Execute get-time.
      operationId: getNodesQemuAgentGettimeByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: get-time
  /nodes/{node}/qemu/{vmid}/agent/get-timezone:
    get:
      tags:
      - nodes
      description: Execute get-timezone.
      summary: Execute get-timezone.
      operationId: getNodesQemuAgentGettimezoneByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: get-timezone
  /nodes/{node}/qemu/{vmid}/agent/get-users:
    get:
      tags:
      - nodes
      description: Execute get-users.
      summary: Execute get-users.
      operationId: getNodesQemuAgentGetusersByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: get-users
  /nodes/{node}/qemu/{vmid}/agent/get-vcpus:
    get:
      tags:
      - nodes
      description: Execute get-vcpus.
      summary: Execute get-vcpus.
      operationId: getNodesQemuAgentGetvcpusByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: get-vcpus
  /nodes/{node}/qemu/{vmid}/agent/info:
    get:
      tags:
      - nodes
      description: Execute info.
      summary: Execute info.
      operationId: getNodesQemuAgentInfoByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: info
  /nodes/{node}/qemu/{vmid}/agent/network-get-interfaces:
    get:
      tags:
      - nodes
      description: Execute network-get-interfaces.
      summary: Execute network-get-interfaces.
      operationId: getNodesQemuAgentNetworkgetinterfacesByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: network-get-interfaces
  /nodes/{node}/qemu/{vmid}/agent/ping:
    post:
      tags:
      - nodes
      description: Execute ping.
      summary: Execute ping.
      operationId: newNodesQemuAgentPingByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: ping
  /nodes/{node}/qemu/{vmid}/agent/set-user-password:
    post:
      tags:
      - nodes
      description: Sets the password for the given user to the given password
      summary: Sets the password for the given user to the given password
      operationId: newNodesQemuAgentSetuserpasswordByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: set-user-password
  /nodes/{node}/qemu/{vmid}/agent/shutdown:
    post:
      tags:
      - nodes
      description: Execute shutdown.
      summary: Execute shutdown.
      operationId: newNodesQemuAgentShutdownByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: shutdown
  /nodes/{node}/qemu/{vmid}/agent/suspend-disk:
    post:
      tags:
      - nodes
      description: Execute suspend-disk.
      summary: Execute suspend-disk.
      operationId: newNodesQemuAgentSuspenddiskByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: suspend-disk
  /nodes/{node}/qemu/{vmid}/agent/suspend-hybrid:
    post:
      tags:
      - nodes
      description: Execute suspend-hybrid.
      summary: Execute suspend-hybrid.
      operationId: newNodesQemuAgentSuspendhybridByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: suspend-hybrid
  /nodes/{node}/qemu/{vmid}/agent/suspend-ram:
    post:
      tags:
      - nodes
      description: Execute suspend-ram.
      summary: Execute suspend-ram.
      operationId: newNodesQemuAgentSuspendramByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: suspend-ram
  /nodes/{node}/qemu/{vmid}/clone:
    post:
      tags:
      - nodes
      description: Create a copy of virtual machine/template.
      summary: Create a copy of virtual machine/template.
      operationId: newNodesQemuCloneByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: clone
  /nodes/{node}/qemu/{vmid}/cloudinit:
    summary: cloudinit
    put:
      tags:
      - nodes
      description: Regenerate and change cloudinit config drive.
      summary: Regenerate and change cloudinit config drive.
      operationId: setNodesQemuCloudinitByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: Get the cloudinit configuration with both current and pending values.
      summary: Get the cloudinit configuration with both current and pending values.
      operationId: getNodesQemuCloudinitByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Get the cloudinit configuration with both current and pending values.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQemuCloudinit'
  /nodes/{node}/qemu/{vmid}/cloudinit/dump:
    get:
      tags:
      - nodes
      description: Get automatically generated cloudinit config.
      summary: Get automatically generated cloudinit config.
      operationId: getNodesQemuCloudinitDumpByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: dump
  /nodes/{node}/qemu/{vmid}/config:
    summary: config
    post:
      tags:
      - nodes
      description: Set virtual machine options (asynchronous API).
      summary: Set virtual machine options (asynchronous API).
      operationId: newNodesQemuConfigByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    put:
      tags:
      - nodes
      description: Set virtual machine options (synchronous API) - You should consider using the POST method instead for any actions involving hotplug or storage allocation.
      summary: Set virtual machine options (synchronous API) - You should consider using the POST method instead for any actions involving hotplug or storage allocation.
      operationId: setNodesQemuConfigByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: Get the virtual machine configuration with pending configuration changes applied. Set the 'current' parameter to get the current configuration instead.
      summary: Get the virtual machine configuration with pending configuration changes applied. Set the 'current' parameter to get the current configuration instead.
      operationId: getNodesQemuConfigByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Get the virtual machine configuration with pending configuration changes applied. Set the 'current' parameter to get the current configuration instead.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQemuConfig'
  /nodes/{node}/qemu/{vmid}/feature:
    get:
      tags:
      - nodes
      description: Check if feature for virtual machine is available.
      summary: Check if feature for virtual machine is available.
      operationId: getNodesQemuFeatureByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Check if feature for virtual machine is available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQemuFeature'
    summary: feature
  /nodes/{node}/qemu/{vmid}/firewall:
    get:
      tags:
      - nodes
      description: Directory index.
      summary: Directory index.
      operationId: getNodesQemuFirewallByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Directory index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQemuFirewall'
    summary: firewall
  /nodes/{node}/qemu/{vmid}/firewall/aliases:
    summary: aliases
    post:
      tags:
      - nodes
      description: Create IP or Network Alias.
      summary: Create IP or Network Alias.
      operationId: newNodesQemuFirewallAliasesByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: List aliases
      summary: List aliases
      operationId: getNodesQemuFirewallAliasesByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: List aliases
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQemuFirewallAliases'
  /nodes/{node}/qemu/{vmid}/firewall/aliases/{name}:
    summary: name
    put:
      tags:
      - nodes
      description: Update IP or Network alias.
      summary: Update IP or Network alias.
      operationId: setNodesQemuFirewallAliasesByNodeAndVmidAndName
      parameter:
      - name: name
        in: path
        description: Alias name.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: Read alias.
      summary: Read alias.
      operationId: getNodesQemuFirewallAliasesByNodeAndVmidAndName
      parameter:
      - name: name
        in: path
        description: Alias name.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    delete:
      tags:
      - nodes
      description: Remove IP or Network alias.
      summary: Remove IP or Network alias.
      operationId: removeNodesQemuFirewallAliasesByNodeAndVmidAndName
      parameter:
      - name: name
        in: path
        description: Alias name.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
  /nodes/{node}/qemu/{vmid}/firewall/ipset:
    summary: ipset
    post:
      tags:
      - nodes
      description: Create new IPSet
      summary: Create new IPSet
      operationId: newNodesQemuFirewallIpsetByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: List IPSets
      summary: List IPSets
      operationId: getNodesQemuFirewallIpsetByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: List IPSets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQemuFirewallIpset'
  /nodes/{node}/qemu/{vmid}/firewall/ipset/{name}:
    summary: name
    post:
      tags:
      - nodes
      description: Add IP or Network to IPSet.
      summary: Add IP or Network to IPSet.
      operationId: newNodesQemuFirewallIpsetByNodeAndVmidAndName
      parameter:
      - name: name
        in: path
        description: IP set name.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: List IPSet content
      summary: List IPSet content
      operationId: getNodesQemuFirewallIpsetByNodeAndVmidAndName
      parameter:
      - name: name
        in: path
        description: IP set name.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: List IPSet content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQemuFirewallIpset-AV'
    delete:
      tags:
      - nodes
      description: Delete IPSet
      summary: Delete IPSet
      operationId: removeNodesQemuFirewallIpsetByNodeAndVmidAndName
      parameter:
      - name: name
        in: path
        description: IP set name.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
  /nodes/{node}/qemu/{vmid}/firewall/ipset/{name}/{cidr}:
    summary: cidr
    put:
      tags:
      - nodes
      description: Update IP or Network settings
      summary: Update IP or Network settings
      operationId: setNodesQemuFirewallIpsetByNodeAndVmidAndNameAndCidr
      parameter:
      - name: cidr
        in: path
        description: Network/IP specification in CIDR format.
        required: true
      - name: name
        in: path
        description: IP set name.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: Read IP or Network settings from IPSet.
      summary: Read IP or Network settings from IPSet.
      operationId: getNodesQemuFirewallIpsetByNodeAndVmidAndNameAndCidr
      parameter:
      - name: cidr
        in: path
        description: Network/IP specification in CIDR format.
        required: true
      - name: name
        in: path
        description: IP set name.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    delete:
      tags:
      - nodes
      description: Remove IP or Network from IPSet.
      summary: Remove IP or Network from IPSet.
      operationId: removeNodesQemuFirewallIpsetByNodeAndVmidAndNameAndCidr
      parameter:
      - name: cidr
        in: path
        description: Network/IP specification in CIDR format.
        required: true
      - name: name
        in: path
        description: IP set name.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
  /nodes/{node}/qemu/{vmid}/firewall/log:
    get:
      tags:
      - nodes
      description: Read firewall log
      summary: Read firewall log
      operationId: getNodesQemuFirewallLogByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Read firewall log
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQemuFirewallLog'
    summary: log
  /nodes/{node}/qemu/{vmid}/firewall/options:
    summary: options
    put:
      tags:
      - nodes
      description: Set Firewall options.
      summary: Set Firewall options.
      operationId: setNodesQemuFirewallOptionsByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: Get VM firewall options.
      summary: Get VM firewall options.
      operationId: getNodesQemuFirewallOptionsByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Get VM firewall options.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQemuFirewallOptions'
  /nodes/{node}/qemu/{vmid}/firewall/refs:
    get:
      tags:
      - nodes
      description: Lists possible IPSet/Alias reference which are allowed in source/dest properties.
      summary: Lists possible IPSet/Alias reference which are allowed in source/dest properties.
      operationId: getNodesQemuFirewallRefsByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Lists possible IPSet/Alias reference which are allowed in source/dest properties.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQemuFirewallRefs'
    summary: refs
  /nodes/{node}/qemu/{vmid}/firewall/rules:
    summary: rules
    post:
      tags:
      - nodes
      description: Create new rule.
      summary: Create new rule.
      operationId: newNodesQemuFirewallRulesByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: List rules.
      summary: List rules.
      operationId: getNodesQemuFirewallRulesByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: List rules.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQemuFirewallRules'
  /nodes/{node}/qemu/{vmid}/firewall/rules/{pos}:
    summary: pos
    put:
      tags:
      - nodes
      description: Modify rule data.
      summary: Modify rule data.
      operationId: setNodesQemuFirewallRulesByNodeAndVmidAndPos
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: pos
        in: path
        description: Update rule at position <pos>.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: Get single rule data.
      summary: Get single rule data.
      operationId: getNodesQemuFirewallRulesByNodeAndVmidAndPos
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: pos
        in: path
        description: Update rule at position <pos>.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Get single rule data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQemuFirewallRules'
    delete:
      tags:
      - nodes
      description: Delete rule.
      summary: Delete rule.
      operationId: removeNodesQemuFirewallRulesByNodeAndVmidAndPos
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: pos
        in: path
        description: Update rule at position <pos>.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
  /nodes/{node}/qemu/{vmid}/migrate:
    summary: migrate
    post:
      tags:
      - nodes
      description: Migrate virtual machine. Creates a new migration task.
      summary: Migrate virtual machine. Creates a new migration task.
      operationId: newNodesQemuMigrateByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    get:
      tags:
      - nodes
      description: Get preconditions for migration.
      summary: Get preconditions for migration.
      operationId: getNodesQemuMigrateByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Get preconditions for migration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQemuMigrate'
  /nodes/{node}/qemu/{vmid}/monitor:
    post:
      tags:
      - nodes
      description: Execute QEMU monitor commands.
      summary: Execute QEMU monitor commands.
      operationId: newNodesQemuMonitorByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: monitor
  /nodes/{node}/qemu/{vmid}/move_disk:
    post:
      tags:
      - nodes
      description: Move volume to different storage or to a different VM.
      summary: Move volume to different storage or to a different VM.
      operationId: newNodesQemuMovediskByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: movedisk
  /nodes/{node}/qemu/{vmid}/mtunnel:
    post:
      tags:
      - nodes
      description: Migration tunnel endpoint - only for internal use by VM migration.
      summary: Migration tunnel endpoint - only for internal use by VM migration.
      operationId: newNodesQemuMtunnelByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: mtunnel
  /nodes/{node}/qemu/{vmid}/mtunnelwebsocket:
    get:
      tags:
      - nodes
      description: Migration tunnel endpoint for websocket upgrade - only for internal use by VM migration.
      summary: Migration tunnel endpoint for websocket upgrade - only for internal use by VM migration.
      operationId: getNodesQemuMtunnelwebsocketByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Migration tunnel endpoint for websocket upgrade - only for internal use by VM migration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQemuMtunnelwebsocket'
    summary: mtunnelwebsocket
  /nodes/{node}/qemu/{vmid}/pending:
    get:
      tags:
      - nodes
      description: Get the virtual machine configuration with both current and pending values.
      summary: Get the virtual machine configuration with both current and pending values.
      operationId: getNodesQemuPendingByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Get the virtual machine configuration with both current and pending values.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQemuPending'
    summary: pending
  /nodes/{node}/qemu/{vmid}/remote_migrate:
    post:
      tags:
      - nodes
      description: Migrate virtual machine to a remote cluster. Creates a new migration task. EXPERIMENTAL feature!
      summary: Migrate virtual machine to a remote cluster. Creates a new migration task. EXPERIMENTAL feature!
      operationId: newNodesQemuRemotemigrateByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: remotemigrate
  /nodes/{node}/qemu/{vmid}/resize:
    put:
      tags:
      - nodes
      description: Extend volume size.
      summary: Extend volume size.
      operationId: setNodesQemuResizeByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: resize
  /nodes/{node}/qemu/{vmid}/rrd:
    get:
      tags:
      - nodes
      description: Read VM RRD statistics (returns PNG)
      summary: Read VM RRD statistics (returns PNG)
      operationId: getNodesQemuRrdByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Read VM RRD statistics (returns PNG)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQemuRrd'
    summary: rrd
  /nodes/{node}/qemu/{vmid}/rrddata:
    get:
      tags:
      - nodes
      description: Read VM RRD statistics
      summary: Read VM RRD statistics
      operationId: getNodesQemuRrddataByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Read VM RRD statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQemuRrddata'
    summary: rrddata
  /nodes/{node}/qemu/{vmid}/sendkey:
    put:
      tags:
      - nodes
      description: Send key event to virtual machine.
      summary: Send key event to virtual machine.
      operationId: setNodesQemuSendkeyByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
    summary: sendkey
  /nodes/{node}/qemu/{vmid}/snapshot:
    summary: snapshot
    post:
      tags:
      - nodes
      description: Snapshot a VM.
      summary: Snapshot a VM.
      operationId: newNodesQemuSnapshotByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    get:
      tags:
      - nodes
      description: List all snapshots.
      summary: List all snapshots.
      operationId: getNodesQemuSnapshotByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: List all snapshots.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQemuSnapshot'
  /nodes/{node}/qemu/{vmid}/snapshot/{snapname}:
    summary: snapname
    get:
      tags:
      - nodes
      description: ""
      summary: ""
      operationId: getNodesQemuSnapshotByNodeAndVmidAndSnapname
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: snapname
        in: path
        description: The name of the snapshot.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQemuSnapshot-AV'
    delete:
      tags:
      - nodes
      description: Delete a VM snapshot.
      summary: Delete a VM snapshot.
      operationId: removeNodesQemuSnapshotByNodeAndVmidAndSnapname
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: snapname
        in: path
        description: The name of the snapshot.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
  /nodes/{node}/qemu/{vmid}/snapshot/{snapname}/config:
    summary: config
    put:
      tags:
      - nodes
      description: Update snapshot metadata.
      summary: Update snapshot metadata.
      operationId: setNodesQemuSnapshotConfigByNodeAndVmidAndSnapname
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: snapname
        in: path
        description: The name of the snapshot.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: Get snapshot configuration
      summary: Get snapshot configuration
      operationId: getNodesQemuSnapshotConfigByNodeAndVmidAndSnapname
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: snapname
        in: path
        description: The name of the snapshot.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
  /nodes/{node}/qemu/{vmid}/snapshot/{snapname}/rollback:
    post:
      tags:
      - nodes
      description: Rollback VM state to specified snapshot.
      summary: Rollback VM state to specified snapshot.
      operationId: newNodesQemuSnapshotRollbackByNodeAndVmidAndSnapname
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: snapname
        in: path
        description: The name of the snapshot.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: rollback
  /nodes/{node}/qemu/{vmid}/spiceproxy:
    post:
      tags:
      - nodes
      description: Returns a SPICE configuration to connect to the VM.
      summary: Returns a SPICE configuration to connect to the VM.
      operationId: newNodesQemuSpiceproxyByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: spiceproxy
  /nodes/{node}/qemu/{vmid}/status:
    get:
      tags:
      - nodes
      description: Directory index
      summary: Directory index
      operationId: getNodesQemuStatusByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: status
  /nodes/{node}/qemu/{vmid}/status/current:
    get:
      tags:
      - nodes
      description: Get virtual machine status.
      summary: Get virtual machine status.
      operationId: getNodesQemuStatusCurrentByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Get virtual machine status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQemuStatusCurrent'
    summary: current
  /nodes/{node}/qemu/{vmid}/status/reboot:
    post:
      tags:
      - nodes
      description: Reboot the VM by shutting it down, and starting it again. Applies pending changes.
      summary: Reboot the VM by shutting it down, and starting it again. Applies pending changes.
      operationId: newNodesQemuStatusRebootByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: reboot
  /nodes/{node}/qemu/{vmid}/status/reset:
    post:
      tags:
      - nodes
      description: Reset virtual machine.
      summary: Reset virtual machine.
      operationId: newNodesQemuStatusResetByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: reset
  /nodes/{node}/qemu/{vmid}/status/resume:
    post:
      tags:
      - nodes
      description: Resume virtual machine.
      summary: Resume virtual machine.
      operationId: newNodesQemuStatusResumeByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: resume
  /nodes/{node}/qemu/{vmid}/status/shutdown:
    post:
      tags:
      - nodes
      description: Shutdown virtual machine. This is similar to pressing the power button on a physical machine. This will send an ACPI event for the guest OS, which should then proceed to a clean shutdown.
      summary: Shutdown virtual machine. This is similar to pressing the power button on a physical machine. This will send an ACPI event for the guest OS, which should then proceed to a clean shutdown.
      operationId: newNodesQemuStatusShutdownByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: shutdown
  /nodes/{node}/qemu/{vmid}/status/start:
    post:
      tags:
      - nodes
      description: Start virtual machine.
      summary: Start virtual machine.
      operationId: newNodesQemuStatusStartByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: start
  /nodes/{node}/qemu/{vmid}/status/stop:
    post:
      tags:
      - nodes
      description: Stop virtual machine. The qemu process will exit immediately. This is akin to pulling the power plug of a running computer and may damage the VM data.
      summary: Stop virtual machine. The qemu process will exit immediately. This is akin to pulling the power plug of a running computer and may damage the VM data.
      operationId: newNodesQemuStatusStopByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: stop
  /nodes/{node}/qemu/{vmid}/status/suspend:
    post:
      tags:
      - nodes
      description: Suspend virtual machine.
      summary: Suspend virtual machine.
      operationId: newNodesQemuStatusSuspendByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: suspend
  /nodes/{node}/qemu/{vmid}/template:
    post:
      tags:
      - nodes
      description: Create a Template.
      summary: Create a Template.
      operationId: newNodesQemuTemplateByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: template
  /nodes/{node}/qemu/{vmid}/termproxy:
    post:
      tags:
      - nodes
      description: Creates a TCP proxy connections.
      summary: Creates a TCP proxy connections.
      operationId: newNodesQemuTermproxyByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: termproxy
  /nodes/{node}/qemu/{vmid}/unlink:
    put:
      tags:
      - nodes
      description: Unlink/delete disk images.
      summary: Unlink/delete disk images.
      operationId: setNodesQemuUnlinkByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: ok
    summary: unlink
  /nodes/{node}/qemu/{vmid}/vncproxy:
    post:
      tags:
      - nodes
      description: Creates a TCP VNC proxy connections.
      summary: Creates a TCP VNC proxy connections.
      operationId: newNodesQemuVncproxyByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses: ""
    summary: vncproxy
  /nodes/{node}/qemu/{vmid}/vncwebsocket:
    get:
      tags:
      - nodes
      description: Opens a weksocket for VNC traffic.
      summary: Opens a weksocket for VNC traffic.
      operationId: getNodesQemuVncwebsocketByNodeAndVmid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: vmid
        in: path
        description: The (unique) ID of the VM.
        required: true
      responses:
        "200":
          description: Opens a weksocket for VNC traffic.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQemuVncwebsocket'
    summary: vncwebsocket
  /nodes/{node}/query-url-metadata:
    get:
      tags:
      - nodes
      description: 'Query metadata of an URL: file size, file name and mime type.'
      summary: 'Query metadata of an URL: file size, file name and mime type.'
      operationId: getNodesQueryurlmetadataByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: 'Query metadata of an URL: file size, file name and mime type.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesQueryurlmetadata'
    summary: query-url-metadata
  /nodes/{node}/replication:
    get:
      tags:
      - nodes
      description: List status of all replication jobs on this node.
      summary: List status of all replication jobs on this node.
      operationId: getNodesReplicationByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: List status of all replication jobs on this node.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesReplication'
    summary: replication
  /nodes/{node}/replication/{id}:
    get:
      tags:
      - nodes
      description: Directory index.
      summary: Directory index.
      operationId: getNodesReplicationByNodeAndId
      parameter:
      - name: id
        in: path
        description: Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Directory index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesReplication-AV'
    summary: id
  /nodes/{node}/replication/{id}/log:
    get:
      tags:
      - nodes
      description: Read replication job log.
      summary: Read replication job log.
      operationId: getNodesReplicationLogByNodeAndId
      parameter:
      - name: id
        in: path
        description: Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Read replication job log.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesReplicationLog'
    summary: log
  /nodes/{node}/replication/{id}/schedule_now:
    post:
      tags:
      - nodes
      description: Schedule replication job to start as soon as possible.
      summary: Schedule replication job to start as soon as possible.
      operationId: newNodesReplicationSchedulenowByNodeAndId
      parameter:
      - name: id
        in: path
        description: Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: schedulenow
  /nodes/{node}/replication/{id}/status:
    get:
      tags:
      - nodes
      description: Get replication job status.
      summary: Get replication job status.
      operationId: getNodesReplicationStatusByNodeAndId
      parameter:
      - name: id
        in: path
        description: Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.
        required: true
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: status
  /nodes/{node}/report:
    get:
      tags:
      - nodes
      description: Gather various systems information about a node
      summary: Gather various systems information about a node
      operationId: getNodesReportByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: report
  /nodes/{node}/rrd:
    get:
      tags:
      - nodes
      description: Read node RRD statistics (returns PNG)
      summary: Read node RRD statistics (returns PNG)
      operationId: getNodesRrdByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Read node RRD statistics (returns PNG)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesRrd'
    summary: rrd
  /nodes/{node}/rrddata:
    get:
      tags:
      - nodes
      description: Read node RRD statistics
      summary: Read node RRD statistics
      operationId: getNodesRrddataByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Read node RRD statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesRrddata'
    summary: rrddata
  /nodes/{node}/scan:
    get:
      tags:
      - nodes
      description: Index of available scan methods
      summary: Index of available scan methods
      operationId: getNodesScanByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Index of available scan methods
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesScan'
    summary: scan
  /nodes/{node}/scan/cifs:
    get:
      tags:
      - nodes
      description: Scan remote CIFS server.
      summary: Scan remote CIFS server.
      operationId: getNodesScanCifsByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Scan remote CIFS server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesScanCifs'
    summary: cifs
  /nodes/{node}/scan/glusterfs:
    get:
      tags:
      - nodes
      description: Scan remote GlusterFS server.
      summary: Scan remote GlusterFS server.
      operationId: getNodesScanGlusterfsByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Scan remote GlusterFS server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesScanGlusterfs'
    summary: glusterfs
  /nodes/{node}/scan/iscsi:
    get:
      tags:
      - nodes
      description: Scan remote iSCSI server.
      summary: Scan remote iSCSI server.
      operationId: getNodesScanIscsiByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Scan remote iSCSI server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesScanIscsi'
    summary: iscsi
  /nodes/{node}/scan/lvm:
    get:
      tags:
      - nodes
      description: List local LVM volume groups.
      summary: List local LVM volume groups.
      operationId: getNodesScanLvmByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: List local LVM volume groups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesScanLvm'
    summary: lvm
  /nodes/{node}/scan/lvmthin:
    get:
      tags:
      - nodes
      description: List local LVM Thin Pools.
      summary: List local LVM Thin Pools.
      operationId: getNodesScanLvmthinByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: List local LVM Thin Pools.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesScanLvmthin'
    summary: lvmthin
  /nodes/{node}/scan/nfs:
    get:
      tags:
      - nodes
      description: Scan remote NFS server.
      summary: Scan remote NFS server.
      operationId: getNodesScanNfsByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Scan remote NFS server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesScanNfs'
    summary: nfs
  /nodes/{node}/scan/pbs:
    get:
      tags:
      - nodes
      description: Scan remote Proxmox Backup Server.
      summary: Scan remote Proxmox Backup Server.
      operationId: getNodesScanPbsByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Scan remote Proxmox Backup Server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesScanPbs'
    summary: pbs
  /nodes/{node}/scan/zfs:
    get:
      tags:
      - nodes
      description: Scan zfs pool list on local node.
      summary: Scan zfs pool list on local node.
      operationId: getNodesScanZfsByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Scan zfs pool list on local node.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesScanZfs'
    summary: zfs
  /nodes/{node}/sdn:
    get:
      tags:
      - nodes
      description: SDN index.
      summary: SDN index.
      operationId: getNodesSdnByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: SDN index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesSdn'
    summary: sdn
  /nodes/{node}/sdn/zones:
    get:
      tags:
      - nodes
      description: Get status for all zones.
      summary: Get status for all zones.
      operationId: getNodesSdnZonesByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Get status for all zones.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesSdnZones'
    summary: zones
  /nodes/{node}/sdn/zones/{zone}:
    get:
      tags:
      - nodes
      description: ""
      summary: ""
      operationId: getNodesSdnZonesByNodeAndZone
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: zone
        in: path
        description: The SDN zone object identifier.
        required: true
      responses: ""
    summary: zone
  /nodes/{node}/sdn/zones/{zone}/content:
    get:
      tags:
      - nodes
      description: List zone content.
      summary: List zone content.
      operationId: getNodesSdnZonesContentByNodeAndZone
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: zone
        in: path
        description: The SDN zone object identifier.
        required: true
      responses:
        "200":
          description: List zone content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesSdnZonesContent'
    summary: content
  /nodes/{node}/services:
    get:
      tags:
      - nodes
      description: Service list.
      summary: Service list.
      operationId: getNodesServicesByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Service list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesServices'
    summary: services
  /nodes/{node}/services/{service}:
    get:
      tags:
      - nodes
      description: Directory index
      summary: Directory index
      operationId: getNodesServicesByNodeAndService
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: service
        in: path
        description: Service ID
        required: true
      responses: ""
    summary: service
  /nodes/{node}/services/{service}/reload:
    post:
      tags:
      - nodes
      description: Reload service. Falls back to restart if service cannot be reloaded.
      summary: Reload service. Falls back to restart if service cannot be reloaded.
      operationId: newNodesServicesReloadByNodeAndService
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: service
        in: path
        description: Service ID
        required: true
      responses: ""
    summary: reload
  /nodes/{node}/services/{service}/restart:
    post:
      tags:
      - nodes
      description: Hard restart service. Use reload if you want to reduce interruptions.
      summary: Hard restart service. Use reload if you want to reduce interruptions.
      operationId: newNodesServicesRestartByNodeAndService
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: service
        in: path
        description: Service ID
        required: true
      responses: ""
    summary: restart
  /nodes/{node}/services/{service}/start:
    post:
      tags:
      - nodes
      description: Start service.
      summary: Start service.
      operationId: newNodesServicesStartByNodeAndService
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: service
        in: path
        description: Service ID
        required: true
      responses: ""
    summary: start
  /nodes/{node}/services/{service}/state:
    get:
      tags:
      - nodes
      description: Read service properties
      summary: Read service properties
      operationId: getNodesServicesStateByNodeAndService
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: service
        in: path
        description: Service ID
        required: true
      responses: ""
    summary: state
  /nodes/{node}/services/{service}/stop:
    post:
      tags:
      - nodes
      description: Stop service.
      summary: Stop service.
      operationId: newNodesServicesStopByNodeAndService
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: service
        in: path
        description: Service ID
        required: true
      responses: ""
    summary: stop
  /nodes/{node}/spiceshell:
    post:
      tags:
      - nodes
      description: Creates a SPICE shell.
      summary: Creates a SPICE shell.
      operationId: newNodesSpiceshellByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: spiceshell
  /nodes/{node}/startall:
    post:
      tags:
      - nodes
      description: Start all VMs and containers located on this node (by default only those with onboot=1).
      summary: Start all VMs and containers located on this node (by default only those with onboot=1).
      operationId: newNodesStartallByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: startall
  /nodes/{node}/status:
    summary: status
    post:
      tags:
      - nodes
      description: Reboot or shutdown a node.
      summary: Reboot or shutdown a node.
      operationId: newNodesStatusByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: Read node status
      summary: Read node status
      operationId: getNodesStatusByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Read node status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesStatus'
  /nodes/{node}/stopall:
    post:
      tags:
      - nodes
      description: Stop all VMs and Containers.
      summary: Stop all VMs and Containers.
      operationId: newNodesStopallByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: stopall
  /nodes/{node}/storage:
    get:
      tags:
      - nodes
      description: Get status for all datastores.
      summary: Get status for all datastores.
      operationId: getNodesStorageByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Get status for all datastores.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesStorage'
    summary: storage
  /nodes/{node}/storage/{storage}:
    get:
      tags:
      - nodes
      description: ""
      summary: ""
      operationId: getNodesStorageByNodeAndStorage
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: storage
        in: path
        description: The storage identifier.
        required: true
      responses: ""
    summary: storage
  /nodes/{node}/storage/{storage}/content:
    summary: content
    post:
      tags:
      - nodes
      description: Allocate disk images.
      summary: Allocate disk images.
      operationId: newNodesStorageContentByNodeAndStorage
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: storage
        in: path
        description: The storage identifier.
        required: true
      responses: ""
    get:
      tags:
      - nodes
      description: List storage content.
      summary: List storage content.
      operationId: getNodesStorageContentByNodeAndStorage
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: storage
        in: path
        description: The storage identifier.
        required: true
      responses:
        "200":
          description: List storage content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesStorageContent'
  /nodes/{node}/storage/{storage}/content/{volume}:
    summary: volume
    post:
      tags:
      - nodes
      description: Copy a volume. This is experimental code - do not use.
      summary: Copy a volume. This is experimental code - do not use.
      operationId: newNodesStorageContentByNodeAndStorageAndVolume
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: storage
        in: path
        description: The storage identifier.
        required: true
      - name: volume
        in: path
        description: Source volume identifier
        required: true
      responses: ""
    put:
      tags:
      - nodes
      description: Update volume attributes
      summary: Update volume attributes
      operationId: setNodesStorageContentByNodeAndStorageAndVolume
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: storage
        in: path
        description: The storage identifier.
        required: true
      - name: volume
        in: path
        description: Volume identifier
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: Get volume attributes
      summary: Get volume attributes
      operationId: getNodesStorageContentByNodeAndStorageAndVolume
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: storage
        in: path
        description: The storage identifier.
        required: true
      - name: volume
        in: path
        description: Volume identifier
        required: true
      responses:
        "200":
          description: Get volume attributes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesStorageContent'
    delete:
      tags:
      - nodes
      description: Delete volume
      summary: Delete volume
      operationId: removeNodesStorageContentByNodeAndStorageAndVolume
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: storage
        in: path
        description: The storage identifier.
        required: true
      - name: volume
        in: path
        description: Volume identifier
        required: true
      responses: ""
  /nodes/{node}/storage/{storage}/download-url:
    post:
      tags:
      - nodes
      description: Download templates, ISO images and OVAs by using an URL.
      summary: Download templates, ISO images and OVAs by using an URL.
      operationId: newNodesStorageDownloadurlByNodeAndStorage
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: storage
        in: path
        description: The storage identifier.
        required: true
      responses: ""
    summary: download-url
  /nodes/{node}/storage/{storage}/file-restore/download:
    get:
      tags:
      - nodes
      description: Extract a file or directory (as zip archive) from a PBS backup.
      summary: Extract a file or directory (as zip archive) from a PBS backup.
      operationId: getNodesStorageFilerestoreDownloadByNodeAndStorage
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: storage
        in: path
        description: The storage identifier.
        required: true
      responses: ""
    summary: download
  /nodes/{node}/storage/{storage}/file-restore/list:
    get:
      tags:
      - nodes
      description: List files and directories for single file restore under the given path.
      summary: List files and directories for single file restore under the given path.
      operationId: getNodesStorageFilerestoreListByNodeAndStorage
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: storage
        in: path
        description: The storage identifier.
        required: true
      responses:
        "200":
          description: List files and directories for single file restore under the given path.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesStorageFilerestoreList'
    summary: list
  /nodes/{node}/storage/{storage}/import-metadata:
    get:
      tags:
      - nodes
      description: Get the base parameters for creating a guest which imports data from a foreign importable guest, like an ESXi VM
      summary: Get the base parameters for creating a guest which imports data from a foreign importable guest, like an ESXi VM
      operationId: getNodesStorageImportmetadataByNodeAndStorage
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: storage
        in: path
        description: The storage identifier.
        required: true
      responses:
        "200":
          description: Get the base parameters for creating a guest which imports data from a foreign importable guest, like an ESXi VM
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesStorageImportmetadata'
    summary: import-metadata
  /nodes/{node}/storage/{storage}/prunebackups:
    summary: prunebackups
    get:
      tags:
      - nodes
      description: 'Get prune information for backups. NOTE: this is only a preview and might not be what a subsequent prune call does if backups are removed/added in the meantime.'
      summary: 'Get prune information for backups. NOTE: this is only a preview and might not be what a subsequent prune call does if backups are removed/added in the meantime.'
      operationId: getNodesStoragePrunebackupsByNodeAndStorage
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: storage
        in: path
        description: The storage identifier.
        required: true
      responses:
        "200":
          description: 'Get prune information for backups. NOTE: this is only a preview and might not be what a subsequent prune call does if backups are removed/added in the meantime.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesStoragePrunebackups'
    delete:
      tags:
      - nodes
      description: Prune backups. Only those using the standard naming scheme are considered.
      summary: Prune backups. Only those using the standard naming scheme are considered.
      operationId: removeNodesStoragePrunebackupsByNodeAndStorage
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: storage
        in: path
        description: The storage identifier.
        required: true
      responses: ""
  /nodes/{node}/storage/{storage}/rrd:
    get:
      tags:
      - nodes
      description: Read storage RRD statistics (returns PNG).
      summary: Read storage RRD statistics (returns PNG).
      operationId: getNodesStorageRrdByNodeAndStorage
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: storage
        in: path
        description: The storage identifier.
        required: true
      responses:
        "200":
          description: Read storage RRD statistics (returns PNG).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesStorageRrd'
    summary: rrd
  /nodes/{node}/storage/{storage}/rrddata:
    get:
      tags:
      - nodes
      description: Read storage RRD statistics.
      summary: Read storage RRD statistics.
      operationId: getNodesStorageRrddataByNodeAndStorage
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: storage
        in: path
        description: The storage identifier.
        required: true
      responses:
        "200":
          description: Read storage RRD statistics.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesStorageRrddata'
    summary: rrddata
  /nodes/{node}/storage/{storage}/status:
    get:
      tags:
      - nodes
      description: Read storage status.
      summary: Read storage status.
      operationId: getNodesStorageStatusByNodeAndStorage
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: storage
        in: path
        description: The storage identifier.
        required: true
      responses: ""
    summary: status
  /nodes/{node}/storage/{storage}/upload:
    post:
      tags:
      - nodes
      description: Upload templates, ISO images and OVAs.
      summary: Upload templates, ISO images and OVAs.
      operationId: newNodesStorageUploadByNodeAndStorage
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: storage
        in: path
        description: The storage identifier.
        required: true
      responses: ""
    summary: upload
  /nodes/{node}/subscription:
    summary: subscription
    post:
      tags:
      - nodes
      description: Update subscription info.
      summary: Update subscription info.
      operationId: newNodesSubscriptionByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: ok
    put:
      tags:
      - nodes
      description: Set subscription key.
      summary: Set subscription key.
      operationId: setNodesSubscriptionByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: Read subscription info.
      summary: Read subscription info.
      operationId: getNodesSubscriptionByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Read subscription info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesSubscription'
    delete:
      tags:
      - nodes
      description: Delete subscription key of this node.
      summary: Delete subscription key of this node.
      operationId: removeNodesSubscriptionByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: ok
  /nodes/{node}/suspendall:
    post:
      tags:
      - nodes
      description: Suspend all VMs.
      summary: Suspend all VMs.
      operationId: newNodesSuspendallByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: suspendall
  /nodes/{node}/syslog:
    get:
      tags:
      - nodes
      description: Read system log
      summary: Read system log
      operationId: getNodesSyslogByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Read system log
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesSyslog'
    summary: syslog
  /nodes/{node}/tasks:
    get:
      tags:
      - nodes
      description: Read task list for one node (finished tasks).
      summary: Read task list for one node (finished tasks).
      operationId: getNodesTasksByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Read task list for one node (finished tasks).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesTasks'
    summary: tasks
  /nodes/{node}/tasks/{upid}:
    summary: upid
    get:
      tags:
      - nodes
      description: ""
      summary: ""
      operationId: getNodesTasksByNodeAndUpid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: upid
        in: path
        description: 
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesTasks-AV'
    delete:
      tags:
      - nodes
      description: Stop a task.
      summary: Stop a task.
      operationId: removeNodesTasksByNodeAndUpid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: upid
        in: path
        description: 
        required: true
      responses:
        "200":
          description: ok
  /nodes/{node}/tasks/{upid}/log:
    get:
      tags:
      - nodes
      description: Read task log.
      summary: Read task log.
      operationId: getNodesTasksLogByNodeAndUpid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: upid
        in: path
        description: The task's unique ID.
        required: true
      responses:
        "200":
          description: Read task log.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesTasksLog'
    summary: log
  /nodes/{node}/tasks/{upid}/status:
    get:
      tags:
      - nodes
      description: Read task status.
      summary: Read task status.
      operationId: getNodesTasksStatusByNodeAndUpid
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      - name: upid
        in: path
        description: The task's unique ID.
        required: true
      responses:
        "200":
          description: Read task status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesTasksStatus'
    summary: status
  /nodes/{node}/termproxy:
    post:
      tags:
      - nodes
      description: Creates a VNC Shell proxy.
      summary: Creates a VNC Shell proxy.
      operationId: newNodesTermproxyByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: termproxy
  /nodes/{node}/time:
    summary: time
    put:
      tags:
      - nodes
      description: Set time zone.
      summary: Set time zone.
      operationId: setNodesTimeByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - nodes
      description: Read server time and time zone settings.
      summary: Read server time and time zone settings.
      operationId: getNodesTimeByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Read server time and time zone settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesTime'
  /nodes/{node}/version:
    get:
      tags:
      - nodes
      description: API version details
      summary: API version details
      operationId: getNodesVersionByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: API version details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesVersion'
    summary: version
  /nodes/{node}/vncshell:
    post:
      tags:
      - nodes
      description: Creates a VNC Shell proxy.
      summary: Creates a VNC Shell proxy.
      operationId: newNodesVncshellByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: vncshell
  /nodes/{node}/vncwebsocket:
    get:
      tags:
      - nodes
      description: Opens a websocket for VNC traffic.
      summary: Opens a websocket for VNC traffic.
      operationId: getNodesVncwebsocketByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Opens a websocket for VNC traffic.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesVncwebsocket'
    summary: vncwebsocket
  /nodes/{node}/vzdump:
    post:
      tags:
      - nodes
      description: Create backup.
      summary: Create backup.
      operationId: newNodesVzdumpByNode
      parameter:
      - name: node
        in: path
        description: Only run if executed on this node.
        required: true
      responses: ""
    summary: vzdump
  /nodes/{node}/vzdump/defaults:
    get:
      tags:
      - nodes
      description: Get the currently configured vzdump defaults.
      summary: Get the currently configured vzdump defaults.
      operationId: getNodesVzdumpDefaultsByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses:
        "200":
          description: Get the currently configured vzdump defaults.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesVzdumpDefaults'
    summary: defaults
  /nodes/{node}/vzdump/extractconfig:
    get:
      tags:
      - nodes
      description: Extract configuration from vzdump backup archive.
      summary: Extract configuration from vzdump backup archive.
      operationId: getNodesVzdumpExtractconfigByNode
      parameter:
      - name: node
        in: path
        description: The cluster node name.
        required: true
      responses: ""
    summary: extractconfig
  /nodes/{node}/wakeonlan:
    post:
      tags:
      - nodes
      description: Try to wake a node via 'wake on LAN' network packet.
      summary: Try to wake a node via 'wake on LAN' network packet.
      operationId: newNodesWakeonlanByNode
      parameter:
      - name: node
        in: path
        description: target node for wake on LAN packet
        required: true
      responses: ""
    summary: wakeonlan
  /pools:
    summary: pools
    post:
      tags:
      - pools
      description: Create new pool.
      summary: Create new pool.
      operationId: newPools
      parameter: []
      responses:
        "200":
          description: ok
    put:
      tags:
      - pools
      description: Update pool.
      summary: Update pool.
      operationId: setPools
      parameter: []
      responses:
        "200":
          description: ok
    get:
      tags:
      - pools
      description: List pools or get pool configuration.
      summary: List pools or get pool configuration.
      operationId: getPools
      parameter: []
      responses:
        "200":
          description: List pools or get pool configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pools'
    delete:
      tags:
      - pools
      description: Delete pool.
      summary: Delete pool.
      operationId: removePools
      parameter: []
      responses:
        "200":
          description: ok
  /pools/{poolid}:
    summary: poolid
    put:
      tags:
      - pools
      description: Update pool data (deprecated, no support for nested pools - use 'PUT /pools/?poolid={poolid}' instead).
      summary: Update pool data (deprecated, no support for nested pools - use 'PUT /pools/?poolid={poolid}' instead).
      operationId: setPoolsByPoolid
      parameter:
      - name: poolid
        in: path
        description: 
        required: true
      responses:
        "200":
          description: ok
    get:
      tags:
      - pools
      description: Get pool configuration (deprecated, no support for nested pools, use 'GET /pools/?poolid={poolid}').
      summary: Get pool configuration (deprecated, no support for nested pools, use 'GET /pools/?poolid={poolid}').
      operationId: getPoolsByPoolid
      parameter:
      - name: poolid
        in: path
        description: 
        required: true
      responses:
        "200":
          description: Get pool configuration (deprecated, no support for nested pools, use 'GET /pools/?poolid={poolid}').
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pools'
    delete:
      tags:
      - pools
      description: Delete pool (deprecated, no support for nested pools, use 'DELETE /pools/?poolid={poolid}').
      summary: Delete pool (deprecated, no support for nested pools, use 'DELETE /pools/?poolid={poolid}').
      operationId: removePoolsByPoolid
      parameter:
      - name: poolid
        in: path
        description: 
        required: true
      responses:
        "200":
          description: ok
  /storage:
    summary: storage
    post:
      tags:
      - storage
      description: Create a new storage.
      summary: Create a new storage.
      operationId: newStorage
      parameter: []
      responses: ""
    get:
      tags:
      - storage
      description: Storage index.
      summary: Storage index.
      operationId: getStorage
      parameter: []
      responses:
        "200":
          description: Storage index.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Storage'
  /storage/{storage}:
    summary: storage
    put:
      tags:
      - storage
      description: Update storage configuration.
      summary: Update storage configuration.
      operationId: setStorageByStorage
      parameter:
      - name: storage
        in: path
        description: The storage identifier.
        required: true
      responses: ""
    get:
      tags:
      - storage
      description: Read storage configuration.
      summary: Read storage configuration.
      operationId: getStorageByStorage
      parameter:
      - name: storage
        in: path
        description: The storage identifier.
        required: true
      responses: ""
    delete:
      tags:
      - storage
      description: Delete storage configuration.
      summary: Delete storage configuration.
      operationId: removeStorageByStorage
      parameter:
      - name: storage
        in: path
        description: The storage identifier.
        required: true
      responses:
        "200":
          description: ok
  /version:
    get:
      tags:
      - version
      description: API version details, including some parts of the global datacenter config.
      summary: API version details, including some parts of the global datacenter config.
      operationId: getVersion
      parameter: []
      responses:
        "200":
          description: API version details, including some parts of the global datacenter config.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
    summary: version
components:
  schemas:
    ClusterNotifications:
      type: array
      items:
        type: object
        properties: {}
    NodesLxcSnapshot:
      type: array
      items:
        type: object
        properties:
          parent:
            type: string
          snaptime:
            type: integer
          name:
            type: string
          description:
            type: string
    ClusterSdn:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
    NodesDisksZfs:
      type: object
      properties:
        status:
          type: string
        scan:
          type: string
        action:
          type: string
        name:
          type: string
        children:
          items:
            properties:
              cksum:
                optional: 1
                type: number
              msg:
                description: An optional message about the vdev.
                type: string
              name:
                description: The name of the vdev or section.
                type: string
              read:
                optional: 1
                type: number
              state:
                description: The state of the vdev.
                optional: 1
                type: string
              write:
                optional: 1
                type: number
            type: object
          type: array
        state:
          type: string
        errors:
          type: string
    NodesConfig:
      type: object
      properties:
        acmedomain[n]:
          type: string
        description:
          type: string
          maxLength: 65536
        wakeonlan:
          type: string
        acme:
          type: string
        startall-onboot-delay:
          maximum: 300
          type: integer
        digest:
          type: string
          maxLength: 40
    NodesVzdumpDefaults:
      type: object
      properties:
        zstd:
          type: integer
        script:
          type: string
        pool:
          type: string
        quiet:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        notification-policy:
          enum:
          - always
          - failure
          - never
          type: string
        pbs-change-detection-mode:
          enum:
          - legacy
          - data
          - metadata
          type: string
        lockwait:
          type: integer
        storage:
          type: string
        mailnotification:
          enum:
          - always
          - failure
          type: string
        notification-mode:
          enum:
          - auto
          - legacy-sendmail
          - notification-system
          type: string
        bwlimit:
          type: integer
        remove:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        pigz:
          type: integer
        vmid:
          type: string
        mode:
          enum:
          - snapshot
          - suspend
          - stop
          type: string
        fleecing:
          type: string
        dumpdir:
          type: string
        maxfiles:
          type: integer
          minimum: 1
        node:
          type: string
        performance:
          type: string
        ionice:
          maximum: 8
          type: integer
        exclude:
          type: string
        prune-backups:
          type: string
        notification-target:
          type: string
        stdexcludes:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        notes-template:
          type: string
          maxLength: 1024
        protected:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        exclude-path:
          items:
            type: string
          type: array
        all:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        compress:
          enum:
          - "0"
          - "1"
          - gzip
          - lzo
          - zstd
          type: string
        stopwait:
          type: integer
        tmpdir:
          type: string
        mailto:
          type: string
        stop:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
    NodesRrddata:
      type: array
      items:
        type: object
        properties: {}
    NodesQemuFirewallIpset-AV:
      type: array
      items:
        type: object
        properties:
          cidr:
            type: string
          nomatch:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          comment:
            type: string
          digest:
            type: string
            maxLength: 64
    NodesAptRepositories:
      type: object
      properties:
        infos:
          items:
            properties:
              index:
                description: Index of the associated repository within the file.
                type: string
              kind:
                description: Kind of the information (e.g. warning).
                type: string
              message:
                description: Information message.
                type: string
              path:
                description: Path to the associated file.
                type: string
              property:
                description: Property from which the info originates.
                optional: 1
                type: string
            type: object
          type: array
        files:
          items:
            properties:
              digest:
                description: Digest of the file as bytes.
                items:
                  type: integer
                type: array
              file-type:
                description: Format of the file.
                enum:
                - list
                - sources
                type: string
              path:
                description: Path to the problematic file.
                type: string
              repositories:
                description: The parsed repositories.
                items:
                  properties:
                    Comment:
                      description: Associated comment
                      optional: 1
                      type: string
                    Components:
                      description: List of repository components
                      items:
                        type: string
                      optional: 1
                      type: array
                    Enabled:
                      description: Whether the repository is enabled or not
                      type: boolean
                    FileType:
                      description: Format of the defining file.
                      enum:
                      - list
                      - sources
                      type: string
                    Options:
                      description: Additional options
                      items:
                        properties:
                          Key:
                            type: string
                          Values:
                            items:
                              type: string
                            type: array
                        type: object
                      optional: 1
                      type: array
                    Suites:
                      description: List of package distribuitions
                      items:
                        type: string
                      type: array
                    Types:
                      description: List of package types.
                      items:
                        enum:
                        - deb
                        - deb-src
                        type: string
                      type: array
                    URIs:
                      description: List of repository URIs.
                      items:
                        type: string
                      type: array
                  type: object
                type: array
            type: object
          type: array
        standard-repos:
          items:
            properties:
              handle:
                description: Handle to identify the repository.
                type: string
              name:
                description: Full name of the repository.
                type: string
              status:
                description: Indicating enabled/disabled status, if the repository is configured.
                optional: 1
                type: boolean
            type: object
          type: array
        errors:
          items:
            properties:
              error:
                description: The error message
                type: string
              path:
                description: Path to the problematic file.
                type: string
            type: object
          type: array
        digest:
          type: string
    NodesApt:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
    NodesReplication-AV:
      type: array
      items:
        type: object
        properties: {}
    NodesQemuFirewallIpset:
      type: array
      items:
        type: object
        properties:
          name:
            minLength: 2
            type: string
            pattern: '[A-Za-z][A-Za-z0-9\-\_]+'
            maxLength: 64
          comment:
            type: string
          digest:
            type: string
            maxLength: 64
    ClusterBackupIncludedvolumes:
      type: object
      properties:
        children:
          items:
            properties:
              children:
                description: The volumes of the guest with the information if they will be included in backups.
                items:
                  properties:
                    id:
                      description: Configuration key of the volume.
                      type: string
                    included:
                      description: Whether the volume is included in the backup or not.
                      type: boolean
                    name:
                      description: Name of the volume.
                      type: string
                    reason:
                      description: The reason why the volume is included (or excluded).
                      type: string
                  type: object
                optional: 1
                type: array
              id:
                description: VMID of the guest.
                type: integer
              name:
                description: Name of the guest
                optional: 1
                type: string
              type:
                description: Type of the guest, VM, CT or unknown for removed but not purged guests.
                enum:
                - qemu
                - lxc
                - unknown
                type: string
            type: object
          type: array
    NodesCapabilities:
      type: array
      items:
        type: object
        properties: {}
    NodesFirewallLog:
      type: array
      items:
        type: object
        properties:
          t:
            type: string
          "n":
            type: integer
    NodesLxcStatusCurrent:
      type: object
      properties:
        name:
          type: string
        tags:
          type: string
        lock:
          type: string
        netout:
          type: integer
        cpus:
          type: number
        diskwrite:
          type: integer
        uptime:
          type: integer
        maxdisk:
          type: integer
        vmid:
          minimum: 100
          maximum: 999999999
          type: integer
        disk:
          type: integer
        status:
          enum:
          - stopped
          - running
          type: string
        ha:
          type: object
        maxswap:
          type: integer
        maxmem:
          type: integer
        netin:
          type: integer
        template:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        diskread:
          type: integer
    NodesLxcRrd:
      type: object
      properties:
        filename:
          type: string
    ClusterSdnZones:
      type: array
      items:
        type: object
        properties:
          mtu:
            type: integer
          pending:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          nodes:
            type: string
          dnszone:
            type: string
          reversedns:
            type: string
          dhcp:
            type: string
          state:
            type: string
          type:
            type: string
          ipam:
            type: string
          dns:
            type: string
          zone:
            type: string
    NodesAptVersions:
      type: array
      items:
        type: object
        properties: {}
    NodesHardwareUsb:
      type: array
      items:
        type: object
        properties:
          busnum:
            type: integer
          prodid:
            type: string
          manufacturer:
            type: string
          vendid:
            type: string
          port:
            type: integer
          level:
            type: integer
          devnum:
            type: integer
          speed:
            type: string
          class:
            type: integer
          serial:
            type: string
          usbpath:
            type: string
          product:
            type: string
    ClusterFirewallRules:
      type: object
      properties:
        icmp-type:
          type: string
        type:
          type: string
        pos:
          type: integer
        source:
          type: string
        ipversion:
          type: integer
        dest:
          type: string
        sport:
          type: string
        log:
          enum:
          - emerg
          - alert
          - crit
          - err
          - warning
          - notice
          - info
          - debug
          - nolog
          type: string
        dport:
          type: string
        enable:
          type: integer
        macro:
          type: string
        comment:
          type: string
        proto:
          type: string
        iface:
          type: string
        action:
          type: string
    NodesLxcRrddata:
      type: array
      items:
        type: object
        properties: {}
    ClusterFirewall:
      type: array
      items:
        type: object
        properties: {}
    NodesAplinfo:
      type: array
      items:
        type: object
        properties: {}
    AccessAcl:
      type: array
      items:
        type: object
        properties:
          path:
            type: string
          roleid:
            type: string
          propagate:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          ugid:
            type: string
          type:
            enum:
            - user
            - group
            - token
            type: string
    NodesCephCfg:
      type: array
      items:
        type: object
        properties: {}
    NodesVncwebsocket:
      type: object
      properties:
        port:
          type: string
    ClusterNotificationsEndpoints:
      type: array
      items:
        type: object
        properties: {}
    NodesQemuVncwebsocket:
      type: object
      properties:
        port:
          type: string
    ClusterFirewallGroups-AV:
      type: array
      items:
        type: object
        properties:
          pos:
            type: integer
    ClusterAcmeChallengeschema:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
          type:
            type: string
          schema:
            type: object
          id:
            type: string
    NodesLxcFirewallIpset-AV:
      type: array
      items:
        type: object
        properties:
          cidr:
            type: string
          nomatch:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          comment:
            type: string
          digest:
            type: string
            maxLength: 64
    NodesTasksStatus:
      type: object
      properties:
        pstart:
          type: integer
        pid:
          type: integer
        user:
          type: string
        node:
          type: string
        id:
          type: string
        upid:
          type: string
        status:
          enum:
          - running
          - stopped
          type: string
        exitstatus:
          type: string
        type:
          type: string
        starttime:
          type: integer
    NodesTasks:
      type: array
      items:
        type: object
        properties:
          pstart:
            type: integer
          pid:
            title: PID
            type: integer
          user:
            title: User
            type: string
          node:
            title: Node
            type: string
          id:
            title: ID
            type: string
          upid:
            title: UPID
            type: string
          status:
            title: Status
            type: string
          endtime:
            title: Endtime
            type: integer
          type:
            title: Type
            type: string
          starttime:
            title: Starttime
            type: integer
    ClusterAcmePlugins:
      type: array
      items:
        type: object
        properties:
          plugin:
            type: string
    ClusterSdnVnetsFirewallOptions:
      type: object
      properties:
        policy_forward:
          enum:
          - ACCEPT
          - DROP
          type: string
        log_level_forward:
          enum:
          - emerg
          - alert
          - crit
          - err
          - warning
          - notice
          - info
          - debug
          - nolog
          type: string
        enable:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
    NodesVersion:
      type: object
      properties:
        release:
          type: string
        version:
          type: string
        repoid:
          type: string
    ClusterHaStatus:
      type: array
      items:
        type: object
        properties: {}
    NodesCephOsdLvinfo:
      type: object
      properties:
        creation_time:
          type: string
        lv_size:
          type: integer
        lv_name:
          type: string
        lv_path:
          type: string
        lv_uuid:
          type: string
        vg_name:
          type: string
    NodesTime:
      type: object
      properties:
        time:
          type: integer
          minimum: 1297163644
        timezone:
          type: string
        localtime:
          type: integer
          minimum: 1297163644
    ClusterSdnIpams:
      type: array
      items:
        type: object
        properties:
          ipam:
            type: string
          type:
            type: string
    NodesDisksLvmthin:
      type: array
      items:
        type: object
        properties:
          lv_size:
            type: integer
          used:
            type: integer
          metadata_used:
            type: integer
          lv:
            type: string
          metadata_size:
            type: integer
          vg:
            type: string
    NodesServices:
      type: array
      items:
        type: object
        properties: {}
    NodesHosts:
      type: object
      properties:
        data:
          type: string
        digest:
          type: string
          maxLength: 64
    NodesHardwarePci:
      type: array
      items:
        type: object
        properties:
          subsystem_vendor:
            type: string
          vendor_name:
            type: string
          device:
            type: string
          device_name:
            type: string
          id:
            type: string
          mdev:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          subsystem_device_name:
            type: string
          iommugroup:
            type: integer
          vendor:
            type: string
          class:
            type: string
          subsystem_vendor_name:
            type: string
          subsystem_device:
            type: string
    ClusterNotificationsMatcherfields:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
    NodesCephMon:
      type: array
      items:
        type: object
        properties:
          quorum:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          addr:
            type: string
          rank:
            type: integer
          name:
            type: string
          service:
            type: integer
          ceph_version_short:
            type: string
          ceph_version:
            type: string
          host:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          state:
            type: string
          direxists:
            type: string
    NodesLxcFirewall:
      type: array
      items:
        type: object
        properties: {}
    ClusterMappingUsb:
      type: array
      items:
        type: object
        properties:
          error:
            items:
              properties:
                message:
                  description: The message of the error
                  type: string
                severity:
                  description: The severity of the error
                  type: string
              type: object
            type: 
          map:
            items:
              description: A mapping for a node.
              type: string
            type: array
          id:
            type: string
          description:
            type: string
    ClusterStatus:
      type: array
      items:
        type: object
        properties:
          nodeid:
            type: integer
          ip:
            type: string
          type:
            enum:
            - cluster
            - node
            type: string
          nodes:
            type: integer
          id:
            type: string
          level:
            type: string
          name:
            type: string
          online:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          quorate:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          version:
            type: integer
          local:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
    ClusterMetrics:
      type: array
      items:
        type: object
        properties: {}
    AccessDomains:
      type: array
      items:
        type: object
        properties:
          realm:
            type: string
          type:
            type: string
          comment:
            type: string
          tfa:
            enum:
            - yubico
            - oath
            type: string
    ClusterMetricsExport:
      type: object
      properties:
        data:
          items:
            additionalProperties: 0
            properties:
              id:
                description: Unique identifier for this metric object, for instance 'node/<nodename>' or 'qemu/<vmid>'.
                type: string
              metric:
                description: Name of the metric.
                type: string
              timestamp:
                description: Time at which this metric was observed
                type: integer
              type:
                description: Type of the metric.
                enum:
                - gauge
                - counter
                - derive
                type: string
              value:
                description: Metric value.
                type: number
            type: object
          type: array
    ClusterNotificationsMatcherfieldvalues:
      type: array
      items:
        type: object
        properties:
          field:
            type: string
          comment:
            type: string
          value:
            type: string
    NodesQueryurlmetadata:
      type: object
      properties:
        size:
          type: integer
        filename:
          type: string
        mimetype:
          type: string
    ClusterResources:
      type: array
      items:
        type: object
        properties:
          disk:
            type: integer
          pool:
            type: string
          uptime:
            type: integer
          netin:
            type: integer
          diskread:
            type: integer
          level:
            type: string
          content:
            type: string
          vmid:
            minimum: 100
            maximum: 999999999
            type: integer
          cpu:
            type: number
          plugintype:
            type: string
          hastate:
            type: string
          name:
            type: string
          mem:
            type: integer
          node:
            type: string
          maxcpu:
            type: number
          template:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          type:
            enum:
            - node
            - storage
            - pool
            - qemu
            - lxc
            - openvz
            - sdn
            type: string
          maxdisk:
            type: integer
          storage:
            type: string
          tags:
            type: string
          maxmem:
            type: integer
          lock:
            type: string
          status:
            type: string
          diskwrite:
            type: integer
          cgroup-mode:
            type: integer
          id:
            type: string
          netout:
            type: integer
    ClusterConfigJoin:
      type: object
      properties:
        preferred_node:
          type: string
        nodelist:
          items:
            additionalProperties: 1
            properties:
              name:
                description: The cluster node name.
                format: pve-node
                type: string
              nodeid:
                description: Node id for this node.
                minimum: 1
                optional: 1
                type: integer
              pve_addr:
                format: ip
                type: string
              pve_fp:
                description: Certificate SHA 256 fingerprint.
                pattern: ([A-Fa-f0-9]{2}:){31}[A-Fa-f0-9]{2}
                type: string
              quorum_votes:
                minimum: 0
                type: integer
              ring0_addr:
                description: Address and priority information of a single corosync link. (up to 8 links supported; link0..link7)
                format:
                  address:
                    default_key: 1
                    description: Hostname (or IP) of this corosync link address.
                    format: address
                    format_description: IP
                    type: string
                  priority:
                    default: 0
                    description: The priority for the link when knet is used in 'passive' mode (default). Lower value means higher priority. Only valid for cluster create, ignored on node add.
                    maximum: 255
                    minimum: 0
                    optional: 1
                    type: integer
                optional: 1
                type: string
            type: object
          type: array
        totem:
          type: object
        config_digest:
          type: string
    NodesSdnZonesContent:
      type: array
      items:
        type: object
        properties:
          status:
            type: string
          vnet:
            type: string
          statusmsg:
            type: string
    NodesQemuSnapshot-AV:
      type: array
      items:
        type: object
        properties: {}
    NodesFirewallRules:
      type: object
      properties:
        icmp-type:
          type: string
        type:
          type: string
        pos:
          type: integer
        source:
          type: string
        ipversion:
          type: integer
        dest:
          type: string
        sport:
          type: string
        log:
          enum:
          - emerg
          - alert
          - crit
          - err
          - warning
          - notice
          - info
          - debug
          - nolog
          type: string
        dport:
          type: string
        enable:
          type: integer
        macro:
          type: string
        comment:
          type: string
        proto:
          type: string
        iface:
          type: string
        action:
          type: string
    ClusterCephMetadata:
      type: object
      properties:
        mds:
          properties:
            '{id}':
              description: Useful properties are listed, but not the full list.
              properties:
                addr:
                  description: Bind addresses and ports.
                  type: string
                ceph_release:
                  description: Ceph release codename currently used.
                  type: string
                ceph_version:
                  description: Version info currently used by the service.
                  type: string
                ceph_version_short:
                  description: Short version (numerical) info currently used by the service.
                  type: string
                hostname:
                  description: Hostname on which the service is running.
                  type: string
                mem_swap_kb:
                  description: Memory of the service currently in swap.
                  type: integer
                mem_total_kb:
                  description: Memory consumption of the service.
                  type: integer
                name:
                  description: Name of the service instance.
                  type: string
              type: object
          type: object
        osd:
          items: 
          type: array
        mgr:
          properties:
            '{id}':
              description: Useful properties are listed, but not the full list.
              properties:
                addr:
                  description: Bind address
                  type: string
                ceph_release:
                  description: Ceph release codename currently used.
                  type: string
                ceph_version:
                  description: Version info currently used by the service.
                  type: string
                ceph_version_short:
                  description: Short version (numerical) info currently used by the service.
                  type: string
                hostname:
                  description: Hostname on which the service is running.
                  type: string
                mem_swap_kb:
                  description: Memory of the service currently in swap.
                  type: integer
                mem_total_kb:
                  description: Memory consumption of the service.
                  type: integer
                name:
                  description: Name of the service instance.
                  type: string
              type: object
          type: object
        node:
          properties:
            '{node}':
              properties:
                buildcommit:
                  description: GIT commit used for the build.
                  type: string
                version:
                  description: Version info.
                  properties:
                    parts:
                      description: major, minor & patch
                      type: array
                    str:
                      description: Version as single string.
                      type: string
                  type: object
              type: object
          type: object
        mon:
          properties:
            '{id}':
              description: Useful properties are listed, but not the full list.
              properties:
                addrs:
                  description: Bind addresses and ports.
                  type: string
                ceph_release:
                  description: Ceph release codename currently used.
                  type: string
                ceph_version:
                  description: Version info currently used by the service.
                  type: string
                ceph_version_short:
                  description: Short version (numerical) info currently used by the service.
                  type: string
                hostname:
                  description: Hostname on which the service is running.
                  type: string
                mem_swap_kb:
                  description: Memory of the service currently in swap.
                  type: integer
                mem_total_kb:
                  description: Memory consumption of the service.
                  type: integer
                name:
                  description: Name of the service instance.
                  type: string
              type: object
          type: object
    NodesCephLog:
      type: array
      items:
        type: object
        properties:
          t:
            type: string
          "n":
            type: integer
    NodesQemuStatusCurrent:
      type: object
      properties:
        name:
          type: string
        tags:
          type: string
        qmpstatus:
          type: string
        lock:
          type: string
        netout:
          type: integer
        clipboard:
          enum:
          - vnc
          type: string
        agent:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        cpus:
          type: number
        pid:
          type: integer
        diskwrite:
          type: integer
        uptime:
          type: integer
        maxdisk:
          type: integer
        spice:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        vmid:
          minimum: 100
          maximum: 999999999
          type: integer
        running-qemu:
          type: string
        status:
          enum:
          - stopped
          - running
          type: string
        ha:
          type: object
        running-machine:
          type: string
        maxmem:
          type: integer
        netin:
          type: integer
        template:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        diskread:
          type: integer
    NodesQemuSnapshot:
      type: array
      items:
        type: object
        properties:
          parent:
            type: string
          snaptime:
            type: integer
          name:
            type: string
          vmstate:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          description:
            type: string
    NodesQemuAgent:
      type: array
      items:
        type: object
        properties: {}
    ClusterAcme:
      type: array
      items:
        type: object
        properties: {}
    AccessUsersToken:
      type: object
      properties:
        expire:
          type: integer
        privsep:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        comment:
          type: string
    Pools:
      type: object
      properties:
        comment:
          type: string
        members:
          items:
            additionalProperties: 1
            properties:
              id:
                type: string
              node:
                type: string
              storage:
                optional: 1
                type: string
              type:
                enum:
                - qemu
                - lxc
                - openvz
                - storage
                type: string
              vmid:
                optional: 1
                type: integer
            type: object
          type: array
    NodesScanZfs:
      type: array
      items:
        type: object
        properties:
          pool:
            type: string
    NodesQemu:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
          tags:
            type: string
          qmpstatus:
            type: string
          lock:
            type: string
          netout:
            type: integer
          cpus:
            type: number
          pid:
            type: integer
          diskwrite:
            type: integer
          uptime:
            type: integer
          maxdisk:
            type: integer
          vmid:
            minimum: 100
            maximum: 999999999
            type: integer
          running-qemu:
            type: string
          status:
            enum:
            - stopped
            - running
            type: string
          running-machine:
            type: string
          maxmem:
            type: integer
          netin:
            type: integer
          template:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          diskread:
            type: integer
    NodesStoragePrunebackups:
      type: array
      items:
        type: object
        properties:
          volid:
            type: string
          mark:
            enum:
            - keep
            - remove
            - protected
            - renamed
            type: string
          vmid:
            type: integer
          ctime:
            type: integer
          type:
            type: string
    ClusterNotificationsMatchers:
      type: object
      properties:
        comment:
          type: string
        match-severity:
          items:
            type: string
          type: array
        target:
          items:
            format: pve-configid
            type: string
          type: array
        match-field:
          items:
            type: string
          type: array
        disable:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        name:
          type: string
        match-calendar:
          items:
            type: string
          type: array
        invert-match:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        mode:
          enum:
          - all
          - any
          type: string
        digest:
          type: string
          maxLength: 64
    AccessTfa:
      type: object
      properties:
        type:
          enum:
          - totp
          - u2f
          - webauthn
          - recovery
          - yubico
          type: string
        created:
          type: integer
        id:
          type: string
        enable:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        description:
          type: string
    ClusterFirewallAliases:
      type: array
      items:
        type: object
        properties:
          cidr:
            type: string
          name:
            type: string
          comment:
            type: string
          digest:
            type: string
            maxLength: 64
    ClusterMetricsServer:
      type: array
      items:
        type: object
        properties:
          port:
            type: integer
          type:
            type: string
          server:
            type: string
          disable:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          id:
            type: string
    NodesStorageContent:
      type: object
      properties:
        size:
          type: integer
        notes:
          type: string
        format:
          type: string
        protected:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        used:
          type: integer
        path:
          type: string
    ClusterBackup:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            pattern: '\S+'
            maxLength: 50
    NodesDisksList:
      type: array
      items:
        type: object
        properties:
          parent:
            type: string
          serial:
            type: string
          wwn:
            type: string
          vendor:
            type: string
          used:
            type: string
          gpt:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          health:
            type: string
          devpath:
            type: string
          osdid-list:
            items:
              type: integer
            type: array
          mounted:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          size:
            type: integer
          osdid:
            type: integer
          model:
            type: string
    NodesQemuFirewallLog:
      type: array
      items:
        type: object
        properties:
          t:
            type: string
          "n":
            type: integer
    NodesCephMgr:
      type: array
      items:
        type: object
        properties:
          name:
            type: 
          host:
            type: string
          addr:
            type: string
          state:
            type: string
    NodesNetwork:
      type: object
      properties:
        method:
          type: string
        type:
          type: string
    NodesLxcVncwebsocket:
      type: object
      properties:
        port:
          type: string
    ClusterNotificationsTargets:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
          comment:
            type: string
          origin:
            enum:
            - user-created
            - builtin
            - modified-builtin
            type: string
          disable:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          type:
            enum:
            - sendmail
            - gotify
            - smtp
            - webhook
            type: string
    NodesLxcFirewallIpset:
      type: array
      items:
        type: object
        properties:
          name:
            minLength: 2
            type: string
            pattern: '[A-Za-z][A-Za-z0-9\-\_]+'
            maxLength: 64
          comment:
            type: string
          digest:
            type: string
            maxLength: 64
    NodesQemuFirewall:
      type: array
      items:
        type: object
        properties: {}
    NodesSubscription:
      type: object
      properties:
        sockets:
          type: integer
        key:
          type: string
        url:
          type: string
        status:
          enum:
          - new
          - notfound
          - active
          - invalid
          - expired
          - suspended
          type: string
        nextduedate:
          type: string
        checktime:
          type: integer
        level:
          type: string
        regdate:
          type: string
        message:
          type: string
        serverid:
          type: string
        productname:
          type: string
        signature:
          type: string
    NodesStorage:
      type: array
      items:
        type: object
        properties:
          avail:
            type: integer
          content:
            type: string
          total:
            type: integer
          type:
            type: string
          storage:
            type: string
          used_fraction:
            type: number
          active:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          shared:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          used:
            type: integer
          enabled:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
    ClusterCeph:
      type: array
      items:
        type: object
        properties: {}
    NodesStorageImportmetadata:
      type: object
      properties:
        disks:
          properties: 
          type: object
        warnings:
          items:
            additionalProperties: 1
            properties:
              key:
                description: Related subject (config) key of warning.
                optional: 1
                type: string
              type:
                description: What this warning is about.
                enum:
                - cdrom-image-ignored
                - efi-state-lost
                - guest-is-running
                - nvme-unsupported
                - ova-needs-extracting
                - ovmf-with-lsi-unsupported
                - serial-port-socket-only
                type: string
              value:
                description: Related subject (config) value of warning.
                optional: 1
                type: string
            type: object
          type: array
        type:
          enum:
          - vm
          type: string
        net:
          properties: 
          type: object
        source:
          enum:
          - esxi
          type: string
        create-args:
          properties: 
          type: object
    NodesLxcFirewallOptions:
      type: object
      properties:
        radv:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        macfilter:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        log_level_out:
          enum:
          - emerg
          - alert
          - crit
          - err
          - warning
          - notice
          - info
          - debug
          - nolog
          type: string
        enable:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        log_level_in:
          enum:
          - emerg
          - alert
          - crit
          - err
          - warning
          - notice
          - info
          - debug
          - nolog
          type: string
        ipfilter:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        dhcp:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        policy_out:
          enum:
          - ACCEPT
          - REJECT
          - DROP
          type: string
        ndp:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        policy_in:
          enum:
          - ACCEPT
          - REJECT
          - DROP
          type: string
    ClusterHaResources:
      type: object
      properties:
        comment:
          type: string
        max_relocate:
          type: integer
        state:
          enum:
          - started
          - stopped
          - enabled
          - disabled
          - ignored
          type: string
        max_restart:
          type: integer
        type:
          type: string
        group:
          type: string
        sid:
          type: string
        digest:
          type: string
    NodesLxc:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
          tags:
            type: string
          lock:
            type: string
          netout:
            type: integer
          cpus:
            type: number
          diskwrite:
            type: integer
          uptime:
            type: integer
          maxdisk:
            type: integer
          vmid:
            minimum: 100
            maximum: 999999999
            type: integer
          disk:
            type: integer
          status:
            enum:
            - stopped
            - running
            type: string
          maxswap:
            type: integer
          maxmem:
            type: integer
          netin:
            type: integer
          template:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          diskread:
            type: integer
    ClusterFirewallIpset:
      type: array
      items:
        type: object
        properties:
          name:
            minLength: 2
            type: string
            pattern: '[A-Za-z][A-Za-z0-9\-\_]+'
            maxLength: 64
          comment:
            type: string
          digest:
            type: string
            maxLength: 64
    NodesQemuPending:
      type: array
      items:
        type: object
        properties:
          pending:
            type: string
          value:
            type: string
          key:
            type: string
          delete:
            maximum: 2
            type: integer
    NodesDisksSmart:
      type: object
      properties:
        text:
          type: string
        health:
          type: string
        attributes:
          items: 
          type: array
        type:
          type: string
    Nodes:
      type: array
      items:
        type: object
        properties:
          uptime:
            type: integer
          node:
            type: string
          mem:
            type: integer
          cpu:
            type: number
          maxcpu:
            type: integer
          level:
            type: string
          status:
            enum:
            - unknown
            - online
            - offline
            type: string
          maxmem:
            type: integer
          ssl_fingerprint:
            type: string
    ClusterCephFlags:
      type: array
      items:
        type: object
        properties:
          value:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          name:
            enum:
            - nobackfill
            - nodeep-scrub
            - nodown
            - noin
            - noout
            - norebalance
            - norecover
            - noscrub
            - notieragent
            - noup
            - pause
            type: string
          description:
            type: string
    NodesAptUpdate:
      type: array
      items:
        type: object
        properties: {}
    NodesQemuCloudinit:
      type: array
      items:
        type: object
        properties:
          pending:
            type: string
          value:
            type: string
          key:
            type: string
          delete:
            maximum: 1
            type: integer
    NodesTasks-AV:
      type: array
      items:
        type: object
        properties: {}
    AccessUsers:
      type: object
      properties:
        comment:
          type: string
          maxLength: 2048
        tokens:
          properties:
            comment:
              optional: 1
              type: string
            expire:
              default: same as user
              description: API token expiration date (seconds since epoch). '0' means no expiration date.
              minimum: 0
              optional: 1
              type: integer
            privsep:
              default: 1
              description: Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.
              optional: 1
              type: boolean
          type: object
        groups:
          items:
            format: pve-groupid
            type: string
          type: array
        enable:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        expire:
          type: integer
        lastname:
          type: string
          maxLength: 1024
        firstname:
          type: string
          maxLength: 1024
        keys:
          pattern: '[0-9a-zA-Z!=]{0,4096}'
          type: string
        email:
          type: string
          maxLength: 254
    NodesCertificatesInfo:
      type: array
      items:
        type: object
        properties:
          public-key-type:
            type: string
          issuer:
            type: string
          pem:
            type: string
          notafter:
            type: integer
          subject:
            type: string
          notbefore:
            type: integer
          san:
            items:
              type: string
            type: array
          fingerprint:
            pattern: ([A-Fa-f0-9]{2}:){31}[A-Fa-f0-9]{2}
            type: string
          public-key-bits:
            type: integer
          filename:
            type: string
    NodesQemuFirewallAliases:
      type: array
      items:
        type: object
        properties:
          cidr:
            type: string
          name:
            type: string
          comment:
            type: string
          digest:
            type: string
            maxLength: 64
    ClusterNotificationsEndpointsGotify:
      type: object
      properties:
        disable:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        name:
          type: string
        server:
          type: string
        comment:
          type: string
        digest:
          type: string
          maxLength: 64
    NodesStorageRrddata:
      type: array
      items:
        type: object
        properties: {}
    NodesCapabilitiesQemuMachines:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
          version:
            type: string
          type:
            enum:
            - q35
            - i440fx
            type: string
    NodesQemuMigrate:
      type: object
      properties:
        allowed_nodes:
          items: 
          type: array
        mapped-resources:
          items: 
          type: array
        local_disks:
          items: 
          type: array
        not_allowed_nodes:
          type: object
        running:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        local_resources:
          items: 
          type: array
    NodesDns:
      type: object
      properties:
        dns3:
          type: string
        dns1:
          type: string
        dns2:
          type: string
        search:
          type: string
    AccessRoles:
      type: object
      properties:
        Datastore.Allocate:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        Mapping.Use:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        Datastore.AllocateTemplate:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        VM.Config.Cloudinit:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        Mapping.Audit:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        VM.PowerMgmt:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        Mapping.Modify:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        Sys.Audit:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        VM.Config.CDROM:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        VM.Snapshot:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        Sys.AccessNetwork:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        Sys.Console:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        User.Modify:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        VM.Config.Network:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        VM.Config.CPU:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        VM.Backup:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        Sys.Incoming:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        Datastore.Audit:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        Datastore.AllocateSpace:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        VM.Audit:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        Realm.AllocateUser:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        SDN.Audit:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        VM.Config.HWType:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        VM.Config.Memory:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        VM.Config.Disk:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        VM.Clone:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        VM.Migrate:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        Pool.Audit:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        VM.Config.Options:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        VM.Allocate:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        Group.Allocate:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        Sys.Syslog:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        VM.Snapshot.Rollback:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        VM.Console:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        VM.Monitor:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        Permissions.Modify:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        Pool.Allocate:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        Realm.Allocate:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        Sys.Modify:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        Sys.PowerMgmt:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        SDN.Allocate:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        SDN.Use:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
    NodesReplication:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
    NodesLxcFirewallRefs:
      type: array
      items:
        type: object
        properties:
          scope:
            type: string
          name:
            type: string
          ref:
            type: string
          comment:
            type: string
          type:
            enum:
            - alias
            - ipset
            type: string
    NodesStorageRrd:
      type: object
      properties:
        filename:
          type: string
    NodesQemuMtunnelwebsocket:
      type: object
      properties:
        port:
          type: string
        socket:
          type: string
    NodesCapabilitiesQemuCpu:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
          custom:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          vendor:
            type: string
    NodesLxcFirewallLog:
      type: array
      items:
        type: object
        properties:
          t:
            type: string
          "n":
            type: integer
    NodesCephPool-AV:
      type: array
      items:
        type: object
        properties: {}
    ClusterSdnVnetsFirewallRules:
      type: object
      properties:
        icmp-type:
          type: string
        type:
          type: string
        pos:
          type: integer
        source:
          type: string
        ipversion:
          type: integer
        dest:
          type: string
        sport:
          type: string
        log:
          enum:
          - emerg
          - alert
          - crit
          - err
          - warning
          - notice
          - info
          - debug
          - nolog
          type: string
        dport:
          type: string
        enable:
          type: integer
        macro:
          type: string
        comment:
          type: string
        proto:
          type: string
        iface:
          type: string
        action:
          type: string
    NodesLxcPending:
      type: array
      items:
        type: object
        properties:
          pending:
            type: string
          value:
            type: string
          key:
            type: string
          delete:
            maximum: 2
            type: integer
    NodesNetstat:
      type: array
      items:
        type: object
        properties: {}
    NodesCertificatesAcme:
      type: array
      items:
        type: object
        properties: {}
    ClusterAcmeAccount:
      type: object
      properties:
        tos:
          type: string
        location:
          type: string
        directory:
          pattern: ^https?://.*
          type: string
        account:
          type: object
    ClusterAcmeMeta:
      type: object
      properties:
        caaIdentities:
          items:
            type: string
          type: array
        externalAccountRequired:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        termsOfService:
          type: string
        website:
          type: string
    ClusterFirewallOptions:
      type: object
      properties:
        enable:
          type: integer
        ebtables:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        policy_forward:
          enum:
          - ACCEPT
          - DROP
          type: string
        policy_out:
          enum:
          - ACCEPT
          - REJECT
          - DROP
          type: string
        policy_in:
          enum:
          - ACCEPT
          - REJECT
          - DROP
          type: string
        log_ratelimit:
          type: string
    NodesReplicationLog:
      type: array
      items:
        type: object
        properties:
          t:
            type: string
          "n":
            type: integer
    ClusterConfig:
      type: array
      items:
        type: object
        properties: {}
    ClusterReplication:
      type: array
      items:
        type: object
        properties: {}
    NodesLxcMtunnelwebsocket:
      type: object
      properties:
        port:
          type: string
        socket:
          type: string
    AccessGroups:
      type: object
      properties:
        comment:
          type: string
        members:
          items:
            description: Full User ID, in the `name@realm` format.
            format: pve-userid
            maxLength: 64
            type: string
          type: array
    NodesScanGlusterfs:
      type: array
      items:
        type: object
        properties:
          volname:
            type: string
    NodesRrd:
      type: object
      properties:
        filename:
          type: string
    NodesScanLvmthin:
      type: array
      items:
        type: object
        properties:
          lv:
            type: string
    NodesScanPbs:
      type: array
      items:
        type: object
        properties:
          comment:
            type: string
          store:
            type: string
    NodesSdnZones:
      type: array
      items:
        type: object
        properties:
          status:
            enum:
            - available
            - pending
            - error
            type: string
          zone:
            type: string
    ClusterMappingPci:
      type: array
      items:
        type: object
        properties:
          checks:
            items:
              properties:
                message:
                  description: The message of the error
                  type: string
                severity:
                  description: The severity of the error
                  enum:
                  - warning
                  - error
                  type: string
              type: object
            type: array
          id:
            type: string
          map:
            items:
              description: A mapping for a node.
              type: string
            type: array
          description:
            type: string
    NodesQemuAgentFileread:
      type: object
      properties:
        content:
          type: string
        truncated:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
    NodesQemuConfig:
      type: object
      properties:
        numa:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        description:
          type: string
          maxLength: 8192
        cpulimit:
          maximum: 128
          type: number
        reboot:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        bootdisk:
          pattern: (ide|sata|scsi|virtio)\d+
          type: string
        template:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        boot:
          type: string
        acpi:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        unused[n]:
          type: string
        cores:
          type: integer
          minimum: 1
        net[n]:
          type: string
        freeze:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        cpuunits:
          minimum: 1
          maximum: 262144
          type: integer
        efidisk0:
          type: string
        cpu:
          type: string
        citype:
          enum:
          - configdrive2
          - nocloud
          - opennebula
          type: string
        rng0:
          type: string
        numa[n]:
          type: string
        ciupgrade:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        ipconfig[n]:
          type: string
        memory:
          type: string
        ivshmem:
          type: string
        digest:
          type: string
        startup:
          type: string
        sshkeys:
          type: string
        autostart:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        affinity:
          type: string
        startdate:
          pattern: (now|\d{4}-\d{1,2}-\d{1,2}(T\d{1,2}:\d{1,2}:\d{1,2})?)
          type: string
        scsi[n]:
          type: string
        tablet:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        arch:
          enum:
          - x86_64
          - aarch64
          type: string
        smbios1:
          type: string
          maxLength: 512
        amd-sev:
          type: string
        usb[n]:
          type: string
        cipassword:
          type: string
        protection:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        vcpus:
          type: integer
          minimum: 1
        args:
          type: string
        ostype:
          enum:
          - other
          - wxp
          - w2k
          - w2k3
          - w2k8
          - wvista
          - win7
          - win8
          - win10
          - win11
          - l24
          - l26
          - solaris
          type: string
        balloon:
          type: integer
        parallel[n]:
          pattern: /dev/parport\d+|/dev/usb/lp\d+
          type: string
        name:
          type: string
        serial[n]:
          pattern: (/dev/.+|socket)
          type: string
        tdf:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        keephugepages:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        migrate_downtime:
          type: number
        audio0:
          type: string
        watchdog:
          type: string
        keyboard:
          enum:
          - de
          - de-ch
          - da
          - en-gb
          - en-us
          - es
          - fi
          - fr
          - fr-be
          - fr-ca
          - fr-ch
          - hu
          - is
          - it
          - ja
          - lt
          - mk
          - nl
          - "no"
          - pl
          - pt
          - pt-br
          - sv
          - sl
          - tr
          type: string
        vmstatestorage:
          type: string
        hookscript:
          type: string
        vmgenid:
          pattern: (?:[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}|[01])
          type: string
        agent:
          type: string
        nameserver:
          type: string
        cicustom:
          type: string
        ide[n]:
          type: string
        spice_enhancements:
          type: string
        shares:
          maximum: 50000
          type: integer
        vga:
          type: string
        migrate_speed:
          type: integer
        onboot:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        localtime:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        scsihw:
          enum:
          - lsi
          - lsi53c810
          - virtio-scsi-pci
          - virtio-scsi-single
          - megasas
          - pvscsi
          type: string
        hotplug:
          type: string
        smp:
          type: integer
          minimum: 1
        hugepages:
          enum:
          - any
          - "2"
          - "1024"
          type: string
        searchdomain:
          type: string
        machine:
          type: string
        hostpci[n]:
          type: string
        virtio[n]:
          type: string
        sata[n]:
          type: string
        tags:
          type: string
        kvm:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        bios:
          enum:
          - seabios
          - ovmf
          type: string
        lock:
          enum:
          - backup
          - clone
          - create
          - migrate
          - rollback
          - snapshot
          - snapshot-delete
          - suspending
          - suspended
          type: string
        tpmstate0:
          type: string
        cdrom:
          type: string
        ciuser:
          type: string
        sockets:
          type: integer
          minimum: 1
    ClusterJobsRealmsync:
      type: array
      items:
        type: object
        properties:
          comment:
            type: string
          next-run:
            type: integer
          schedule:
            type: string
          id:
            type: string
          scope:
            enum:
            - users
            - groups
            - both
            type: string
          remove-vanished:
            pattern: (?:(?:(?:acl|properties|entry);)*(?:acl|properties|entry))|none
            type: string
          realm:
            type: string
            maxLength: 32
          last-run:
            type: integer
          enabled:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
    NodesDisks:
      type: array
      items:
        type: object
        properties: {}
    NodesCeph:
      type: array
      items:
        type: object
        properties: {}
    Cluster:
      type: array
      items:
        type: object
        properties: {}
    NodesQemuFirewallOptions:
      type: object
      properties:
        radv:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        macfilter:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        log_level_out:
          enum:
          - emerg
          - alert
          - crit
          - err
          - warning
          - notice
          - info
          - debug
          - nolog
          type: string
        enable:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        log_level_in:
          enum:
          - emerg
          - alert
          - crit
          - err
          - warning
          - notice
          - info
          - debug
          - nolog
          type: string
        ipfilter:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        dhcp:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        policy_out:
          enum:
          - ACCEPT
          - REJECT
          - DROP
          type: string
        ndp:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        policy_in:
          enum:
          - ACCEPT
          - REJECT
          - DROP
          type: string
    NodesStatus:
      type: object
      properties:
        boot-info:
          properties:
            mode:
              description: Through which firmware the system got booted.
              enum:
              - efi
              - legacy-bios
              type: string
            secureboot:
              description: System is booted in secure mode, only applicable for the "efi" mode.
              optional: 1
              type: boolean
          type: object
        current-kernel:
          properties:
            machine:
              description: Hardware (architecture) type
              type: string
            release:
              description: OS kernel release (e.g., "6.8.0")
              type: string
            sysname:
              description: OS kernel name (e.g., "Linux")
              type: string
            version:
              description: OS kernel version with build info
              type: string
          type: object
    ClusterSdnVnetsFirewall:
      type: array
      items:
        type: object
        properties: {}
    ClusterNotificationsEndpointsSendmail:
      type: object
      properties:
        from-address:
          type: string
        mailto:
          items:
            format: email-or-username
            type: string
          type: array
        mailto-user:
          items:
            format: pve-userid
            type: string
          type: array
        comment:
          type: string
        disable:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        name:
          type: string
        author:
          type: string
        digest:
          type: string
          maxLength: 64
    ClusterFirewallRefs:
      type: array
      items:
        type: object
        properties:
          scope:
            type: string
          name:
            type: string
          ref:
            type: string
          comment:
            type: string
          type:
            enum:
            - alias
            - ipset
            type: string
    NodesCephOsdMetadata:
      type: object
      properties:
        devices:
          items:
            properties:
              dev_node:
                description: Device node
                type: string
              device:
                description: Kind of OSD device
                enum:
                - block
                - db
                - wal
                type: string
              devices:
                description: Physical disks used
                type: string
              size:
                description: Size in bytes
                type: integer
              support_discard:
                description: Discard support of the physical device
                type: boolean
              type:
                description: Type of device. For example, hdd or ssd
                type: string
            type: object
          type: array
        osd:
          properties:
            back_addr:
              description: Address and port used to talk to other OSDs.
              type: string
            front_addr:
              description: Address and port used to talk to clients and monitors.
              type: string
            hb_back_addr:
              description: Heartbeat address and port for other OSDs.
              type: string
            hb_front_addr:
              description: Heartbeat address and port for clients and monitors.
              type: string
            hostname:
              description: Name of the host containing the OSD.
              type: string
            id:
              description: ID of the OSD.
              type: integer
            mem_usage:
              description: Memory usage of the OSD service.
              type: integer
            osd_data:
              description: Path to the OSD's data directory.
              type: string
            osd_objectstore:
              description: The type of object store used.
              type: string
            pid:
              description: OSD process ID.
              type: integer
            version:
              description: Ceph version of the OSD service.
              type: string
          type: object
    ClusterSdnControllers:
      type: array
      items:
        type: object
        properties:
          pending:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          type:
            type: string
          controller:
            type: string
          state:
            type: string
    ClusterLog:
      type: array
      items:
        type: object
        properties: {}
    NodesCephCfgDb:
      type: array
      items:
        type: object
        properties:
          can_update_at_runtime:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          value:
            type: string
          section:
            type: string
          level:
            type: string
          name:
            type: string
          mask:
            type: string
    NodesCephRules:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
    NodesCephMds:
      type: array
      items:
        type: object
        properties:
          addr:
            type: string
          rank:
            type: integer
          name:
            type: 
          state:
            type: string
          host:
            type: string
          standby_replay:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
    NodesHardware:
      type: array
      items:
        type: object
        properties:
          type:
            type: string
    NodesCertificates:
      type: array
      items:
        type: object
        properties: {}
    NodesLxcFeature:
      type: object
      properties:
        hasFeature:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
    NodesScanLvm:
      type: array
      items:
        type: object
        properties:
          vg:
            type: string
    NodesQemuFirewallRefs:
      type: array
      items:
        type: object
        properties:
          scope:
            type: string
          name:
            type: string
          ref:
            type: string
          comment:
            type: string
          type:
            enum:
            - alias
            - ipset
            type: string
    ClusterJobsScheduleanalyze:
      type: array
      items:
        type: object
        properties:
          timestamp:
            type: integer
          utc:
            type: string
    Nodes-AV:
      type: array
      items:
        type: object
        properties: {}
    ClusterFirewallMacros:
      type: array
      items:
        type: object
        properties:
          descr:
            type: string
          macro:
            type: string
    NodesQemuFeature:
      type: object
      properties:
        nodes:
          items:
            type: string
          type: array
        hasFeature:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
    NodesFirewallOptions:
      type: object
      properties:
        log_level_in:
          enum:
          - emerg
          - alert
          - crit
          - err
          - warning
          - notice
          - info
          - debug
          - nolog
          type: string
        nf_conntrack_max:
          type: integer
          minimum: 32768
        log_nf_conntrack:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        tcpflags:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        log_level_out:
          enum:
          - emerg
          - alert
          - crit
          - err
          - warning
          - notice
          - info
          - debug
          - nolog
          type: string
        nf_conntrack_allow_invalid:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        protection_synflood_burst:
          type: integer
        tcp_flags_log_level:
          enum:
          - emerg
          - alert
          - crit
          - err
          - warning
          - notice
          - info
          - debug
          - nolog
          type: string
        nf_conntrack_tcp_timeout_established:
          type: integer
          minimum: 7875
        nosmurfs:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        protection_synflood_rate:
          type: integer
        nf_conntrack_tcp_timeout_syn_recv:
          minimum: 30
          maximum: 60
          type: integer
        enable:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        nftables:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        log_level_forward:
          enum:
          - emerg
          - alert
          - crit
          - err
          - warning
          - notice
          - info
          - debug
          - nolog
          type: string
        smurf_log_level:
          enum:
          - emerg
          - alert
          - crit
          - err
          - warning
          - notice
          - info
          - debug
          - nolog
          type: string
        protection_synflood:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        nf_conntrack_helpers:
          type: string
        ndp:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
    ClusterSdnDns:
      type: array
      items:
        type: object
        properties:
          dns:
            type: string
          type:
            type: string
    ClusterNotificationsEndpointsSmtp:
      type: object
      properties:
        from-address:
          type: string
        mode:
          enum:
          - insecure
          - starttls
          - tls
          type: string
        mailto:
          items:
            format: email-or-username
            type: string
          type: array
        mailto-user:
          items:
            format: pve-userid
            type: string
          type: array
        comment:
          type: string
        username:
          type: string
        port:
          type: integer
        disable:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        name:
          type: string
        server:
          type: string
        author:
          type: string
        digest:
          type: string
          maxLength: 64
    NodesCephPoolStatus:
      type: object
      properties:
        name:
          title: Name
          type: string
        fast_read:
          minimum: 0
          maximum: 1
          format: int32
          title: Fast Read
          type: integer
        use_gmt_hitset:
          minimum: 0
          maximum: 1
          format: int32
          title: use_gmt_hitset
          type: integer
        noscrub:
          minimum: 0
          maximum: 1
          format: int32
          title: noscrub
          type: integer
        crush_rule:
          title: Crush Rule Name
          type: string
        pg_autoscale_mode:
          enum:
          - "on"
          - "off"
          - warn
          title: PG Autoscale Mode
          type: string
        hashpspool:
          minimum: 0
          maximum: 1
          format: int32
          title: hashpspool
          type: integer
        pg_num_min:
          maximum: 32768
          title: min. PG Num
          type: integer
        nodelete:
          minimum: 0
          maximum: 1
          format: int32
          title: nodelete
          type: integer
        target_size:
          pattern: ^(\d+(\.\d+)?)([KMGT])?$
          title: PG Autoscale Target Size
          type: string
        nosizechange:
          minimum: 0
          maximum: 1
          format: int32
          title: nosizechange
          type: integer
        write_fadvise_dontneed:
          minimum: 0
          maximum: 1
          format: int32
          title: write_fadvise_dontneed
          type: integer
        pg_num:
          minimum: 1
          maximum: 32768
          title: PG Num
          type: integer
        id:
          title: ID
          type: integer
        statistics:
          title: Statistics
          type: object
        application_list:
          items: 
          title: Application
          type: array
        pgp_num:
          title: PGP num
          type: integer
        nodeep-scrub:
          minimum: 0
          maximum: 1
          format: int32
          title: nodeep-scrub
          type: integer
        nopgchange:
          minimum: 0
          maximum: 1
          format: int32
          title: nopgchange
          type: integer
        application:
          enum:
          - rbd
          - cephfs
          - rgw
          title: Application
          type: string
        size:
          minimum: 1
          maximum: 7
          title: Size
          type: integer
        autoscale_status:
          title: Autoscale Status
          type: object
        target_size_ratio:
          title: PG Autoscale Target Ratio
          type: number
        min_size:
          minimum: 1
          maximum: 7
          title: Min Size
          type: integer
    NodesCephCmdsafety:
      type: object
      properties:
        status:
          type: string
        safe:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
    ClusterNotificationsEndpointsWebhook:
      type: object
      properties:
        comment:
          type: string
        secret:
          items:
            type: string
          type: array
        method:
          enum:
          - post
          - put
          - get
          type: string
        url:
          type: string
        header:
          items:
            type: string
          type: array
        disable:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        name:
          type: string
        body:
          type: string
        digest:
          type: string
          maxLength: 64
    NodesDisksLvm:
      type: object
      properties:
        leaf:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        children:
          items:
            properties:
              children:
                description: The underlying physical volumes
                items:
                  properties:
                    free:
                      description: The free bytes in the physical volume
                      type: integer
                    leaf:
                      type: boolean
                    name:
                      description: The name of the physical volume
                      type: string
                    size:
                      description: The size of the physical volume in bytes
                      type: integer
                  type: object
                optional: 1
                type: array
              free:
                description: The free bytes in the volume group
                type: integer
              leaf:
                type: boolean
              name:
                description: The name of the volume group
                type: string
              size:
                description: The size of the volume group in bytes
                type: integer
            type: object
          type: array
    NodesScan:
      type: array
      items:
        type: object
        properties:
          method:
            type: string
    NodesLxcInterfaces:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
          inet6:
            type: string
          hwaddr:
            type: string
          inet:
            type: string
    Version:
      type: object
      properties:
        release:
          type: string
        version:
          type: string
        repoid:
          pattern: '[0-9a-fA-F]{8,64}'
          type: string
        console:
          enum:
          - applet
          - vv
          - html5
          - xtermjs
          type: string
    ClusterFirewallIpset-AV:
      type: array
      items:
        type: object
        properties:
          cidr:
            type: string
          nomatch:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          comment:
            type: string
          digest:
            type: string
            maxLength: 64
    ClusterBackupinfoNotbackedup:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
          vmid:
            type: integer
          type:
            enum:
            - qemu
            - lxc
            type: string
    NodesQemuRrd:
      type: object
      properties:
        filename:
          type: string
    ClusterSdnVnets:
      type: array
      items:
        type: object
        properties: {}
    NodesFirewall:
      type: array
      items:
        type: object
        properties: {}
    NodesCephOsd:
      type: array
      items:
        type: object
        properties: {}
    ClusterConfigNodes:
      type: array
      items:
        type: object
        properties:
          node:
            type: string
    NodesCephPool:
      type: array
      items:
        type: object
        properties:
          type:
            enum:
            - replicated
            - erasure
            - unknown
            title: Type
            type: string
          crush_rule_name:
            title: Crush Rule Name
            type: string
          crush_rule:
            title: Crush Rule
            type: integer
          bytes_used:
            title: Used
            type: integer
          pg_autoscale_mode:
            title: PG Autoscale Mode
            type: string
          size:
            title: Size
            type: integer
          percent_used:
            title: '%-Used'
            type: number
          pg_num_min:
            title: min. PG Num
            type: integer
          pool_name:
            title: Name
            type: string
          target_size:
            title: PG Autoscale Target Size
            type: integer
          application_metadata:
            title: Associated Applications
            type: object
          pool:
            title: ID
            type: integer
          pg_num:
            title: PG Num
            type: integer
          pg_num_final:
            title: Optimal PG Num
            type: integer
          autoscale_status:
            title: Autoscale Status
            type: object
          target_size_ratio:
            title: PG Autoscale Target Ratio
            type: number
          min_size:
            title: Min Size
            type: integer
    NodesQemuAgentExecstatus:
      type: object
      properties:
        err-data:
          type: string
        err-truncated:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        exitcode:
          type: integer
        exited:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        out-truncated:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        out-data:
          type: string
        signal:
          type: integer
    ClusterSdnVnetsSubnets:
      type: array
      items:
        type: object
        properties: {}
    NodesDisksDirectory:
      type: array
      items:
        type: object
        properties:
          type:
            type: string
          device:
            type: string
          unitfile:
            type: string
          path:
            type: string
          options:
            type: string
    ClusterFirewallGroups:
      type: object
      properties:
        icmp-type:
          type: string
        type:
          type: string
        pos:
          type: integer
        source:
          type: string
        ipversion:
          type: integer
        dest:
          type: string
        sport:
          type: string
        log:
          enum:
          - emerg
          - alert
          - crit
          - err
          - warning
          - notice
          - info
          - debug
          - nolog
          type: string
        dport:
          type: string
        enable:
          type: integer
        macro:
          type: string
        comment:
          type: string
        proto:
          type: string
        iface:
          type: string
        action:
          type: string
    ClusterHa:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
    ClusterHaStatusCurrent:
      type: array
      items:
        type: object
        properties:
          type:
            enum:
            - quorum
            - master
            - lrm
            - service
            type: 
          crm_state:
            type: string
          max_relocate:
            type: integer
          node:
            type: string
          id:
            type: string
          max_restart:
            type: integer
          timestamp:
            type: integer
          quorate:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          state:
            type: string
          status:
            type: string
          request_state:
            type: string
          sid:
            type: string
    NodesTasksLog:
      type: array
      items:
        type: object
        properties:
          t:
            type: string
          "n":
            type: integer
    ClusterAcmeDirectories:
      type: array
      items:
        type: object
        properties:
          url:
            pattern: ^https?://.*
            type: string
          name:
            type: string
    NodesStorageFilerestoreList:
      type: array
      items:
        type: object
        properties:
          size:
            type: integer
          mtime:
            type: integer
          leaf:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          type:
            type: string
          text:
            type: string
          filepath:
            type: string
    NodesLxcFirewallRules:
      type: object
      properties:
        icmp-type:
          type: string
        type:
          type: string
        pos:
          type: integer
        source:
          type: string
        ipversion:
          type: integer
        dest:
          type: string
        sport:
          type: string
        log:
          enum:
          - emerg
          - alert
          - crit
          - err
          - warning
          - notice
          - info
          - debug
          - nolog
          type: string
        dport:
          type: string
        enable:
          type: integer
        macro:
          type: string
        comment:
          type: string
        proto:
          type: string
        iface:
          type: string
        action:
          type: string
    AccessTfa-AV:
      type: array
      items:
        type: object
        properties:
          type:
            enum:
            - totp
            - u2f
            - webauthn
            - recovery
            - yubico
            type: string
          created:
            type: integer
          id:
            type: string
          enable:
            minimum: 0
            maximum: 1
            format: int32
            type: integer
          description:
            type: string
    NodesHardwarePciMdev:
      type: array
      items:
        type: object
        properties:
          available:
            type: integer
          name:
            type: string
          type:
            type: string
          description:
            type: string
    NodesScanCifs:
      type: array
      items:
        type: object
        properties:
          description:
            type: string
          share:
            type: string
    NodesScanNfs:
      type: array
      items:
        type: object
        properties:
          options:
            type: string
          path:
            type: string
    ClusterHaGroups:
      type: array
      items:
        type: object
        properties:
          group:
            type: string
    NodesQemuFirewallRules:
      type: object
      properties:
        icmp-type:
          type: string
        type:
          type: string
        pos:
          type: integer
        source:
          type: string
        ipversion:
          type: integer
        dest:
          type: string
        sport:
          type: string
        log:
          enum:
          - emerg
          - alert
          - crit
          - err
          - warning
          - notice
          - info
          - debug
          - nolog
          type: string
        dport:
          type: string
        enable:
          type: integer
        macro:
          type: string
        comment:
          type: string
        proto:
          type: string
        iface:
          type: string
        action:
          type: string
    NodesCapabilitiesQemu:
      type: array
      items:
        type: object
        properties: {}
    NodesLxcConfig:
      type: object
      properties:
        protection:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        lxc:
          items:
            items:
              type: string
            type: array
          type: array
        onboot:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        tty:
          maximum: 6
          type: integer
        searchdomain:
          type: string
        tags:
          type: string
        swap:
          type: integer
        cpulimit:
          maximum: 8192
          type: number
        nameserver:
          type: string
        startup:
          type: string
        mp[n]:
          type: string
        console:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        ostype:
          enum:
          - debian
          - devuan
          - ubuntu
          - centos
          - fedora
          - opensuse
          - archlinux
          - alpine
          - gentoo
          - nixos
          - unmanaged
          type: string
        arch:
          enum:
          - amd64
          - i386
          - arm64
          - armhf
          - riscv32
          - riscv64
          type: string
        rootfs:
          type: string
        unused[n]:
          type: string
        digest:
          type: string
        dev[n]:
          type: string
        unprivileged:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        template:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        memory:
          type: integer
          minimum: 16
        debug:
          minimum: 0
          maximum: 1
          format: int32
          type: integer
        cpuunits:
          maximum: 500000
          type: integer
        lock:
          enum:
          - backup
          - create
          - destroyed
          - disk
          - fstrim
          - migrate
          - mounted
          - rollback
          - snapshot
          - snapshot-delete
          type: string
        timezone:
          type: string
        hostname:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 8192
        cores:
          minimum: 1
          maximum: 8192
          type: integer
        hookscript:
          type: string
        features:
          type: string
        cmode:
          enum:
          - shell
          - console
          - tty
          type: string
        net[n]:
          type: string
    NodesSdn:
      type: array
      items:
        type: object
        properties: {}
    NodesScanIscsi:
      type: array
      items:
        type: object
        properties:
          target:
            type: string
          portal:
            type: string
    Storage:
      type: array
      items:
        type: object
        properties:
          storage:
            type: string
    NodesCephFs:
      type: array
      items:
        type: object
        properties:
          metadata_pool:
            type: string
          data_pool:
            type: string
          name:
            type: string
    AccessUsersTfa:
      type: object
      properties:
        user:
          enum:
          - oath
          - u2f
          type: string
        realm:
          enum:
          - oath
          - yubico
          type: string
        types:
          items:
            description: A TFA type.
            enum:
            - totp
            - u2f
            - yubico
            - webauthn
            - recovedry
            type: string
          type: array
    ClusterTasks:
      type: array
      items:
        type: object
        properties:
          upid:
            type: string
    NodesLxcSnapshot-AV:
      type: array
      items:
        type: object
        properties: {}
    NodesLxcFirewallAliases:
      type: array
      items:
        type: object
        properties:
          cidr:
            type: string
          name:
            type: string
          comment:
            type: string
          digest:
            type: string
            maxLength: 64
    NodesHardwarePci-AV:
      type: array
      items:
        type: object
        properties:
          method:
            type: string
    NodesSyslog:
      type: array
      items:
        type: object
        properties:
          t:
            type: string
          "n":
            type: integer
    NodesQemuRrddata:
      type: array
      items:
        type: object
        properties: {}

