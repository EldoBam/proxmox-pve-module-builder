# {{packageName}} - the PowerShell module for the {{appName}}

{{#appDescriptionWithNewLines}}
{{{.}}}

{{/appDescriptionWithNewLines}}
This PowerShell module is automatically generated by the [Proxmox PVE Module Builder Project](https://github.com/EldoBam/proxmox-pve-module-builder)

{{^hideGenerationTimestamp}}
- Build date: {{generatedDate}}
{{/hideGenerationTimestamp}}
- Build package: {{generatorClass}}

## Frameworks supported
- PowerShell {{{powershellVersion}}} or later

## Beta version
This module is currently under beta release.
- login methods are working
- only some Get-Cmdlets are working
- parameters aren't implemented yet
- [Proxmox PVE Module Builder Project](https://github.com/EldoBam/proxmox-pve-module-builder)
- please only open issues according the Get|Set-{{{apiNamePrefix}}}Configuration and Invoke-{{{apiNamePrefix}}}Login cmdlets at this time
- any contribution is welcome

## Contact
- Timo Wolf 
- [eldobam.bsky.social](https://bsky.app/profile/eldobam.bsky.social)

## Dependencies

## Installation

{{#powershellGalleryUrl}}
To install from PowerShell Gallery ({{{powershellGalleryUrl}}})
```powershell
Import-Module -Name {{{powershellGalleryId}}} -Verbose
```
{{/powershellGalleryUrl}}

To install from the source, run the following command to build and install the PowerShell module locally:
```powershell
Import-Module -Name '.\src\{{{packageName}}}\{{{packageName}}}.psm1' -Verbose
```

To avoid function name collision, one can use `-Prefix`, e.g. `Import-Module -Name '.\src\{{{packageName}}}' -Prefix prefix`

To uninstall the module, simply run:
```powershell
Remove-Module {{{packageName}}}
```

## Authentication
This module supports both, the token based and ticket based authentication.
[PVE API Doku #Authentication](https://pve.proxmox.com/wiki/Proxmox_VE_API#Authentication)
The login method is neccessary initialize the module. While the token based authentication is statless does'nt really need a login on the REST Api,
so the login method just calls the API to see if the credentials are valid.
The ticket based authentication needs a login. The module performs a login request with your credentials and recieves a ticket and a CSRFPreventionToken
needed for the subsequent calls.

### Token (recommended)
For automation purposes it's recommended to use the token based authentication.
Token based authentication allows a stateless access to the REST API and can be given separate permissions and expiration dates to limit the scope and duration of the access.
```powershell
# choosing LoginMethod token
$LoginMethod = "token"
# insert your Proxmox TokenId <USER@REALM>!<GROUP> as Username and your Proxmox VE ApiToken as Password.
$Credentials = Get-Credential
Set-PVEConfiguration -BaseUrl "https://pve.local:8006/api2/json"`
                     -LoginMethod $LoginMethod`
                     -Credential $Credentials
# Invoke the login with silent switch. --> no interaction no output. returns $true on success
if((Invoke-PVELogin -Silent)){
    Write-Host "login successfull"
}else{
    Write-Error "login not successfull"
}
```

### Ticket
This Authentication method allows you to connect with your proxmox user credentials.
NOTE: Tickets have a limited lifetime of 2 hours. After that you have to call Invoke-{{{apiNamePrefix}}}Login again.
```powershell
# choosing LoginMethod token
$LoginMethod = "ticket"
# insert your Proxmox Username <USER@REALM> and Password
$Credentials = Get-Credential
Set-PVEConfiguration -BaseUrl "https://pve.local:8006/api2/json"`
                     -LoginMethod $LoginMethod`
                     -Credential $Credentials
# Invoke the login with silent switch. --> no interaction no output. returns $true on success
if((Invoke-PVELogin -Silent)){
    Write-Host "login successfull"
}else{
    Write-Error "login not successfull"
}
```

## Basic Example to get started
```powershell
Import-Module -Name '.\src\{{{packageName}}}\{{{packageName}}}.psm1' -Verbose
Invoke-{{{apiNamePrefix}}}Login
$nodes = Get-{{{apiNamePrefix}}}Nodes
```

## Tests

To install and run `Pester`, please execute the following commands in the terminal:

```powershell
Install-module -name Pester -force

Invoke-Pester
```

For troubleshooting, please run `$DebugPreference = 'Continue'` to turn on debugging and disable it with `$DebugPreference = 'SilentlyContinue'` when done with the troubleshooting.

## Documentation for API Endpoints

All URIs are relative to *{{{basePath}}}*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}*{{classname}}* | [**{{vendorExtensions.x-powershell-method-name}}**]({{apiDocPath}}{{classname}}.md#{{vendorExtensions.x-powershell-method-name-lowercase}}) | **{{httpMethod}}** {{path}} | {{{summary}}}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

## Documentation for Models

{{#modelPackage}}
{{#models}}{{#model}} - [{{{modelPackage}}}.{{{classname}}}]({{modelDocPath}}{{{classname}}}.md)
{{/model}}{{/models}}
{{/modelPackage}}
{{^modelPackage}}
No model defined in this package
{{/modelPackage}}

## Documentation for Authorization

{{^authMethods}}
All endpoints do not require authorization.
{{/authMethods}}
{{#authMethods}}
{{#last}}
Authentication schemes defined for the API:
{{/last}}
{{/authMethods}}
{{#authMethods}}

### {{name}}

{{#isApiKey}}- **Type**: API key

- **API key parameter name**: {{keyParamName}}
- **Location**: {{#isKeyInQuery}}URL query string{{/isKeyInQuery}}{{#isKeyInHeader}}HTTP header{{/isKeyInHeader}}
{{/isApiKey}}
{{#isBasic}}

- **Type**: HTTP basic authentication
{{/isBasic}}
{{#isOAuth}}

- **Type**: OAuth
- **Flow**: {{flow}}
- **Authorization URL**: {{authorizationUrl}}
- **Scopes**: {{^scopes}}N/A{{/scopes}}
{{#scopes}}  - {{scope}}: {{description}}
{{/scopes}}
{{/isOAuth}}

{{/authMethods}}
