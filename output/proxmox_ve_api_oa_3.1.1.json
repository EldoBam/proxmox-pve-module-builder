{
  "openapi": "3.1.1",
  "info": {
    "title": "Proxmox VE Module 1.0",
    "summary": "Module to access Proxmox VE Api",
    "description": "Generated OpenApiDescription to render Modules via OpenapiGenerator",
    "termsOfService": "",
    "contact": {
      "name": "Timo Wolf",
      "url": "",
      "email": ""
    },
    "version": "0.1",
    "licence": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "jsonSchemaDialect": "https://spec.openapis.org/oas/3.1/dialect/base",
  "paths": {
    "/access": {
      "get": {
        "summary": "Directory index.",
        "tags": [
          "access"
        ],
        "description": "Directory index.",
        "responses": "",
        "operationId": "getAccess"
      },
      "summary": "access"
    },
    "/access/acl": {
      "summary": "acl",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update Access Control List (add or remove permissions).",
        "operationId": "setAccessAcl",
        "requestBody": {
          "description": "Update Access Control List (add or remove permissions).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-AccessAcl-RB"
              }
            }
          }
        },
        "tags": [
          "access"
        ],
        "description": "Update Access Control List (add or remove permissions)."
      },
      "get": {
        "summary": "Get Access Control List (ACLs).",
        "tags": [
          "access"
        ],
        "description": "Get Access Control List (ACLs).",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessAcl"
                }
              }
            }
          }
        },
        "operationId": "getAccessAcl"
      }
    },
    "/access/domains": {
      "summary": "domains",
      "get": {
        "summary": "Authentication domain index.",
        "tags": [
          "access"
        ],
        "description": "Authentication domain index.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDomains"
                }
              }
            }
          }
        },
        "operationId": "getAccessDomains"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Add an authentication server.",
        "operationId": "newAccessDomains",
        "requestBody": {
          "description": "Add an authentication server.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-AccessDomains-RB"
              }
            }
          }
        },
        "tags": [
          "access"
        ],
        "description": "Add an authentication server."
      }
    },
    "/access/domains/{realm}": {
      "summary": "realm",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update authentication server settings.",
        "operationId": "setAccessDomainsByRealm",
        "parameter": [
          {
            "name": "realm",
            "in": "path",
            "description": "Authentication domain ID",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update authentication server settings.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-AccessDomains-RB"
              }
            }
          }
        },
        "tags": [
          "access"
        ],
        "description": "Update authentication server settings."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete an authentication server.",
        "operationId": "removeAccessDomainsByRealm",
        "parameter": [
          {
            "name": "realm",
            "in": "path",
            "description": "Authentication domain ID",
            "required": true
          }
        ],
        "tags": [
          "access"
        ],
        "description": "Delete an authentication server."
      },
      "get": {
        "responses": "",
        "summary": "Get auth server configuration.",
        "operationId": "getAccessDomainsByRealm",
        "parameter": [
          {
            "name": "realm",
            "in": "path",
            "description": "Authentication domain ID",
            "required": true
          }
        ],
        "tags": [
          "access"
        ],
        "description": "Get auth server configuration."
      }
    },
    "/access/domains/{realm}/sync": {
      "post": {
        "responses": "",
        "summary": "Syncs users and/or groups from the configured LDAP to user.cfg. NOTE: Synced groups will have the name 'name-$realm', so make sure those groups do not exist to prevent overwriting.",
        "operationId": "newAccessDomainsSyncByRealm",
        "parameter": [
          {
            "name": "realm",
            "in": "path",
            "description": "Authentication domain ID",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Syncs users and/or groups from the configured LDAP to user.cfg. NOTE: Synced groups will have the name 'name-$realm', so make sure those groups do not exist to prevent overwriting.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-AccessDomainsSync-RB"
              }
            }
          }
        },
        "tags": [
          "access"
        ],
        "description": "Syncs users and/or groups from the configured LDAP to user.cfg. NOTE: Synced groups will have the name 'name-$realm', so make sure those groups do not exist to prevent overwriting."
      },
      "summary": "sync"
    },
    "/access/groups": {
      "summary": "groups",
      "get": {
        "summary": "Group index.",
        "tags": [
          "access"
        ],
        "description": "Group index.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessGroups-GET"
                }
              }
            }
          }
        },
        "operationId": "getAccessGroups"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create new group.",
        "operationId": "newAccessGroups",
        "requestBody": {
          "description": "Create new group.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-AccessGroups-RB"
              }
            }
          }
        },
        "tags": [
          "access"
        ],
        "description": "Create new group."
      }
    },
    "/access/groups/{groupid}": {
      "summary": "groupid",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update group data.",
        "operationId": "setAccessGroupsByGroupid",
        "parameter": [
          {
            "name": "groupid",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update group data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-AccessGroups-RB"
              }
            }
          }
        },
        "tags": [
          "access"
        ],
        "description": "Update group data."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete group.",
        "operationId": "removeAccessGroupsByGroupid",
        "parameter": [
          {
            "name": "groupid",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "tags": [
          "access"
        ],
        "description": "Delete group."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessGroups"
                }
              }
            }
          }
        },
        "summary": "Get group configuration.",
        "operationId": "getAccessGroupsByGroupid",
        "parameter": [
          {
            "name": "groupid",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "tags": [
          "access"
        ],
        "description": "Get group configuration."
      }
    },
    "/access/openid": {
      "get": {
        "summary": "Directory index.",
        "tags": [
          "access"
        ],
        "description": "Directory index.",
        "responses": "",
        "operationId": "getAccessOpenid"
      },
      "summary": "openid"
    },
    "/access/openid/auth-url": {
      "post": {
        "responses": "",
        "summary": "Get the OpenId Authorization Url for the specified realm.",
        "operationId": "newAccessOpenidAuthurl",
        "requestBody": {
          "description": "Get the OpenId Authorization Url for the specified realm.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-AccessOpenidAuthurl-RB"
              }
            }
          }
        },
        "tags": [
          "access"
        ],
        "description": "Get the OpenId Authorization Url for the specified realm."
      },
      "summary": "auth-url"
    },
    "/access/openid/login": {
      "post": {
        "responses": "",
        "summary": " Verify OpenID authorization code and create a ticket.",
        "operationId": "newAccessOpenidLogin",
        "requestBody": {
          "description": " Verify OpenID authorization code and create a ticket.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-AccessOpenidLogin-RB"
              }
            }
          }
        },
        "tags": [
          "access"
        ],
        "description": " Verify OpenID authorization code and create a ticket."
      },
      "summary": "login"
    },
    "/access/password": {
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Change user password.",
        "operationId": "setAccessPassword",
        "requestBody": {
          "description": "Change user password.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-AccessPassword-RB"
              }
            }
          }
        },
        "tags": [
          "access"
        ],
        "description": "Change user password."
      },
      "summary": "password"
    },
    "/access/permissions": {
      "get": {
        "responses": "",
        "summary": "Retrieve effective permissions of given user/token.",
        "operationId": "getAccessPermissions",
        "requestBody": {
          "description": "Retrieve effective permissions of given user/token.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-AccessPermissions-RB"
              }
            }
          }
        },
        "tags": [
          "access"
        ],
        "description": "Retrieve effective permissions of given user/token."
      },
      "summary": "permissions"
    },
    "/access/roles": {
      "summary": "roles",
      "get": {
        "summary": "Role index.",
        "tags": [
          "access"
        ],
        "description": "Role index.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRoles-GET"
                }
              }
            }
          }
        },
        "operationId": "getAccessRoles"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create new role.",
        "operationId": "newAccessRoles",
        "requestBody": {
          "description": "Create new role.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-AccessRoles-RB"
              }
            }
          }
        },
        "tags": [
          "access"
        ],
        "description": "Create new role."
      }
    },
    "/access/roles/{roleid}": {
      "summary": "roleid",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update an existing role.",
        "operationId": "setAccessRolesByRoleid",
        "parameter": [
          {
            "name": "roleid",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update an existing role.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-AccessRoles-RB"
              }
            }
          }
        },
        "tags": [
          "access"
        ],
        "description": "Update an existing role."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete role.",
        "operationId": "removeAccessRolesByRoleid",
        "parameter": [
          {
            "name": "roleid",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "tags": [
          "access"
        ],
        "description": "Delete role."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRoles"
                }
              }
            }
          }
        },
        "summary": "Get role configuration.",
        "operationId": "getAccessRolesByRoleid",
        "parameter": [
          {
            "name": "roleid",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "tags": [
          "access"
        ],
        "description": "Get role configuration."
      }
    },
    "/access/tfa": {
      "get": {
        "summary": "List TFA configurations of users.",
        "tags": [
          "access"
        ],
        "description": "List TFA configurations of users.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTfa-GET"
                }
              }
            }
          }
        },
        "operationId": "getAccessTfa"
      },
      "summary": "tfa"
    },
    "/access/tfa/{userid}": {
      "summary": "userid",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTfa-GET-AV"
                }
              }
            }
          }
        },
        "summary": "List TFA configurations of users.",
        "operationId": "getAccessTfaByUserid",
        "parameter": [
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true
          }
        ],
        "tags": [
          "access"
        ],
        "description": "List TFA configurations of users."
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTfa"
                }
              }
            }
          }
        },
        "summary": "Add a TFA entry for a user.",
        "operationId": "newAccessTfaByUserid",
        "parameter": [
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Add a TFA entry for a user.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-AccessTfa-RB"
              }
            }
          }
        },
        "tags": [
          "access"
        ],
        "description": "Add a TFA entry for a user."
      }
    },
    "/access/tfa/{userid}/{id}": {
      "summary": "id",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Add a TFA entry for a user.",
        "operationId": "setAccessTfaByUseridAndId",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": "A TFA entry id.",
            "required": true
          },
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Add a TFA entry for a user.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-AccessTfa-RB"
              }
            }
          }
        },
        "tags": [
          "access"
        ],
        "description": "Add a TFA entry for a user."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete a TFA entry by ID.",
        "operationId": "removeAccessTfaByUseridAndId",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": "A TFA entry id.",
            "required": true
          },
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Delete a TFA entry by ID.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-AccessTfa-RB"
              }
            }
          }
        },
        "tags": [
          "access"
        ],
        "description": "Delete a TFA entry by ID."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTfa-GET"
                }
              }
            }
          }
        },
        "summary": "Fetch a requested TFA entry if present.",
        "operationId": "getAccessTfaByUseridAndId",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": "A TFA entry id.",
            "required": true
          },
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true
          }
        ],
        "tags": [
          "access"
        ],
        "description": "Fetch a requested TFA entry if present."
      }
    },
    "/access/ticket": {
      "summary": "ticket",
      "get": {
        "summary": "Dummy. Useful for formatters which want to provide a login page.",
        "tags": [
          "access"
        ],
        "description": "Dummy. Useful for formatters which want to provide a login page.",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "getAccessTicket"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTicket"
                }
              }
            }
          }
        },
        "summary": "Create or verify authentication ticket.",
        "operationId": "newAccessTicket",
        "requestBody": {
          "description": "Create or verify authentication ticket.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-AccessTicket-RB"
              }
            }
          }
        },
        "tags": [
          "access"
        ],
        "description": "Create or verify authentication ticket."
      }
    },
    "/access/users": {
      "summary": "users",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessUsers-GET"
                }
              }
            }
          }
        },
        "summary": "User index.",
        "operationId": "getAccessUsers",
        "requestBody": {
          "description": "User index.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-AccessUsers-RB"
              }
            }
          }
        },
        "tags": [
          "access"
        ],
        "description": "User index."
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create new user.",
        "operationId": "newAccessUsers",
        "requestBody": {
          "description": "Create new user.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-AccessUsers-RB"
              }
            }
          }
        },
        "tags": [
          "access"
        ],
        "description": "Create new user."
      }
    },
    "/access/users/{userid}": {
      "summary": "userid",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update user configuration.",
        "operationId": "setAccessUsersByUserid",
        "parameter": [
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update user configuration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-AccessUsers-RB"
              }
            }
          }
        },
        "tags": [
          "access"
        ],
        "description": "Update user configuration."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete user.",
        "operationId": "removeAccessUsersByUserid",
        "parameter": [
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true
          }
        ],
        "tags": [
          "access"
        ],
        "description": "Delete user."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessUsers"
                }
              }
            }
          }
        },
        "summary": "Get user configuration.",
        "operationId": "getAccessUsersByUserid",
        "parameter": [
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true
          }
        ],
        "tags": [
          "access"
        ],
        "description": "Get user configuration."
      }
    },
    "/access/users/{userid}/tfa": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessUsersTfa"
                }
              }
            }
          }
        },
        "summary": "Get user TFA types (Personal and Realm).",
        "operationId": "getAccessUsersTfaByUserid",
        "parameter": [
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Get user TFA types (Personal and Realm).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-AccessUsersTfa-RB"
              }
            }
          }
        },
        "tags": [
          "access"
        ],
        "description": "Get user TFA types (Personal and Realm)."
      },
      "summary": "tfa"
    },
    "/access/users/{userid}/token": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessUsersToken-GET"
                }
              }
            }
          }
        },
        "summary": "Get user API tokens.",
        "operationId": "getAccessUsersTokenByUserid",
        "parameter": [
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true
          }
        ],
        "tags": [
          "access"
        ],
        "description": "Get user API tokens."
      },
      "summary": "token"
    },
    "/access/users/{userid}/token/{tokenid}": {
      "summary": "tokenid",
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessUsersToken-PUT"
                }
              }
            }
          }
        },
        "summary": "Update API token for a specific user.",
        "operationId": "setAccessUsersTokenByUseridAndTokenid",
        "parameter": [
          {
            "name": "tokenid",
            "in": "path",
            "description": "User-specific token identifier.",
            "required": true
          },
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update API token for a specific user.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-AccessUsersToken-RB"
              }
            }
          }
        },
        "tags": [
          "access"
        ],
        "description": "Update API token for a specific user."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Remove API token for a specific user.",
        "operationId": "removeAccessUsersTokenByUseridAndTokenid",
        "parameter": [
          {
            "name": "tokenid",
            "in": "path",
            "description": "User-specific token identifier.",
            "required": true
          },
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true
          }
        ],
        "tags": [
          "access"
        ],
        "description": "Remove API token for a specific user."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessUsersToken"
                }
              }
            }
          }
        },
        "summary": "Get specific API token information.",
        "operationId": "getAccessUsersTokenByUseridAndTokenid",
        "parameter": [
          {
            "name": "tokenid",
            "in": "path",
            "description": "User-specific token identifier.",
            "required": true
          },
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true
          }
        ],
        "tags": [
          "access"
        ],
        "description": "Get specific API token information."
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessUsersToken-POST"
                }
              }
            }
          }
        },
        "summary": "Generate a new API token for a specific user. NOTE: returns API token value, which needs to be stored as it cannot be retrieved afterwards!",
        "operationId": "newAccessUsersTokenByUseridAndTokenid",
        "parameter": [
          {
            "name": "tokenid",
            "in": "path",
            "description": "User-specific token identifier.",
            "required": true
          },
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Generate a new API token for a specific user. NOTE: returns API token value, which needs to be stored as it cannot be retrieved afterwards!",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-AccessUsersToken-RB"
              }
            }
          }
        },
        "tags": [
          "access"
        ],
        "description": "Generate a new API token for a specific user. NOTE: returns API token value, which needs to be stored as it cannot be retrieved afterwards!"
      }
    },
    "/access/users/{userid}/unlock-tfa": {
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessUsersUnlocktfa"
                }
              }
            }
          }
        },
        "summary": "Unlock a user's TFA authentication.",
        "operationId": "setAccessUsersUnlocktfaByUserid",
        "parameter": [
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true
          }
        ],
        "tags": [
          "access"
        ],
        "description": "Unlock a user's TFA authentication."
      },
      "summary": "unlock-tfa"
    },
    "/cluster": {
      "get": {
        "summary": "Cluster index.",
        "tags": [
          "cluster"
        ],
        "description": "Cluster index.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cluster"
                }
              }
            }
          }
        },
        "operationId": "getCluster"
      },
      "summary": "cluster"
    },
    "/cluster/acme": {
      "get": {
        "summary": "ACMEAccount index.",
        "tags": [
          "cluster"
        ],
        "description": "ACMEAccount index.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterAcme"
                }
              }
            }
          }
        },
        "operationId": "getClusterAcme"
      },
      "summary": "acme"
    },
    "/cluster/acme/account": {
      "summary": "account",
      "get": {
        "summary": "ACMEAccount index.",
        "tags": [
          "cluster"
        ],
        "description": "ACMEAccount index.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterAcmeAccount-GET"
                }
              }
            }
          }
        },
        "operationId": "getClusterAcmeAccount"
      },
      "post": {
        "responses": "",
        "summary": "Register a new ACME account with CA.",
        "operationId": "newClusterAcmeAccount",
        "requestBody": {
          "description": "Register a new ACME account with CA.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterAcmeAccount-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Register a new ACME account with CA."
      }
    },
    "/cluster/acme/account/{name}": {
      "summary": "name",
      "put": {
        "responses": "",
        "summary": "Update existing ACME account information with CA. Note: not specifying any new account information triggers a refresh.",
        "operationId": "setClusterAcmeAccountByName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "ACME account config file name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update existing ACME account information with CA. Note: not specifying any new account information triggers a refresh.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterAcmeAccount-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Update existing ACME account information with CA. Note: not specifying any new account information triggers a refresh."
      },
      "delete": {
        "responses": "",
        "summary": "Deactivate existing ACME account at CA.",
        "operationId": "removeClusterAcmeAccountByName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "ACME account config file name.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Deactivate existing ACME account at CA."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterAcmeAccount"
                }
              }
            }
          }
        },
        "summary": "Return existing ACME account information.",
        "operationId": "getClusterAcmeAccountByName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "ACME account config file name.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Return existing ACME account information."
      }
    },
    "/cluster/acme/challenge-schema": {
      "get": {
        "summary": "Get schema of ACME challenge types.",
        "tags": [
          "cluster"
        ],
        "description": "Get schema of ACME challenge types.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterAcmeChallengeschema"
                }
              }
            }
          }
        },
        "operationId": "getClusterAcmeChallengeschema"
      },
      "summary": "challenge-schema"
    },
    "/cluster/acme/directories": {
      "get": {
        "summary": "Get named known ACME directory endpoints.",
        "tags": [
          "cluster"
        ],
        "description": "Get named known ACME directory endpoints.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterAcmeDirectories"
                }
              }
            }
          }
        },
        "operationId": "getClusterAcmeDirectories"
      },
      "summary": "directories"
    },
    "/cluster/acme/meta": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterAcmeMeta"
                }
              }
            }
          }
        },
        "summary": "Retrieve ACME Directory Meta Information",
        "operationId": "getClusterAcmeMeta",
        "requestBody": {
          "description": "Retrieve ACME Directory Meta Information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-ClusterAcmeMeta-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Retrieve ACME Directory Meta Information"
      },
      "summary": "meta"
    },
    "/cluster/acme/plugins": {
      "summary": "plugins",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterAcmePlugins"
                }
              }
            }
          }
        },
        "summary": "ACME plugin index.",
        "operationId": "getClusterAcmePlugins",
        "requestBody": {
          "description": "ACME plugin index.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-ClusterAcmePlugins-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "ACME plugin index."
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Add ACME plugin configuration.",
        "operationId": "newClusterAcmePlugins",
        "requestBody": {
          "description": "Add ACME plugin configuration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterAcmePlugins-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Add ACME plugin configuration."
      }
    },
    "/cluster/acme/plugins/{id}": {
      "summary": "id",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update ACME plugin configuration.",
        "operationId": "setClusterAcmePluginsById",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": "ACME Plugin ID name",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update ACME plugin configuration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterAcmePlugins-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Update ACME plugin configuration."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete ACME plugin configuration.",
        "operationId": "removeClusterAcmePluginsById",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for ACME plugin instance.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Delete ACME plugin configuration."
      },
      "get": {
        "responses": "",
        "summary": "Get ACME plugin configuration.",
        "operationId": "getClusterAcmePluginsById",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for ACME plugin instance.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Get ACME plugin configuration."
      }
    },
    "/cluster/acme/tos": {
      "get": {
        "responses": "",
        "summary": "Retrieve ACME TermsOfService URL from CA. Deprecated, please use /cluster/acme/meta.",
        "operationId": "getClusterAcmeTos",
        "requestBody": {
          "description": "Retrieve ACME TermsOfService URL from CA. Deprecated, please use /cluster/acme/meta.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-ClusterAcmeTos-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Retrieve ACME TermsOfService URL from CA. Deprecated, please use /cluster/acme/meta."
      },
      "summary": "tos"
    },
    "/cluster/backup": {
      "summary": "backup",
      "get": {
        "summary": "List vzdump backup schedule.",
        "tags": [
          "cluster"
        ],
        "description": "List vzdump backup schedule.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterBackup"
                }
              }
            }
          }
        },
        "operationId": "getClusterBackup"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create new vzdump backup job.",
        "operationId": "newClusterBackup",
        "requestBody": {
          "description": "Create new vzdump backup job.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterBackup-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create new vzdump backup job."
      }
    },
    "/cluster/backup-info": {
      "get": {
        "summary": "Index for backup info related endpoints",
        "tags": [
          "cluster"
        ],
        "description": "Index for backup info related endpoints",
        "responses": "",
        "operationId": "getClusterBackupinfo"
      },
      "summary": "backup-info"
    },
    "/cluster/backup-info/not-backed-up": {
      "get": {
        "summary": "Shows all guests which are not covered by any backup job.",
        "tags": [
          "cluster"
        ],
        "description": "Shows all guests which are not covered by any backup job.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterBackupinfoNotbackedup"
                }
              }
            }
          }
        },
        "operationId": "getClusterBackupinfoNotbackedup"
      },
      "summary": "not-backed-up"
    },
    "/cluster/backup/{id}": {
      "summary": "id",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update vzdump backup job definition.",
        "operationId": "setClusterBackupById",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": "The job ID.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update vzdump backup job definition.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterBackup-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Update vzdump backup job definition."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete vzdump backup job definition.",
        "operationId": "removeClusterBackupById",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": "The job ID.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Delete vzdump backup job definition."
      },
      "get": {
        "responses": "",
        "summary": "Read vzdump backup job definition.",
        "operationId": "getClusterBackupById",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": "The job ID.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Read vzdump backup job definition."
      }
    },
    "/cluster/backup/{id}/included_volumes": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterBackupIncludedvolumes"
                }
              }
            }
          }
        },
        "summary": "Returns included guests and the backup status of their disks. Optimized to be used in ExtJS tree views.",
        "operationId": "getClusterBackupIncludedvolumesById",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": "The job ID.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Returns included guests and the backup status of their disks. Optimized to be used in ExtJS tree views."
      },
      "summary": "includedvolumes"
    },
    "/cluster/ceph": {
      "get": {
        "summary": "Cluster ceph index.",
        "tags": [
          "cluster"
        ],
        "description": "Cluster ceph index.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterCeph"
                }
              }
            }
          }
        },
        "operationId": "getClusterCeph"
      },
      "summary": "ceph"
    },
    "/cluster/ceph/flags": {
      "summary": "flags",
      "put": {
        "responses": "",
        "summary": "Set/Unset multiple ceph flags at once.",
        "operationId": "setClusterCephFlags",
        "requestBody": {
          "description": "Set/Unset multiple ceph flags at once.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterCephFlags-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Set/Unset multiple ceph flags at once."
      },
      "get": {
        "summary": "get the status of all ceph flags",
        "tags": [
          "cluster"
        ],
        "description": "get the status of all ceph flags",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterCephFlags"
                }
              }
            }
          }
        },
        "operationId": "getClusterCephFlags"
      }
    },
    "/cluster/ceph/flags/{flag}": {
      "summary": "flag",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Set or clear (unset) a specific ceph flag",
        "operationId": "setClusterCephFlagsByFlag",
        "parameter": [
          {
            "name": "flag",
            "in": "path",
            "description": "The ceph flag to update",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Set or clear (unset) a specific ceph flag",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterCephFlags-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Set or clear (unset) a specific ceph flag"
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterCephFlags-GET"
                }
              }
            }
          }
        },
        "summary": "Get the status of a specific ceph flag.",
        "operationId": "getClusterCephFlagsByFlag",
        "parameter": [
          {
            "name": "flag",
            "in": "path",
            "description": "The name of the flag name to get.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Get the status of a specific ceph flag."
      }
    },
    "/cluster/ceph/metadata": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterCephMetadata"
                }
              }
            }
          }
        },
        "summary": "Get ceph metadata.",
        "operationId": "getClusterCephMetadata",
        "requestBody": {
          "description": "Get ceph metadata.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-ClusterCephMetadata-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Get ceph metadata."
      },
      "summary": "metadata"
    },
    "/cluster/ceph/status": {
      "get": {
        "summary": "Get ceph status.",
        "tags": [
          "cluster"
        ],
        "description": "Get ceph status.",
        "responses": "",
        "operationId": "getClusterCephStatus"
      },
      "summary": "status"
    },
    "/cluster/config": {
      "summary": "config",
      "get": {
        "summary": "Directory index.",
        "tags": [
          "cluster"
        ],
        "description": "Directory index.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterConfig"
                }
              }
            }
          }
        },
        "operationId": "getClusterConfig"
      },
      "post": {
        "responses": "",
        "summary": "Generate new cluster configuration. If no links given, default to local IP address as link0.",
        "operationId": "newClusterConfig",
        "requestBody": {
          "description": "Generate new cluster configuration. If no links given, default to local IP address as link0.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterConfig-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Generate new cluster configuration. If no links given, default to local IP address as link0."
      }
    },
    "/cluster/config/apiversion": {
      "get": {
        "summary": "Return the version of the cluster join API available on this node.",
        "tags": [
          "cluster"
        ],
        "description": "Return the version of the cluster join API available on this node.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterConfigApiversion"
                }
              }
            }
          }
        },
        "operationId": "getClusterConfigApiversion"
      },
      "summary": "apiversion"
    },
    "/cluster/config/join": {
      "summary": "join",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterConfigJoin"
                }
              }
            }
          }
        },
        "summary": "Get information needed to join this cluster over the connected node.",
        "operationId": "getClusterConfigJoin",
        "requestBody": {
          "description": "Get information needed to join this cluster over the connected node.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-ClusterConfigJoin-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Get information needed to join this cluster over the connected node."
      },
      "post": {
        "responses": "",
        "summary": "Joins this node into an existing cluster. If no links are given, default to IP resolved by node's hostname on single link (fallback fails for clusters with multiple links).",
        "operationId": "newClusterConfigJoin",
        "requestBody": {
          "description": "Joins this node into an existing cluster. If no links are given, default to IP resolved by node's hostname on single link (fallback fails for clusters with multiple links).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterConfigJoin-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Joins this node into an existing cluster. If no links are given, default to IP resolved by node's hostname on single link (fallback fails for clusters with multiple links)."
      }
    },
    "/cluster/config/nodes": {
      "get": {
        "summary": "Corosync node list.",
        "tags": [
          "cluster"
        ],
        "description": "Corosync node list.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterConfigNodes-GET"
                }
              }
            }
          }
        },
        "operationId": "getClusterConfigNodes"
      },
      "summary": "nodes"
    },
    "/cluster/config/nodes/{node}": {
      "summary": "node",
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Removes a node from the cluster configuration.",
        "operationId": "removeClusterConfigNodesByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Removes a node from the cluster configuration."
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterConfigNodes"
                }
              }
            }
          }
        },
        "summary": "Adds a node to the cluster configuration. This call is for internal use.",
        "operationId": "newClusterConfigNodesByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Adds a node to the cluster configuration. This call is for internal use.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterConfigNodes-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Adds a node to the cluster configuration. This call is for internal use."
      }
    },
    "/cluster/config/qdevice": {
      "get": {
        "summary": "Get QDevice status",
        "tags": [
          "cluster"
        ],
        "description": "Get QDevice status",
        "responses": "",
        "operationId": "getClusterConfigQdevice"
      },
      "summary": "qdevice"
    },
    "/cluster/config/totem": {
      "get": {
        "summary": "Get corosync totem protocol settings.",
        "tags": [
          "cluster"
        ],
        "description": "Get corosync totem protocol settings.",
        "responses": "",
        "operationId": "getClusterConfigTotem"
      },
      "summary": "totem"
    },
    "/cluster/firewall": {
      "get": {
        "summary": "Directory index.",
        "tags": [
          "cluster"
        ],
        "description": "Directory index.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterFirewall"
                }
              }
            }
          }
        },
        "operationId": "getClusterFirewall"
      },
      "summary": "firewall"
    },
    "/cluster/firewall/aliases": {
      "summary": "aliases",
      "get": {
        "summary": "List aliases",
        "tags": [
          "cluster"
        ],
        "description": "List aliases",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterFirewallAliases"
                }
              }
            }
          }
        },
        "operationId": "getClusterFirewallAliases"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create IP or Network Alias.",
        "operationId": "newClusterFirewallAliases",
        "requestBody": {
          "description": "Create IP or Network Alias.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterFirewallAliases-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create IP or Network Alias."
      }
    },
    "/cluster/firewall/aliases/{name}": {
      "summary": "name",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update IP or Network alias.",
        "operationId": "setClusterFirewallAliasesByName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "Alias name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update IP or Network alias.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterFirewallAliases-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Update IP or Network alias."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Remove IP or Network alias.",
        "operationId": "removeClusterFirewallAliasesByName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "Alias name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Remove IP or Network alias.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-ClusterFirewallAliases-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Remove IP or Network alias."
      },
      "get": {
        "responses": "",
        "summary": "Read alias.",
        "operationId": "getClusterFirewallAliasesByName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "Alias name.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Read alias."
      }
    },
    "/cluster/firewall/groups": {
      "summary": "groups",
      "get": {
        "summary": "List security groups.",
        "tags": [
          "cluster"
        ],
        "description": "List security groups.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterFirewallGroups-GET"
                }
              }
            }
          }
        },
        "operationId": "getClusterFirewallGroups"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create new security group.",
        "operationId": "newClusterFirewallGroups",
        "requestBody": {
          "description": "Create new security group.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterFirewallGroups-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create new security group."
      }
    },
    "/cluster/firewall/groups/{group}": {
      "summary": "group",
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete security group.",
        "operationId": "removeClusterFirewallGroupsByGroup",
        "parameter": [
          {
            "name": "group",
            "in": "path",
            "description": "Security Group name.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Delete security group."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterFirewallGroups-GET-AV"
                }
              }
            }
          }
        },
        "summary": "List rules.",
        "operationId": "getClusterFirewallGroupsByGroup",
        "parameter": [
          {
            "name": "group",
            "in": "path",
            "description": "Security Group name.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "List rules."
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create new rule.",
        "operationId": "newClusterFirewallGroupsByGroup",
        "parameter": [
          {
            "name": "group",
            "in": "path",
            "description": "Security Group name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create new rule.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterFirewallGroups-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create new rule."
      }
    },
    "/cluster/firewall/groups/{group}/{pos}": {
      "summary": "pos",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Modify rule data.",
        "operationId": "setClusterFirewallGroupsByGroupAndPos",
        "parameter": [
          {
            "name": "group",
            "in": "path",
            "description": "Security Group name.",
            "required": true
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Modify rule data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterFirewallGroups-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Modify rule data."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete rule.",
        "operationId": "removeClusterFirewallGroupsByGroupAndPos",
        "parameter": [
          {
            "name": "group",
            "in": "path",
            "description": "Security Group name.",
            "required": true
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Delete rule.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-ClusterFirewallGroups-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Delete rule."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterFirewallGroups"
                }
              }
            }
          }
        },
        "summary": "Get single rule data.",
        "operationId": "getClusterFirewallGroupsByGroupAndPos",
        "parameter": [
          {
            "name": "group",
            "in": "path",
            "description": "Security Group name.",
            "required": true
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Get single rule data."
      }
    },
    "/cluster/firewall/ipset": {
      "summary": "ipset",
      "get": {
        "summary": "List IPSets",
        "tags": [
          "cluster"
        ],
        "description": "List IPSets",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterFirewallIpset"
                }
              }
            }
          }
        },
        "operationId": "getClusterFirewallIpset"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create new IPSet",
        "operationId": "newClusterFirewallIpset",
        "requestBody": {
          "description": "Create new IPSet",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterFirewallIpset-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create new IPSet"
      }
    },
    "/cluster/firewall/ipset/{name}": {
      "summary": "name",
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete IPSet",
        "operationId": "removeClusterFirewallIpsetByName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Delete IPSet",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-ClusterFirewallIpset-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Delete IPSet"
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterFirewallIpset-GET"
                }
              }
            }
          }
        },
        "summary": "List IPSet content",
        "operationId": "getClusterFirewallIpsetByName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "List IPSet content"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Add IP or Network to IPSet.",
        "operationId": "newClusterFirewallIpsetByName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Add IP or Network to IPSet.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterFirewallIpset-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Add IP or Network to IPSet."
      }
    },
    "/cluster/firewall/ipset/{name}/{cidr}": {
      "summary": "cidr",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update IP or Network settings",
        "operationId": "setClusterFirewallIpsetByNameAndCidr",
        "parameter": [
          {
            "name": "cidr",
            "in": "path",
            "description": "Network/IP specification in CIDR format.",
            "required": true
          },
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update IP or Network settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterFirewallIpset-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Update IP or Network settings"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Remove IP or Network from IPSet.",
        "operationId": "removeClusterFirewallIpsetByNameAndCidr",
        "parameter": [
          {
            "name": "cidr",
            "in": "path",
            "description": "Network/IP specification in CIDR format.",
            "required": true
          },
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Remove IP or Network from IPSet.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-ClusterFirewallIpset-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Remove IP or Network from IPSet."
      },
      "get": {
        "responses": "",
        "summary": "Read IP or Network settings from IPSet.",
        "operationId": "getClusterFirewallIpsetByNameAndCidr",
        "parameter": [
          {
            "name": "cidr",
            "in": "path",
            "description": "Network/IP specification in CIDR format.",
            "required": true
          },
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Read IP or Network settings from IPSet."
      }
    },
    "/cluster/firewall/macros": {
      "get": {
        "summary": "List available macros",
        "tags": [
          "cluster"
        ],
        "description": "List available macros",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterFirewallMacros"
                }
              }
            }
          }
        },
        "operationId": "getClusterFirewallMacros"
      },
      "summary": "macros"
    },
    "/cluster/firewall/options": {
      "summary": "options",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Set Firewall options.",
        "operationId": "setClusterFirewallOptions",
        "requestBody": {
          "description": "Set Firewall options.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterFirewallOptions-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Set Firewall options."
      },
      "get": {
        "summary": "Get Firewall options.",
        "tags": [
          "cluster"
        ],
        "description": "Get Firewall options.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterFirewallOptions"
                }
              }
            }
          }
        },
        "operationId": "getClusterFirewallOptions"
      }
    },
    "/cluster/firewall/refs": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterFirewallRefs"
                }
              }
            }
          }
        },
        "summary": "Lists possible IPSet/Alias reference which are allowed in source/dest properties.",
        "operationId": "getClusterFirewallRefs",
        "requestBody": {
          "description": "Lists possible IPSet/Alias reference which are allowed in source/dest properties.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-ClusterFirewallRefs-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Lists possible IPSet/Alias reference which are allowed in source/dest properties."
      },
      "summary": "refs"
    },
    "/cluster/firewall/rules": {
      "summary": "rules",
      "get": {
        "summary": "List rules.",
        "tags": [
          "cluster"
        ],
        "description": "List rules.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterFirewallRules-GET"
                }
              }
            }
          }
        },
        "operationId": "getClusterFirewallRules"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create new rule.",
        "operationId": "newClusterFirewallRules",
        "requestBody": {
          "description": "Create new rule.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterFirewallRules-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create new rule."
      }
    },
    "/cluster/firewall/rules/{pos}": {
      "summary": "pos",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Modify rule data.",
        "operationId": "setClusterFirewallRulesByPos",
        "parameter": [
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Modify rule data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterFirewallRules-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Modify rule data."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete rule.",
        "operationId": "removeClusterFirewallRulesByPos",
        "parameter": [
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Delete rule.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-ClusterFirewallRules-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Delete rule."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterFirewallRules"
                }
              }
            }
          }
        },
        "summary": "Get single rule data.",
        "operationId": "getClusterFirewallRulesByPos",
        "parameter": [
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Get single rule data."
      }
    },
    "/cluster/ha": {
      "get": {
        "summary": "Directory index.",
        "tags": [
          "cluster"
        ],
        "description": "Directory index.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterHa"
                }
              }
            }
          }
        },
        "operationId": "getClusterHa"
      },
      "summary": "ha"
    },
    "/cluster/ha/groups": {
      "summary": "groups",
      "get": {
        "summary": "Get HA groups.",
        "tags": [
          "cluster"
        ],
        "description": "Get HA groups.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterHaGroups"
                }
              }
            }
          }
        },
        "operationId": "getClusterHaGroups"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create a new HA group.",
        "operationId": "newClusterHaGroups",
        "requestBody": {
          "description": "Create a new HA group.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterHaGroups-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create a new HA group."
      }
    },
    "/cluster/ha/groups/{group}": {
      "summary": "group",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update ha group configuration.",
        "operationId": "setClusterHaGroupsByGroup",
        "parameter": [
          {
            "name": "group",
            "in": "path",
            "description": "The HA group identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update ha group configuration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterHaGroups-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Update ha group configuration."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete ha group configuration.",
        "operationId": "removeClusterHaGroupsByGroup",
        "parameter": [
          {
            "name": "group",
            "in": "path",
            "description": "The HA group identifier.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Delete ha group configuration."
      },
      "get": {
        "responses": "",
        "summary": "Read ha group configuration.",
        "operationId": "getClusterHaGroupsByGroup",
        "parameter": [
          {
            "name": "group",
            "in": "path",
            "description": "The HA group identifier.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Read ha group configuration."
      }
    },
    "/cluster/ha/resources": {
      "summary": "resources",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterHaResources-GET"
                }
              }
            }
          }
        },
        "summary": "List HA resources.",
        "operationId": "getClusterHaResources",
        "requestBody": {
          "description": "List HA resources.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-ClusterHaResources-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "List HA resources."
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create a new HA resource.",
        "operationId": "newClusterHaResources",
        "requestBody": {
          "description": "Create a new HA resource.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterHaResources-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create a new HA resource."
      }
    },
    "/cluster/ha/resources/{sid}": {
      "summary": "sid",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update resource configuration.",
        "operationId": "setClusterHaResourcesBySid",
        "parameter": [
          {
            "name": "sid",
            "in": "path",
            "description": "HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100).",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update resource configuration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterHaResources-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Update resource configuration."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete resource configuration.",
        "operationId": "removeClusterHaResourcesBySid",
        "parameter": [
          {
            "name": "sid",
            "in": "path",
            "description": "HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100).",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Delete resource configuration."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterHaResources"
                }
              }
            }
          }
        },
        "summary": "Read resource configuration.",
        "operationId": "getClusterHaResourcesBySid",
        "parameter": [
          {
            "name": "sid",
            "in": "path",
            "description": "HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100).",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Read resource configuration."
      }
    },
    "/cluster/ha/resources/{sid}/migrate": {
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Request resource migration (online) to another node.",
        "operationId": "newClusterHaResourcesMigrateBySid",
        "parameter": [
          {
            "name": "sid",
            "in": "path",
            "description": "HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100).",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Request resource migration (online) to another node.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterHaResourcesMigrate-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Request resource migration (online) to another node."
      },
      "summary": "migrate"
    },
    "/cluster/ha/resources/{sid}/relocate": {
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Request resource relocatzion to another node. This stops the service on the old node, and restarts it on the target node.",
        "operationId": "newClusterHaResourcesRelocateBySid",
        "parameter": [
          {
            "name": "sid",
            "in": "path",
            "description": "HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100).",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Request resource relocatzion to another node. This stops the service on the old node, and restarts it on the target node.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterHaResourcesRelocate-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Request resource relocatzion to another node. This stops the service on the old node, and restarts it on the target node."
      },
      "summary": "relocate"
    },
    "/cluster/ha/status": {
      "get": {
        "summary": "Directory index.",
        "tags": [
          "cluster"
        ],
        "description": "Directory index.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterHaStatus"
                }
              }
            }
          }
        },
        "operationId": "getClusterHaStatus"
      },
      "summary": "status"
    },
    "/cluster/ha/status/current": {
      "get": {
        "summary": "Get HA manger status.",
        "tags": [
          "cluster"
        ],
        "description": "Get HA manger status.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterHaStatusCurrent"
                }
              }
            }
          }
        },
        "operationId": "getClusterHaStatusCurrent"
      },
      "summary": "current"
    },
    "/cluster/ha/status/manager_status": {
      "get": {
        "summary": "Get full HA manger status, including LRM status.",
        "tags": [
          "cluster"
        ],
        "description": "Get full HA manger status, including LRM status.",
        "responses": "",
        "operationId": "getClusterHaStatusManagerstatus"
      },
      "summary": "managerstatus"
    },
    "/cluster/jobs": {
      "get": {
        "summary": "Index for jobs related endpoints.",
        "tags": [
          "cluster"
        ],
        "description": "Index for jobs related endpoints.",
        "responses": "",
        "operationId": "getClusterJobs"
      },
      "summary": "jobs"
    },
    "/cluster/jobs/realm-sync": {
      "get": {
        "summary": "List configured realm-sync-jobs.",
        "tags": [
          "cluster"
        ],
        "description": "List configured realm-sync-jobs.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterJobsRealmsync"
                }
              }
            }
          }
        },
        "operationId": "getClusterJobsRealmsync"
      },
      "summary": "realm-sync"
    },
    "/cluster/jobs/realm-sync/{id}": {
      "summary": "id",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update realm-sync job definition.",
        "operationId": "setClusterJobsRealmsyncById",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the job.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update realm-sync job definition.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterJobsRealmsync-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Update realm-sync job definition."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete realm-sync job definition.",
        "operationId": "removeClusterJobsRealmsyncById",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Delete realm-sync job definition."
      },
      "get": {
        "responses": "",
        "summary": "Read realm-sync job definition.",
        "operationId": "getClusterJobsRealmsyncById",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Read realm-sync job definition."
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create new realm-sync job.",
        "operationId": "newClusterJobsRealmsyncById",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the job.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create new realm-sync job.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterJobsRealmsync-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create new realm-sync job."
      }
    },
    "/cluster/jobs/schedule-analyze": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterJobsScheduleanalyze"
                }
              }
            }
          }
        },
        "summary": "Returns a list of future schedule runtimes.",
        "operationId": "getClusterJobsScheduleanalyze",
        "requestBody": {
          "description": "Returns a list of future schedule runtimes.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-ClusterJobsScheduleanalyze-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Returns a list of future schedule runtimes."
      },
      "summary": "schedule-analyze"
    },
    "/cluster/log": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterLog"
                }
              }
            }
          }
        },
        "summary": "Read cluster log",
        "operationId": "getClusterLog",
        "requestBody": {
          "description": "Read cluster log",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-ClusterLog-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Read cluster log"
      },
      "summary": "log"
    },
    "/cluster/mapping": {
      "get": {
        "summary": "List resource types.",
        "tags": [
          "cluster"
        ],
        "description": "List resource types.",
        "responses": "",
        "operationId": "getClusterMapping"
      },
      "summary": "mapping"
    },
    "/cluster/mapping/pci": {
      "summary": "pci",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterMappingPci"
                }
              }
            }
          }
        },
        "summary": "List PCI Hardware Mapping",
        "operationId": "getClusterMappingPci",
        "requestBody": {
          "description": "List PCI Hardware Mapping",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-ClusterMappingPci-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "List PCI Hardware Mapping"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create a new hardware mapping.",
        "operationId": "newClusterMappingPci",
        "requestBody": {
          "description": "Create a new hardware mapping.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterMappingPci-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create a new hardware mapping."
      }
    },
    "/cluster/mapping/pci/{id}": {
      "summary": "id",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update a hardware mapping.",
        "operationId": "setClusterMappingPciById",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the logical PCI mapping.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update a hardware mapping.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterMappingPci-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Update a hardware mapping."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Remove Hardware Mapping.",
        "operationId": "removeClusterMappingPciById",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Remove Hardware Mapping."
      },
      "get": {
        "responses": "",
        "summary": "Get PCI Mapping.",
        "operationId": "getClusterMappingPciById",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Get PCI Mapping."
      }
    },
    "/cluster/mapping/usb": {
      "summary": "usb",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterMappingUsb"
                }
              }
            }
          }
        },
        "summary": "List USB Hardware Mappings",
        "operationId": "getClusterMappingUsb",
        "requestBody": {
          "description": "List USB Hardware Mappings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-ClusterMappingUsb-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "List USB Hardware Mappings"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create a new hardware mapping.",
        "operationId": "newClusterMappingUsb",
        "requestBody": {
          "description": "Create a new hardware mapping.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterMappingUsb-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create a new hardware mapping."
      }
    },
    "/cluster/mapping/usb/{id}": {
      "summary": "id",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update a hardware mapping.",
        "operationId": "setClusterMappingUsbById",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the logical USB mapping.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update a hardware mapping.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterMappingUsb-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Update a hardware mapping."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Remove Hardware Mapping.",
        "operationId": "removeClusterMappingUsbById",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Remove Hardware Mapping."
      },
      "get": {
        "responses": "",
        "summary": "Get USB Mapping.",
        "operationId": "getClusterMappingUsbById",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Get USB Mapping."
      }
    },
    "/cluster/metrics": {
      "get": {
        "summary": "Metrics index.",
        "tags": [
          "cluster"
        ],
        "description": "Metrics index.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterMetrics"
                }
              }
            }
          }
        },
        "operationId": "getClusterMetrics"
      },
      "summary": "metrics"
    },
    "/cluster/metrics/export": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterMetricsExport"
                }
              }
            }
          }
        },
        "summary": "Retrieve metrics of the cluster.",
        "operationId": "getClusterMetricsExport",
        "requestBody": {
          "description": "Retrieve metrics of the cluster.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-ClusterMetricsExport-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Retrieve metrics of the cluster."
      },
      "summary": "export"
    },
    "/cluster/metrics/server": {
      "get": {
        "summary": "List configured metric servers.",
        "tags": [
          "cluster"
        ],
        "description": "List configured metric servers.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterMetricsServer"
                }
              }
            }
          }
        },
        "operationId": "getClusterMetricsServer"
      },
      "summary": "server"
    },
    "/cluster/metrics/server/{id}": {
      "summary": "id",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update metric server configuration.",
        "operationId": "setClusterMetricsServerById",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the entry.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update metric server configuration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterMetricsServer-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Update metric server configuration."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Remove Metric server.",
        "operationId": "removeClusterMetricsServerById",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Remove Metric server."
      },
      "get": {
        "responses": "",
        "summary": "Read metric server configuration.",
        "operationId": "getClusterMetricsServerById",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Read metric server configuration."
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create a new external metric server config",
        "operationId": "newClusterMetricsServerById",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the entry.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create a new external metric server config",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterMetricsServer-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create a new external metric server config"
      }
    },
    "/cluster/nextid": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterNextid"
                }
              }
            }
          }
        },
        "summary": "Get next free VMID. Pass a VMID to assert that its free (at time of check).",
        "operationId": "getClusterNextid",
        "requestBody": {
          "description": "Get next free VMID. Pass a VMID to assert that its free (at time of check).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-ClusterNextid-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Get next free VMID. Pass a VMID to assert that its free (at time of check)."
      },
      "summary": "nextid"
    },
    "/cluster/notifications": {
      "get": {
        "summary": "Index for notification-related API endpoints.",
        "tags": [
          "cluster"
        ],
        "description": "Index for notification-related API endpoints.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterNotifications"
                }
              }
            }
          }
        },
        "operationId": "getClusterNotifications"
      },
      "summary": "notifications"
    },
    "/cluster/notifications/endpoints": {
      "get": {
        "summary": "Index for all available endpoint types.",
        "tags": [
          "cluster"
        ],
        "description": "Index for all available endpoint types.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterNotificationsEndpoints"
                }
              }
            }
          }
        },
        "operationId": "getClusterNotificationsEndpoints"
      },
      "summary": "endpoints"
    },
    "/cluster/notifications/endpoints/gotify": {
      "summary": "gotify",
      "get": {
        "summary": "Returns a list of all gotify endpoints",
        "tags": [
          "cluster"
        ],
        "description": "Returns a list of all gotify endpoints",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterNotificationsEndpointsGotify-GET"
                }
              }
            }
          }
        },
        "operationId": "getClusterNotificationsEndpointsGotify"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create a new gotify endpoint",
        "operationId": "newClusterNotificationsEndpointsGotify",
        "requestBody": {
          "description": "Create a new gotify endpoint",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterNotificationsEndpointsGotify-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create a new gotify endpoint"
      }
    },
    "/cluster/notifications/endpoints/gotify/{name}": {
      "summary": "name",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update existing gotify endpoint",
        "operationId": "setClusterNotificationsEndpointsGotifyByName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the endpoint.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update existing gotify endpoint",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterNotificationsEndpointsGotify-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Update existing gotify endpoint"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Remove gotify endpoint",
        "operationId": "removeClusterNotificationsEndpointsGotifyByName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Remove gotify endpoint"
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterNotificationsEndpointsGotify"
                }
              }
            }
          }
        },
        "summary": "Return a specific gotify endpoint",
        "operationId": "getClusterNotificationsEndpointsGotifyByName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the endpoint.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Return a specific gotify endpoint"
      }
    },
    "/cluster/notifications/endpoints/sendmail": {
      "summary": "sendmail",
      "get": {
        "summary": "Returns a list of all sendmail endpoints",
        "tags": [
          "cluster"
        ],
        "description": "Returns a list of all sendmail endpoints",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterNotificationsEndpointsSendmail-GET"
                }
              }
            }
          }
        },
        "operationId": "getClusterNotificationsEndpointsSendmail"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create a new sendmail endpoint",
        "operationId": "newClusterNotificationsEndpointsSendmail",
        "requestBody": {
          "description": "Create a new sendmail endpoint",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterNotificationsEndpointsSendmail-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create a new sendmail endpoint"
      }
    },
    "/cluster/notifications/endpoints/sendmail/{name}": {
      "summary": "name",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update existing sendmail endpoint",
        "operationId": "setClusterNotificationsEndpointsSendmailByName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the endpoint.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update existing sendmail endpoint",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterNotificationsEndpointsSendmail-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Update existing sendmail endpoint"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Remove sendmail endpoint",
        "operationId": "removeClusterNotificationsEndpointsSendmailByName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Remove sendmail endpoint"
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterNotificationsEndpointsSendmail"
                }
              }
            }
          }
        },
        "summary": "Return a specific sendmail endpoint",
        "operationId": "getClusterNotificationsEndpointsSendmailByName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Return a specific sendmail endpoint"
      }
    },
    "/cluster/notifications/endpoints/smtp": {
      "summary": "smtp",
      "get": {
        "summary": "Returns a list of all smtp endpoints",
        "tags": [
          "cluster"
        ],
        "description": "Returns a list of all smtp endpoints",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterNotificationsEndpointsSmtp-GET"
                }
              }
            }
          }
        },
        "operationId": "getClusterNotificationsEndpointsSmtp"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create a new smtp endpoint",
        "operationId": "newClusterNotificationsEndpointsSmtp",
        "requestBody": {
          "description": "Create a new smtp endpoint",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterNotificationsEndpointsSmtp-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create a new smtp endpoint"
      }
    },
    "/cluster/notifications/endpoints/smtp/{name}": {
      "summary": "name",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update existing smtp endpoint",
        "operationId": "setClusterNotificationsEndpointsSmtpByName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the endpoint.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update existing smtp endpoint",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterNotificationsEndpointsSmtp-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Update existing smtp endpoint"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Remove smtp endpoint",
        "operationId": "removeClusterNotificationsEndpointsSmtpByName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Remove smtp endpoint"
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterNotificationsEndpointsSmtp"
                }
              }
            }
          }
        },
        "summary": "Return a specific smtp endpoint",
        "operationId": "getClusterNotificationsEndpointsSmtpByName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Return a specific smtp endpoint"
      }
    },
    "/cluster/notifications/endpoints/webhook": {
      "summary": "webhook",
      "get": {
        "summary": "Returns a list of all webhook endpoints",
        "tags": [
          "cluster"
        ],
        "description": "Returns a list of all webhook endpoints",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterNotificationsEndpointsWebhook-GET"
                }
              }
            }
          }
        },
        "operationId": "getClusterNotificationsEndpointsWebhook"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create a new webhook endpoint",
        "operationId": "newClusterNotificationsEndpointsWebhook",
        "requestBody": {
          "description": "Create a new webhook endpoint",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterNotificationsEndpointsWebhook-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create a new webhook endpoint"
      }
    },
    "/cluster/notifications/endpoints/webhook/{name}": {
      "summary": "name",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update existing webhook endpoint",
        "operationId": "setClusterNotificationsEndpointsWebhookByName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the endpoint.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update existing webhook endpoint",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterNotificationsEndpointsWebhook-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Update existing webhook endpoint"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Remove webhook endpoint",
        "operationId": "removeClusterNotificationsEndpointsWebhookByName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Remove webhook endpoint"
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterNotificationsEndpointsWebhook"
                }
              }
            }
          }
        },
        "summary": "Return a specific webhook endpoint",
        "operationId": "getClusterNotificationsEndpointsWebhookByName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the endpoint.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Return a specific webhook endpoint"
      }
    },
    "/cluster/notifications/matcher-field-values": {
      "get": {
        "summary": "Returns known notification metadata fields and their known values",
        "tags": [
          "cluster"
        ],
        "description": "Returns known notification metadata fields and their known values",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterNotificationsMatcherfieldvalues"
                }
              }
            }
          }
        },
        "operationId": "getClusterNotificationsMatcherfieldvalues"
      },
      "summary": "matcher-field-values"
    },
    "/cluster/notifications/matcher-fields": {
      "get": {
        "summary": "Returns known notification metadata fields",
        "tags": [
          "cluster"
        ],
        "description": "Returns known notification metadata fields",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterNotificationsMatcherfields"
                }
              }
            }
          }
        },
        "operationId": "getClusterNotificationsMatcherfields"
      },
      "summary": "matcher-fields"
    },
    "/cluster/notifications/matchers": {
      "summary": "matchers",
      "get": {
        "summary": "Returns a list of all matchers",
        "tags": [
          "cluster"
        ],
        "description": "Returns a list of all matchers",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterNotificationsMatchers-GET"
                }
              }
            }
          }
        },
        "operationId": "getClusterNotificationsMatchers"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create a new matcher",
        "operationId": "newClusterNotificationsMatchers",
        "requestBody": {
          "description": "Create a new matcher",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterNotificationsMatchers-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create a new matcher"
      }
    },
    "/cluster/notifications/matchers/{name}": {
      "summary": "name",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update existing matcher",
        "operationId": "setClusterNotificationsMatchersByName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the matcher.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update existing matcher",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterNotificationsMatchers-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Update existing matcher"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Remove matcher",
        "operationId": "removeClusterNotificationsMatchersByName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Remove matcher"
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterNotificationsMatchers"
                }
              }
            }
          }
        },
        "summary": "Return a specific matcher",
        "operationId": "getClusterNotificationsMatchersByName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Return a specific matcher"
      }
    },
    "/cluster/notifications/targets": {
      "get": {
        "summary": "Returns a list of all entities that can be used as notification targets.",
        "tags": [
          "cluster"
        ],
        "description": "Returns a list of all entities that can be used as notification targets.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterNotificationsTargets"
                }
              }
            }
          }
        },
        "operationId": "getClusterNotificationsTargets"
      },
      "summary": "targets"
    },
    "/cluster/notifications/targets/{name}/test": {
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Send a test notification to a provided target.",
        "operationId": "newClusterNotificationsTargetsTestByName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the target.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Send a test notification to a provided target."
      },
      "summary": "test"
    },
    "/cluster/options": {
      "summary": "options",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Set datacenter options.",
        "operationId": "setClusterOptions",
        "requestBody": {
          "description": "Set datacenter options.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterOptions-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Set datacenter options."
      },
      "get": {
        "summary": "Get datacenter options. Without 'Sys.Audit' on '/' not all options are returned.",
        "tags": [
          "cluster"
        ],
        "description": "Get datacenter options. Without 'Sys.Audit' on '/' not all options are returned.",
        "responses": "",
        "operationId": "getClusterOptions"
      }
    },
    "/cluster/replication": {
      "summary": "replication",
      "get": {
        "summary": "List replication jobs.",
        "tags": [
          "cluster"
        ],
        "description": "List replication jobs.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterReplication"
                }
              }
            }
          }
        },
        "operationId": "getClusterReplication"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create a new replication job",
        "operationId": "newClusterReplication",
        "requestBody": {
          "description": "Create a new replication job",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterReplication-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create a new replication job"
      }
    },
    "/cluster/replication/{id}": {
      "summary": "id",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update replication job configuration.",
        "operationId": "setClusterReplicationById",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": "Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update replication job configuration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterReplication-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Update replication job configuration."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Mark replication job for removal.",
        "operationId": "removeClusterReplicationById",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": "Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Mark replication job for removal.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-ClusterReplication-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Mark replication job for removal."
      },
      "get": {
        "responses": "",
        "summary": "Read replication job configuration.",
        "operationId": "getClusterReplicationById",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": "Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Read replication job configuration."
      }
    },
    "/cluster/resources": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterResources"
                }
              }
            }
          }
        },
        "summary": "Resources index (cluster wide).",
        "operationId": "getClusterResources",
        "requestBody": {
          "description": "Resources index (cluster wide).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-ClusterResources-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Resources index (cluster wide)."
      },
      "summary": "resources"
    },
    "/cluster/sdn": {
      "summary": "sdn",
      "put": {
        "summary": "Apply sdn controller changes && reload.",
        "tags": [
          "cluster"
        ],
        "description": "Apply sdn controller changes && reload.",
        "responses": "",
        "operationId": "setClusterSdn"
      },
      "get": {
        "summary": "Directory index.",
        "tags": [
          "cluster"
        ],
        "description": "Directory index.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterSdn"
                }
              }
            }
          }
        },
        "operationId": "getClusterSdn"
      }
    },
    "/cluster/sdn/controllers": {
      "summary": "controllers",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterSdnControllers"
                }
              }
            }
          }
        },
        "summary": "SDN controllers index.",
        "operationId": "getClusterSdnControllers",
        "requestBody": {
          "description": "SDN controllers index.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-ClusterSdnControllers-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "SDN controllers index."
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create a new sdn controller object.",
        "operationId": "newClusterSdnControllers",
        "requestBody": {
          "description": "Create a new sdn controller object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterSdnControllers-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create a new sdn controller object."
      }
    },
    "/cluster/sdn/controllers/{controller}": {
      "summary": "controller",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update sdn controller object configuration.",
        "operationId": "setClusterSdnControllersByController",
        "parameter": [
          {
            "name": "controller",
            "in": "path",
            "description": "The SDN controller object identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update sdn controller object configuration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterSdnControllers-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Update sdn controller object configuration."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete sdn controller object configuration.",
        "operationId": "removeClusterSdnControllersByController",
        "parameter": [
          {
            "name": "controller",
            "in": "path",
            "description": "The SDN controller object identifier.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Delete sdn controller object configuration."
      },
      "get": {
        "responses": "",
        "summary": "Read sdn controller configuration.",
        "operationId": "getClusterSdnControllersByController",
        "parameter": [
          {
            "name": "controller",
            "in": "path",
            "description": "The SDN controller object identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Read sdn controller configuration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-ClusterSdnControllers-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Read sdn controller configuration."
      }
    },
    "/cluster/sdn/dns": {
      "summary": "dns",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterSdnDns"
                }
              }
            }
          }
        },
        "summary": "SDN dns index.",
        "operationId": "getClusterSdnDns",
        "requestBody": {
          "description": "SDN dns index.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-ClusterSdnDns-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "SDN dns index."
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create a new sdn dns object.",
        "operationId": "newClusterSdnDns",
        "requestBody": {
          "description": "Create a new sdn dns object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterSdnDns-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create a new sdn dns object."
      }
    },
    "/cluster/sdn/dns/{dns}": {
      "summary": "dns",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update sdn dns object configuration.",
        "operationId": "setClusterSdnDnsByDns",
        "parameter": [
          {
            "name": "dns",
            "in": "path",
            "description": "The SDN dns object identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update sdn dns object configuration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterSdnDns-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Update sdn dns object configuration."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete sdn dns object configuration.",
        "operationId": "removeClusterSdnDnsByDns",
        "parameter": [
          {
            "name": "dns",
            "in": "path",
            "description": "The SDN dns object identifier.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Delete sdn dns object configuration."
      },
      "get": {
        "responses": "",
        "summary": "Read sdn dns configuration.",
        "operationId": "getClusterSdnDnsByDns",
        "parameter": [
          {
            "name": "dns",
            "in": "path",
            "description": "The SDN dns object identifier.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Read sdn dns configuration."
      }
    },
    "/cluster/sdn/ipams": {
      "summary": "ipams",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterSdnIpams"
                }
              }
            }
          }
        },
        "summary": "SDN ipams index.",
        "operationId": "getClusterSdnIpams",
        "requestBody": {
          "description": "SDN ipams index.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-ClusterSdnIpams-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "SDN ipams index."
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create a new sdn ipam object.",
        "operationId": "newClusterSdnIpams",
        "requestBody": {
          "description": "Create a new sdn ipam object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterSdnIpams-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create a new sdn ipam object."
      }
    },
    "/cluster/sdn/ipams/{ipam}": {
      "summary": "ipam",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update sdn ipam object configuration.",
        "operationId": "setClusterSdnIpamsByIpam",
        "parameter": [
          {
            "name": "ipam",
            "in": "path",
            "description": "The SDN ipam object identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update sdn ipam object configuration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterSdnIpams-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Update sdn ipam object configuration."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete sdn ipam object configuration.",
        "operationId": "removeClusterSdnIpamsByIpam",
        "parameter": [
          {
            "name": "ipam",
            "in": "path",
            "description": "The SDN ipam object identifier.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Delete sdn ipam object configuration."
      },
      "get": {
        "responses": "",
        "summary": "Read sdn ipam configuration.",
        "operationId": "getClusterSdnIpamsByIpam",
        "parameter": [
          {
            "name": "ipam",
            "in": "path",
            "description": "The SDN ipam object identifier.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Read sdn ipam configuration."
      }
    },
    "/cluster/sdn/ipams/{ipam}/status": {
      "get": {
        "responses": "",
        "summary": "List PVE IPAM Entries",
        "operationId": "getClusterSdnIpamsStatusByIpam",
        "parameter": [
          {
            "name": "ipam",
            "in": "path",
            "description": "The SDN ipam object identifier.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "List PVE IPAM Entries"
      },
      "summary": "status"
    },
    "/cluster/sdn/vnets": {
      "summary": "vnets",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterSdnVnets"
                }
              }
            }
          }
        },
        "summary": "SDN vnets index.",
        "operationId": "getClusterSdnVnets",
        "requestBody": {
          "description": "SDN vnets index.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-ClusterSdnVnets-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "SDN vnets index."
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create a new sdn vnet object.",
        "operationId": "newClusterSdnVnets",
        "requestBody": {
          "description": "Create a new sdn vnet object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterSdnVnets-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create a new sdn vnet object."
      }
    },
    "/cluster/sdn/vnets/{vnet}": {
      "summary": "vnet",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update sdn vnet object configuration.",
        "operationId": "setClusterSdnVnetsByVnet",
        "parameter": [
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update sdn vnet object configuration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterSdnVnets-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Update sdn vnet object configuration."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete sdn vnet object configuration.",
        "operationId": "removeClusterSdnVnetsByVnet",
        "parameter": [
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Delete sdn vnet object configuration."
      },
      "get": {
        "responses": "",
        "summary": "Read sdn vnet configuration.",
        "operationId": "getClusterSdnVnetsByVnet",
        "parameter": [
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Read sdn vnet configuration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-ClusterSdnVnets-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Read sdn vnet configuration."
      }
    },
    "/cluster/sdn/vnets/{vnet}/firewall": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterSdnVnetsFirewall"
                }
              }
            }
          }
        },
        "summary": "Directory index.",
        "operationId": "getClusterSdnVnetsFirewallByVnet",
        "parameter": [
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Directory index."
      },
      "summary": "firewall"
    },
    "/cluster/sdn/vnets/{vnet}/firewall/options": {
      "summary": "options",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Set Firewall options.",
        "operationId": "setClusterSdnVnetsFirewallOptionsByVnet",
        "parameter": [
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Set Firewall options.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterSdnVnetsFirewallOptions-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Set Firewall options."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterSdnVnetsFirewallOptions"
                }
              }
            }
          }
        },
        "summary": "Get vnet firewall options.",
        "operationId": "getClusterSdnVnetsFirewallOptionsByVnet",
        "parameter": [
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Get vnet firewall options."
      }
    },
    "/cluster/sdn/vnets/{vnet}/firewall/rules": {
      "summary": "rules",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterSdnVnetsFirewallRules-GET"
                }
              }
            }
          }
        },
        "summary": "List rules.",
        "operationId": "getClusterSdnVnetsFirewallRulesByVnet",
        "parameter": [
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "List rules."
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create new rule.",
        "operationId": "newClusterSdnVnetsFirewallRulesByVnet",
        "parameter": [
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create new rule.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterSdnVnetsFirewallRules-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create new rule."
      }
    },
    "/cluster/sdn/vnets/{vnet}/firewall/rules/{pos}": {
      "summary": "pos",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Modify rule data.",
        "operationId": "setClusterSdnVnetsFirewallRulesByVnetAndPos",
        "parameter": [
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": true
          },
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Modify rule data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterSdnVnetsFirewallRules-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Modify rule data."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete rule.",
        "operationId": "removeClusterSdnVnetsFirewallRulesByVnetAndPos",
        "parameter": [
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": true
          },
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Delete rule.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-ClusterSdnVnetsFirewallRules-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Delete rule."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterSdnVnetsFirewallRules"
                }
              }
            }
          }
        },
        "summary": "Get single rule data.",
        "operationId": "getClusterSdnVnetsFirewallRulesByVnetAndPos",
        "parameter": [
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": true
          },
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Get single rule data."
      }
    },
    "/cluster/sdn/vnets/{vnet}/ips": {
      "summary": "ips",
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete IP Mappings in a VNet",
        "operationId": "removeClusterSdnVnetsIpsByVnet",
        "parameter": [
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Delete IP Mappings in a VNet",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-ClusterSdnVnetsIps-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Delete IP Mappings in a VNet"
      },
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update IP Mapping in a VNet",
        "operationId": "setClusterSdnVnetsIpsByVnet",
        "parameter": [
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update IP Mapping in a VNet",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterSdnVnetsIps-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Update IP Mapping in a VNet"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create IP Mapping in a VNet",
        "operationId": "newClusterSdnVnetsIpsByVnet",
        "parameter": [
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create IP Mapping in a VNet",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterSdnVnetsIps-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create IP Mapping in a VNet"
      }
    },
    "/cluster/sdn/vnets/{vnet}/subnets": {
      "summary": "subnets",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterSdnVnetsSubnets"
                }
              }
            }
          }
        },
        "summary": "SDN subnets index.",
        "operationId": "getClusterSdnVnetsSubnetsByVnet",
        "parameter": [
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "SDN subnets index.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-ClusterSdnVnetsSubnets-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "SDN subnets index."
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create a new sdn subnet object.",
        "operationId": "newClusterSdnVnetsSubnetsByVnet",
        "parameter": [
          {
            "name": "vnet",
            "in": "path",
            "description": "associated vnet",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create a new sdn subnet object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterSdnVnetsSubnets-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create a new sdn subnet object."
      }
    },
    "/cluster/sdn/vnets/{vnet}/subnets/{subnet}": {
      "summary": "subnet",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update sdn subnet object configuration.",
        "operationId": "setClusterSdnVnetsSubnetsByVnetAndSubnet",
        "parameter": [
          {
            "name": "subnet",
            "in": "path",
            "description": "The SDN subnet object identifier.",
            "required": true
          },
          {
            "name": "vnet",
            "in": "path",
            "description": "associated vnet",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update sdn subnet object configuration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterSdnVnetsSubnets-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Update sdn subnet object configuration."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete sdn subnet object configuration.",
        "operationId": "removeClusterSdnVnetsSubnetsByVnetAndSubnet",
        "parameter": [
          {
            "name": "subnet",
            "in": "path",
            "description": "The SDN subnet object identifier.",
            "required": true
          },
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Delete sdn subnet object configuration."
      },
      "get": {
        "responses": "",
        "summary": "Read sdn subnet configuration.",
        "operationId": "getClusterSdnVnetsSubnetsByVnetAndSubnet",
        "parameter": [
          {
            "name": "subnet",
            "in": "path",
            "description": "The SDN subnet object identifier.",
            "required": true
          },
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Read sdn subnet configuration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-ClusterSdnVnetsSubnets-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Read sdn subnet configuration."
      }
    },
    "/cluster/sdn/zones": {
      "summary": "zones",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterSdnZones"
                }
              }
            }
          }
        },
        "summary": "SDN zones index.",
        "operationId": "getClusterSdnZones",
        "requestBody": {
          "description": "SDN zones index.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-ClusterSdnZones-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "SDN zones index."
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create a new sdn zone object.",
        "operationId": "newClusterSdnZones",
        "requestBody": {
          "description": "Create a new sdn zone object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-ClusterSdnZones-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Create a new sdn zone object."
      }
    },
    "/cluster/sdn/zones/{zone}": {
      "summary": "zone",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update sdn zone object configuration.",
        "operationId": "setClusterSdnZonesByZone",
        "parameter": [
          {
            "name": "zone",
            "in": "path",
            "description": "The SDN zone object identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update sdn zone object configuration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-ClusterSdnZones-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Update sdn zone object configuration."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete sdn zone object configuration.",
        "operationId": "removeClusterSdnZonesByZone",
        "parameter": [
          {
            "name": "zone",
            "in": "path",
            "description": "The SDN zone object identifier.",
            "required": true
          }
        ],
        "tags": [
          "cluster"
        ],
        "description": "Delete sdn zone object configuration."
      },
      "get": {
        "responses": "",
        "summary": "Read sdn zone configuration.",
        "operationId": "getClusterSdnZonesByZone",
        "parameter": [
          {
            "name": "zone",
            "in": "path",
            "description": "The SDN zone object identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Read sdn zone configuration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-ClusterSdnZones-RB"
              }
            }
          }
        },
        "tags": [
          "cluster"
        ],
        "description": "Read sdn zone configuration."
      }
    },
    "/cluster/status": {
      "get": {
        "summary": "Get cluster status information.",
        "tags": [
          "cluster"
        ],
        "description": "Get cluster status information.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterStatus"
                }
              }
            }
          }
        },
        "operationId": "getClusterStatus"
      },
      "summary": "status"
    },
    "/cluster/tasks": {
      "get": {
        "summary": "List recent tasks (cluster wide).",
        "tags": [
          "cluster"
        ],
        "description": "List recent tasks (cluster wide).",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterTasks"
                }
              }
            }
          }
        },
        "operationId": "getClusterTasks"
      },
      "summary": "tasks"
    },
    "/nodes": {
      "get": {
        "summary": "Cluster node index.",
        "tags": [
          "nodes"
        ],
        "description": "Cluster node index.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nodes"
                }
              }
            }
          }
        },
        "operationId": "getNodes"
      },
      "summary": "nodes"
    },
    "/nodes/{node}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nodes-GET"
                }
              }
            }
          }
        },
        "summary": "Node index.",
        "operationId": "getNodesByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Node index."
      },
      "summary": "node"
    },
    "/nodes/{node}/aplinfo": {
      "summary": "aplinfo",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesAplinfo"
                }
              }
            }
          }
        },
        "summary": "Get list of appliances.",
        "operationId": "getNodesAplinfoByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get list of appliances."
      },
      "post": {
        "responses": "",
        "summary": "Download appliance templates.",
        "operationId": "newNodesAplinfoByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Download appliance templates.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesAplinfo-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Download appliance templates."
      }
    },
    "/nodes/{node}/apt": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesApt"
                }
              }
            }
          }
        },
        "summary": "Directory index for apt (Advanced Package Tool).",
        "operationId": "getNodesAptByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Directory index for apt (Advanced Package Tool)."
      },
      "summary": "apt"
    },
    "/nodes/{node}/apt/changelog": {
      "get": {
        "responses": "",
        "summary": "Get package changelogs.",
        "operationId": "getNodesAptChangelogByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Get package changelogs.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesAptChangelog-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Get package changelogs."
      },
      "summary": "changelog"
    },
    "/nodes/{node}/apt/repositories": {
      "summary": "repositories",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Add a standard repository to the configuration",
        "operationId": "setNodesAptRepositoriesByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Add a standard repository to the configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesAptRepositories-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Add a standard repository to the configuration"
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesAptRepositories"
                }
              }
            }
          }
        },
        "summary": "Get APT repository information.",
        "operationId": "getNodesAptRepositoriesByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get APT repository information."
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Change the properties of a repository. Currently only allows enabling/disabling.",
        "operationId": "newNodesAptRepositoriesByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Change the properties of a repository. Currently only allows enabling/disabling.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesAptRepositories-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Change the properties of a repository. Currently only allows enabling/disabling."
      }
    },
    "/nodes/{node}/apt/update": {
      "summary": "update",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesAptUpdate"
                }
              }
            }
          }
        },
        "summary": "List available updates.",
        "operationId": "getNodesAptUpdateByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "List available updates."
      },
      "post": {
        "responses": "",
        "summary": "This is used to resynchronize the package index files from their sources (apt-get update).",
        "operationId": "newNodesAptUpdateByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "This is used to resynchronize the package index files from their sources (apt-get update).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesAptUpdate-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "This is used to resynchronize the package index files from their sources (apt-get update)."
      }
    },
    "/nodes/{node}/apt/versions": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesAptVersions"
                }
              }
            }
          }
        },
        "summary": "Get package information for important Proxmox packages.",
        "operationId": "getNodesAptVersionsByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get package information for important Proxmox packages."
      },
      "summary": "versions"
    },
    "/nodes/{node}/capabilities": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesCapabilities"
                }
              }
            }
          }
        },
        "summary": "Node capabilities index.",
        "operationId": "getNodesCapabilitiesByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Node capabilities index."
      },
      "summary": "capabilities"
    },
    "/nodes/{node}/capabilities/qemu": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesCapabilitiesQemu"
                }
              }
            }
          }
        },
        "summary": "QEMU capabilities index.",
        "operationId": "getNodesCapabilitiesQemuByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "QEMU capabilities index."
      },
      "summary": "qemu"
    },
    "/nodes/{node}/capabilities/qemu/cpu": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesCapabilitiesQemuCpu"
                }
              }
            }
          }
        },
        "summary": "List all custom and default CPU models.",
        "operationId": "getNodesCapabilitiesQemuCpuByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "List all custom and default CPU models."
      },
      "summary": "cpu"
    },
    "/nodes/{node}/capabilities/qemu/machines": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesCapabilitiesQemuMachines"
                }
              }
            }
          }
        },
        "summary": "Get available QEMU/KVM machine types.",
        "operationId": "getNodesCapabilitiesQemuMachinesByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get available QEMU/KVM machine types."
      },
      "summary": "machines"
    },
    "/nodes/{node}/ceph": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesCeph"
                }
              }
            }
          }
        },
        "summary": "Directory index.",
        "operationId": "getNodesCephByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Directory index."
      },
      "summary": "ceph"
    },
    "/nodes/{node}/ceph/cfg": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesCephCfg"
                }
              }
            }
          }
        },
        "summary": "Directory index.",
        "operationId": "getNodesCephCfgByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Directory index."
      },
      "summary": "cfg"
    },
    "/nodes/{node}/ceph/cfg/db": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesCephCfgDb"
                }
              }
            }
          }
        },
        "summary": "Get the Ceph configuration database.",
        "operationId": "getNodesCephCfgDbByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get the Ceph configuration database."
      },
      "summary": "db"
    },
    "/nodes/{node}/ceph/cfg/raw": {
      "get": {
        "responses": "",
        "summary": "Get the Ceph configuration file.",
        "operationId": "getNodesCephCfgRawByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get the Ceph configuration file."
      },
      "summary": "raw"
    },
    "/nodes/{node}/ceph/cfg/value": {
      "get": {
        "responses": "",
        "summary": "Get configured values from either the config file or config DB.",
        "operationId": "getNodesCephCfgValueByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Get configured values from either the config file or config DB.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesCephCfgValue-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Get configured values from either the config file or config DB."
      },
      "summary": "value"
    },
    "/nodes/{node}/ceph/cmd-safety": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesCephCmdsafety"
                }
              }
            }
          }
        },
        "summary": "Heuristical check if it is safe to perform an action.",
        "operationId": "getNodesCephCmdsafetyByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Heuristical check if it is safe to perform an action.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesCephCmdsafety-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Heuristical check if it is safe to perform an action."
      },
      "summary": "cmd-safety"
    },
    "/nodes/{node}/ceph/crush": {
      "get": {
        "responses": "",
        "summary": "Get OSD crush map",
        "operationId": "getNodesCephCrushByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get OSD crush map"
      },
      "summary": "crush"
    },
    "/nodes/{node}/ceph/fs": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesCephFs"
                }
              }
            }
          }
        },
        "summary": "Directory index.",
        "operationId": "getNodesCephFsByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Directory index."
      },
      "summary": "fs"
    },
    "/nodes/{node}/ceph/fs/{name}": {
      "post": {
        "responses": "",
        "summary": "Create a Ceph filesystem",
        "operationId": "newNodesCephFsByNodeAndName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "The ceph filesystem name.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create a Ceph filesystem",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesCephFs-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Create a Ceph filesystem"
      },
      "summary": "name"
    },
    "/nodes/{node}/ceph/init": {
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create initial ceph default configuration and setup symlinks.",
        "operationId": "newNodesCephInitByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create initial ceph default configuration and setup symlinks.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesCephInit-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Create initial ceph default configuration and setup symlinks."
      },
      "summary": "init"
    },
    "/nodes/{node}/ceph/log": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesCephLog"
                }
              }
            }
          }
        },
        "summary": "Read ceph log",
        "operationId": "getNodesCephLogByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Read ceph log",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesCephLog-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Read ceph log"
      },
      "summary": "log"
    },
    "/nodes/{node}/ceph/mds": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesCephMds"
                }
              }
            }
          }
        },
        "summary": "MDS directory index.",
        "operationId": "getNodesCephMdsByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "MDS directory index."
      },
      "summary": "mds"
    },
    "/nodes/{node}/ceph/mds/{name}": {
      "summary": "name",
      "delete": {
        "responses": "",
        "summary": "Destroy Ceph Metadata Server",
        "operationId": "removeNodesCephMdsByNodeAndName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "The name (ID) of the mds",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Destroy Ceph Metadata Server"
      },
      "post": {
        "responses": "",
        "summary": "Create Ceph Metadata Server (MDS)",
        "operationId": "newNodesCephMdsByNodeAndName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "The ID for the mds, when omitted the same as the nodename",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create Ceph Metadata Server (MDS)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesCephMds-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Create Ceph Metadata Server (MDS)"
      }
    },
    "/nodes/{node}/ceph/mgr": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesCephMgr"
                }
              }
            }
          }
        },
        "summary": "MGR directory index.",
        "operationId": "getNodesCephMgrByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "MGR directory index."
      },
      "summary": "mgr"
    },
    "/nodes/{node}/ceph/mgr/{id}": {
      "summary": "id",
      "delete": {
        "responses": "",
        "summary": "Destroy Ceph Manager.",
        "operationId": "removeNodesCephMgrByNodeAndId",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the manager",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Destroy Ceph Manager."
      },
      "post": {
        "responses": "",
        "summary": "Create Ceph Manager",
        "operationId": "newNodesCephMgrByNodeAndId",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID for the manager, when omitted the same as the nodename",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Create Ceph Manager"
      }
    },
    "/nodes/{node}/ceph/mon": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesCephMon"
                }
              }
            }
          }
        },
        "summary": "Get Ceph monitor list.",
        "operationId": "getNodesCephMonByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get Ceph monitor list."
      },
      "summary": "mon"
    },
    "/nodes/{node}/ceph/mon/{monid}": {
      "summary": "monid",
      "delete": {
        "responses": "",
        "summary": "Destroy Ceph Monitor and Manager.",
        "operationId": "removeNodesCephMonByNodeAndMonid",
        "parameter": [
          {
            "name": "monid",
            "in": "path",
            "description": "Monitor ID",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Destroy Ceph Monitor and Manager."
      },
      "post": {
        "responses": "",
        "summary": "Create Ceph Monitor and Manager",
        "operationId": "newNodesCephMonByNodeAndMonid",
        "parameter": [
          {
            "name": "monid",
            "in": "path",
            "description": "The ID for the monitor, when omitted the same as the nodename",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create Ceph Monitor and Manager",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesCephMon-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Create Ceph Monitor and Manager"
      }
    },
    "/nodes/{node}/ceph/osd": {
      "summary": "osd",
      "get": {
        "responses": "",
        "summary": "Get Ceph osd list/tree.",
        "operationId": "getNodesCephOsdByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get Ceph osd list/tree."
      },
      "post": {
        "responses": "",
        "summary": "Create OSD",
        "operationId": "newNodesCephOsdByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create OSD",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesCephOsd-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Create OSD"
      }
    },
    "/nodes/{node}/ceph/osd/{osdid}": {
      "summary": "osdid",
      "delete": {
        "responses": "",
        "summary": "Destroy OSD",
        "operationId": "removeNodesCephOsdByNodeAndOsdid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "osdid",
            "in": "path",
            "description": "OSD ID",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Destroy OSD",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-NodesCephOsd-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Destroy OSD"
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesCephOsd"
                }
              }
            }
          }
        },
        "summary": "OSD index.",
        "operationId": "getNodesCephOsdByNodeAndOsdid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "osdid",
            "in": "path",
            "description": "OSD ID",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "OSD index."
      }
    },
    "/nodes/{node}/ceph/osd/{osdid}/in": {
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "ceph osd in",
        "operationId": "newNodesCephOsdInByNodeAndOsdid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "osdid",
            "in": "path",
            "description": "OSD ID",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "ceph osd in"
      },
      "summary": "in"
    },
    "/nodes/{node}/ceph/osd/{osdid}/lv-info": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesCephOsdLvinfo"
                }
              }
            }
          }
        },
        "summary": "Get OSD volume details",
        "operationId": "getNodesCephOsdLvinfoByNodeAndOsdid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "osdid",
            "in": "path",
            "description": "OSD ID",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Get OSD volume details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesCephOsdLvinfo-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Get OSD volume details"
      },
      "summary": "lv-info"
    },
    "/nodes/{node}/ceph/osd/{osdid}/metadata": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesCephOsdMetadata"
                }
              }
            }
          }
        },
        "summary": "Get OSD details",
        "operationId": "getNodesCephOsdMetadataByNodeAndOsdid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "osdid",
            "in": "path",
            "description": "OSD ID",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get OSD details"
      },
      "summary": "metadata"
    },
    "/nodes/{node}/ceph/osd/{osdid}/out": {
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "ceph osd out",
        "operationId": "newNodesCephOsdOutByNodeAndOsdid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "osdid",
            "in": "path",
            "description": "OSD ID",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "ceph osd out"
      },
      "summary": "out"
    },
    "/nodes/{node}/ceph/osd/{osdid}/scrub": {
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Instruct the OSD to scrub.",
        "operationId": "newNodesCephOsdScrubByNodeAndOsdid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "osdid",
            "in": "path",
            "description": "OSD ID",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Instruct the OSD to scrub.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesCephOsdScrub-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Instruct the OSD to scrub."
      },
      "summary": "scrub"
    },
    "/nodes/{node}/ceph/pool": {
      "summary": "pool",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesCephPool"
                }
              }
            }
          }
        },
        "summary": "List all pools and their settings (which are settable by the POST/PUT endpoints).",
        "operationId": "getNodesCephPoolByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "List all pools and their settings (which are settable by the POST/PUT endpoints)."
      },
      "post": {
        "responses": "",
        "summary": "Create Ceph pool",
        "operationId": "newNodesCephPoolByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create Ceph pool",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesCephPool-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Create Ceph pool"
      }
    },
    "/nodes/{node}/ceph/pool/{name}": {
      "summary": "name",
      "put": {
        "responses": "",
        "summary": "Change POOL settings",
        "operationId": "setNodesCephPoolByNodeAndName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the pool. It must be unique.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Change POOL settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesCephPool-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Change POOL settings"
      },
      "delete": {
        "responses": "",
        "summary": "Destroy pool",
        "operationId": "removeNodesCephPoolByNodeAndName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the pool. It must be unique.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Destroy pool",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-NodesCephPool-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Destroy pool"
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesCephPool-GET"
                }
              }
            }
          }
        },
        "summary": "Pool index.",
        "operationId": "getNodesCephPoolByNodeAndName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the pool.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Pool index."
      }
    },
    "/nodes/{node}/ceph/pool/{name}/status": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesCephPoolStatus"
                }
              }
            }
          }
        },
        "summary": "Show the current pool status.",
        "operationId": "getNodesCephPoolStatusByNodeAndName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the pool. It must be unique.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Show the current pool status.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesCephPoolStatus-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Show the current pool status."
      },
      "summary": "status"
    },
    "/nodes/{node}/ceph/restart": {
      "post": {
        "responses": "",
        "summary": "Restart ceph services.",
        "operationId": "newNodesCephRestartByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Restart ceph services.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesCephRestart-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Restart ceph services."
      },
      "summary": "restart"
    },
    "/nodes/{node}/ceph/rules": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesCephRules"
                }
              }
            }
          }
        },
        "summary": "List ceph rules.",
        "operationId": "getNodesCephRulesByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "List ceph rules."
      },
      "summary": "rules"
    },
    "/nodes/{node}/ceph/start": {
      "post": {
        "responses": "",
        "summary": "Start ceph services.",
        "operationId": "newNodesCephStartByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Start ceph services.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesCephStart-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Start ceph services."
      },
      "summary": "start"
    },
    "/nodes/{node}/ceph/status": {
      "get": {
        "responses": "",
        "summary": "Get ceph status.",
        "operationId": "getNodesCephStatusByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get ceph status."
      },
      "summary": "status"
    },
    "/nodes/{node}/ceph/stop": {
      "post": {
        "responses": "",
        "summary": "Stop ceph services.",
        "operationId": "newNodesCephStopByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Stop ceph services.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesCephStop-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Stop ceph services."
      },
      "summary": "stop"
    },
    "/nodes/{node}/certificates": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesCertificates"
                }
              }
            }
          }
        },
        "summary": "Node index.",
        "operationId": "getNodesCertificatesByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Node index."
      },
      "summary": "certificates"
    },
    "/nodes/{node}/certificates/acme": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesCertificatesAcme"
                }
              }
            }
          }
        },
        "summary": "ACME index.",
        "operationId": "getNodesCertificatesAcmeByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "ACME index."
      },
      "summary": "acme"
    },
    "/nodes/{node}/certificates/acme/certificate": {
      "summary": "certificate",
      "delete": {
        "responses": "",
        "summary": "Revoke existing certificate from CA.",
        "operationId": "removeNodesCertificatesAcmeCertificateByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Revoke existing certificate from CA."
      },
      "put": {
        "responses": "",
        "summary": "Renew existing certificate from CA.",
        "operationId": "setNodesCertificatesAcmeCertificateByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Renew existing certificate from CA.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesCertificatesAcmeCertificate-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Renew existing certificate from CA."
      },
      "post": {
        "responses": "",
        "summary": "Order a new certificate from ACME-compatible CA.",
        "operationId": "newNodesCertificatesAcmeCertificateByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Order a new certificate from ACME-compatible CA.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesCertificatesAcmeCertificate-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Order a new certificate from ACME-compatible CA."
      }
    },
    "/nodes/{node}/certificates/custom": {
      "summary": "custom",
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "DELETE custom certificate chain and key.",
        "operationId": "removeNodesCertificatesCustomByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "DELETE custom certificate chain and key.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-NodesCertificatesCustom-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "DELETE custom certificate chain and key."
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesCertificatesCustom"
                }
              }
            }
          }
        },
        "summary": "Upload or update custom certificate chain and key.",
        "operationId": "newNodesCertificatesCustomByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Upload or update custom certificate chain and key.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesCertificatesCustom-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Upload or update custom certificate chain and key."
      }
    },
    "/nodes/{node}/certificates/info": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesCertificatesInfo"
                }
              }
            }
          }
        },
        "summary": "Get information about node's certificates.",
        "operationId": "getNodesCertificatesInfoByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get information about node's certificates."
      },
      "summary": "info"
    },
    "/nodes/{node}/config": {
      "summary": "config",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Set node configuration options.",
        "operationId": "setNodesConfigByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Set node configuration options.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesConfig-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Set node configuration options."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesConfig"
                }
              }
            }
          }
        },
        "summary": "Get node configuration options.",
        "operationId": "getNodesConfigByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Get node configuration options.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesConfig-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Get node configuration options."
      }
    },
    "/nodes/{node}/disks": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesDisks"
                }
              }
            }
          }
        },
        "summary": "Node index.",
        "operationId": "getNodesDisksByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Node index."
      },
      "summary": "disks"
    },
    "/nodes/{node}/disks/directory": {
      "summary": "directory",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesDisksDirectory"
                }
              }
            }
          }
        },
        "summary": "PVE Managed Directory storages.",
        "operationId": "getNodesDisksDirectoryByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "PVE Managed Directory storages."
      },
      "post": {
        "responses": "",
        "summary": "Create a Filesystem on an unused disk. Will be mounted under '/mnt/pve/NAME'.",
        "operationId": "newNodesDisksDirectoryByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create a Filesystem on an unused disk. Will be mounted under '/mnt/pve/NAME'.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesDisksDirectory-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Create a Filesystem on an unused disk. Will be mounted under '/mnt/pve/NAME'."
      }
    },
    "/nodes/{node}/disks/directory/{name}": {
      "delete": {
        "responses": "",
        "summary": "Unmounts the storage and removes the mount unit.",
        "operationId": "removeNodesDisksDirectoryByNodeAndName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "The storage identifier.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Unmounts the storage and removes the mount unit.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-NodesDisksDirectory-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Unmounts the storage and removes the mount unit."
      },
      "summary": "name"
    },
    "/nodes/{node}/disks/initgpt": {
      "post": {
        "responses": "",
        "summary": "Initialize Disk with GPT",
        "operationId": "newNodesDisksInitgptByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Initialize Disk with GPT",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesDisksInitgpt-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Initialize Disk with GPT"
      },
      "summary": "initgpt"
    },
    "/nodes/{node}/disks/list": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesDisksList"
                }
              }
            }
          }
        },
        "summary": "List local disks.",
        "operationId": "getNodesDisksListByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "List local disks.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesDisksList-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "List local disks."
      },
      "summary": "list"
    },
    "/nodes/{node}/disks/lvm": {
      "summary": "lvm",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesDisksLvm"
                }
              }
            }
          }
        },
        "summary": "List LVM Volume Groups",
        "operationId": "getNodesDisksLvmByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "List LVM Volume Groups"
      },
      "post": {
        "responses": "",
        "summary": "Create an LVM Volume Group",
        "operationId": "newNodesDisksLvmByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create an LVM Volume Group",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesDisksLvm-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Create an LVM Volume Group"
      }
    },
    "/nodes/{node}/disks/lvm/{name}": {
      "delete": {
        "responses": "",
        "summary": "Remove an LVM Volume Group.",
        "operationId": "removeNodesDisksLvmByNodeAndName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "The storage identifier.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Remove an LVM Volume Group.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-NodesDisksLvm-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Remove an LVM Volume Group."
      },
      "summary": "name"
    },
    "/nodes/{node}/disks/lvmthin": {
      "summary": "lvmthin",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesDisksLvmthin"
                }
              }
            }
          }
        },
        "summary": "List LVM thinpools",
        "operationId": "getNodesDisksLvmthinByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "List LVM thinpools"
      },
      "post": {
        "responses": "",
        "summary": "Create an LVM thinpool",
        "operationId": "newNodesDisksLvmthinByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create an LVM thinpool",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesDisksLvmthin-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Create an LVM thinpool"
      }
    },
    "/nodes/{node}/disks/lvmthin/{name}": {
      "delete": {
        "responses": "",
        "summary": "Remove an LVM thin pool.",
        "operationId": "removeNodesDisksLvmthinByNodeAndName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "The storage identifier.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Remove an LVM thin pool.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-NodesDisksLvmthin-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Remove an LVM thin pool."
      },
      "summary": "name"
    },
    "/nodes/{node}/disks/smart": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesDisksSmart"
                }
              }
            }
          }
        },
        "summary": "Get SMART Health of a disk.",
        "operationId": "getNodesDisksSmartByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Get SMART Health of a disk.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesDisksSmart-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Get SMART Health of a disk."
      },
      "summary": "smart"
    },
    "/nodes/{node}/disks/wipedisk": {
      "put": {
        "responses": "",
        "summary": "Wipe a disk or partition.",
        "operationId": "setNodesDisksWipediskByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Wipe a disk or partition.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesDisksWipedisk-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Wipe a disk or partition."
      },
      "summary": "wipedisk"
    },
    "/nodes/{node}/disks/zfs": {
      "summary": "zfs",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesDisksZfs-GET"
                }
              }
            }
          }
        },
        "summary": "List Zpools.",
        "operationId": "getNodesDisksZfsByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "List Zpools."
      },
      "post": {
        "responses": "",
        "summary": "Create a ZFS pool.",
        "operationId": "newNodesDisksZfsByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create a ZFS pool.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesDisksZfs-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Create a ZFS pool."
      }
    },
    "/nodes/{node}/disks/zfs/{name}": {
      "summary": "name",
      "delete": {
        "responses": "",
        "summary": "Destroy a ZFS pool.",
        "operationId": "removeNodesDisksZfsByNodeAndName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "The storage identifier.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Destroy a ZFS pool.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-NodesDisksZfs-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Destroy a ZFS pool."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesDisksZfs"
                }
              }
            }
          }
        },
        "summary": "Get details about a zpool.",
        "operationId": "getNodesDisksZfsByNodeAndName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "The storage identifier.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get details about a zpool."
      }
    },
    "/nodes/{node}/dns": {
      "summary": "dns",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Write DNS settings.",
        "operationId": "setNodesDnsByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Write DNS settings.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesDns-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Write DNS settings."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesDns"
                }
              }
            }
          }
        },
        "summary": "Read DNS settings.",
        "operationId": "getNodesDnsByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Read DNS settings."
      }
    },
    "/nodes/{node}/execute": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesExecute"
                }
              }
            }
          }
        },
        "summary": "Execute multiple commands in order, root only.",
        "operationId": "newNodesExecuteByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Execute multiple commands in order, root only.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesExecute-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Execute multiple commands in order, root only."
      },
      "summary": "execute"
    },
    "/nodes/{node}/firewall": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesFirewall"
                }
              }
            }
          }
        },
        "summary": "Directory index.",
        "operationId": "getNodesFirewallByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Directory index."
      },
      "summary": "firewall"
    },
    "/nodes/{node}/firewall/log": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesFirewallLog"
                }
              }
            }
          }
        },
        "summary": "Read firewall log",
        "operationId": "getNodesFirewallLogByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Read firewall log",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesFirewallLog-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Read firewall log"
      },
      "summary": "log"
    },
    "/nodes/{node}/firewall/options": {
      "summary": "options",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Set Firewall options.",
        "operationId": "setNodesFirewallOptionsByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Set Firewall options.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesFirewallOptions-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Set Firewall options."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesFirewallOptions"
                }
              }
            }
          }
        },
        "summary": "Get host firewall options.",
        "operationId": "getNodesFirewallOptionsByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get host firewall options."
      }
    },
    "/nodes/{node}/firewall/rules": {
      "summary": "rules",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesFirewallRules-GET"
                }
              }
            }
          }
        },
        "summary": "List rules.",
        "operationId": "getNodesFirewallRulesByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "List rules."
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create new rule.",
        "operationId": "newNodesFirewallRulesByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create new rule.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesFirewallRules-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Create new rule."
      }
    },
    "/nodes/{node}/firewall/rules/{pos}": {
      "summary": "pos",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Modify rule data.",
        "operationId": "setNodesFirewallRulesByNodeAndPos",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Modify rule data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesFirewallRules-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Modify rule data."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete rule.",
        "operationId": "removeNodesFirewallRulesByNodeAndPos",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Delete rule.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-NodesFirewallRules-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Delete rule."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesFirewallRules"
                }
              }
            }
          }
        },
        "summary": "Get single rule data.",
        "operationId": "getNodesFirewallRulesByNodeAndPos",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get single rule data."
      }
    },
    "/nodes/{node}/hardware": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesHardware"
                }
              }
            }
          }
        },
        "summary": "Index of hardware types",
        "operationId": "getNodesHardwareByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Index of hardware types"
      },
      "summary": "hardware"
    },
    "/nodes/{node}/hardware/pci": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesHardwarePci"
                }
              }
            }
          }
        },
        "summary": "List local PCI devices.",
        "operationId": "getNodesHardwarePciByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "List local PCI devices.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesHardwarePci-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "List local PCI devices."
      },
      "summary": "pci"
    },
    "/nodes/{node}/hardware/pci/{pci-id-or-mapping}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesHardwarePci-GET"
                }
              }
            }
          }
        },
        "summary": "Index of available pci methods",
        "operationId": "getNodesHardwarePciByNodeAndPciidormapping",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "pci-id-or-mapping",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Index of available pci methods"
      },
      "summary": "pci-id-or-mapping"
    },
    "/nodes/{node}/hardware/pci/{pci-id-or-mapping}/mdev": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesHardwarePciMdev"
                }
              }
            }
          }
        },
        "summary": "List mediated device types for given PCI device.",
        "operationId": "getNodesHardwarePciMdevByNodeAndPciidormapping",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "pci-id-or-mapping",
            "in": "path",
            "description": "The PCI ID or mapping to list the mdev types for.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "List mediated device types for given PCI device."
      },
      "summary": "mdev"
    },
    "/nodes/{node}/hardware/usb": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesHardwareUsb"
                }
              }
            }
          }
        },
        "summary": "List local USB devices.",
        "operationId": "getNodesHardwareUsbByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "List local USB devices."
      },
      "summary": "usb"
    },
    "/nodes/{node}/hosts": {
      "summary": "hosts",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesHosts"
                }
              }
            }
          }
        },
        "summary": "Get the content of /etc/hosts.",
        "operationId": "getNodesHostsByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get the content of /etc/hosts."
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Write /etc/hosts.",
        "operationId": "newNodesHostsByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Write /etc/hosts.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesHosts-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Write /etc/hosts."
      }
    },
    "/nodes/{node}/journal": {
      "get": {
        "responses": "",
        "summary": "Read Journal",
        "operationId": "getNodesJournalByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Read Journal",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesJournal-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Read Journal"
      },
      "summary": "journal"
    },
    "/nodes/{node}/lxc": {
      "summary": "lxc",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesLxc"
                }
              }
            }
          }
        },
        "summary": "LXC container index (per node).",
        "operationId": "getNodesLxcByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "LXC container index (per node)."
      },
      "post": {
        "responses": "",
        "summary": "Create or restore a container.",
        "operationId": "newNodesLxcByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create or restore a container.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesLxc-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Create or restore a container."
      }
    },
    "/nodes/{node}/lxc/{vmid}": {
      "summary": "vmid",
      "delete": {
        "responses": "",
        "summary": "Destroy the container (also delete all uses files).",
        "operationId": "removeNodesLxcByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Destroy the container (also delete all uses files).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-NodesLxc-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Destroy the container (also delete all uses files)."
      },
      "get": {
        "responses": "",
        "summary": "Directory index",
        "operationId": "getNodesLxcByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Directory index"
      }
    },
    "/nodes/{node}/lxc/{vmid}/clone": {
      "post": {
        "responses": "",
        "summary": "Create a container clone/copy",
        "operationId": "newNodesLxcCloneByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create a container clone/copy",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesLxcClone-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Create a container clone/copy"
      },
      "summary": "clone"
    },
    "/nodes/{node}/lxc/{vmid}/config": {
      "summary": "config",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Set container options.",
        "operationId": "setNodesLxcConfigByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Set container options.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesLxcConfig-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Set container options."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesLxcConfig"
                }
              }
            }
          }
        },
        "summary": "Get container configuration.",
        "operationId": "getNodesLxcConfigByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Get container configuration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesLxcConfig-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Get container configuration."
      }
    },
    "/nodes/{node}/lxc/{vmid}/feature": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesLxcFeature"
                }
              }
            }
          }
        },
        "summary": "Check if feature for virtual machine is available.",
        "operationId": "getNodesLxcFeatureByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Check if feature for virtual machine is available.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesLxcFeature-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Check if feature for virtual machine is available."
      },
      "summary": "feature"
    },
    "/nodes/{node}/lxc/{vmid}/firewall": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesLxcFirewall"
                }
              }
            }
          }
        },
        "summary": "Directory index.",
        "operationId": "getNodesLxcFirewallByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Directory index."
      },
      "summary": "firewall"
    },
    "/nodes/{node}/lxc/{vmid}/firewall/aliases": {
      "summary": "aliases",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesLxcFirewallAliases"
                }
              }
            }
          }
        },
        "summary": "List aliases",
        "operationId": "getNodesLxcFirewallAliasesByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "List aliases"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create IP or Network Alias.",
        "operationId": "newNodesLxcFirewallAliasesByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create IP or Network Alias.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesLxcFirewallAliases-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Create IP or Network Alias."
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/aliases/{name}": {
      "summary": "name",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update IP or Network alias.",
        "operationId": "setNodesLxcFirewallAliasesByNodeAndVmidAndName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "Alias name.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update IP or Network alias.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesLxcFirewallAliases-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Update IP or Network alias."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Remove IP or Network alias.",
        "operationId": "removeNodesLxcFirewallAliasesByNodeAndVmidAndName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "Alias name.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Remove IP or Network alias.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-NodesLxcFirewallAliases-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Remove IP or Network alias."
      },
      "get": {
        "responses": "",
        "summary": "Read alias.",
        "operationId": "getNodesLxcFirewallAliasesByNodeAndVmidAndName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "Alias name.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Read alias."
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/ipset": {
      "summary": "ipset",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesLxcFirewallIpset"
                }
              }
            }
          }
        },
        "summary": "List IPSets",
        "operationId": "getNodesLxcFirewallIpsetByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "List IPSets"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create new IPSet",
        "operationId": "newNodesLxcFirewallIpsetByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create new IPSet",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesLxcFirewallIpset-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Create new IPSet"
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/ipset/{name}": {
      "summary": "name",
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete IPSet",
        "operationId": "removeNodesLxcFirewallIpsetByNodeAndVmidAndName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Delete IPSet",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-NodesLxcFirewallIpset-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Delete IPSet"
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesLxcFirewallIpset-GET"
                }
              }
            }
          }
        },
        "summary": "List IPSet content",
        "operationId": "getNodesLxcFirewallIpsetByNodeAndVmidAndName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "List IPSet content"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Add IP or Network to IPSet.",
        "operationId": "newNodesLxcFirewallIpsetByNodeAndVmidAndName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Add IP or Network to IPSet.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesLxcFirewallIpset-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Add IP or Network to IPSet."
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/ipset/{name}/{cidr}": {
      "summary": "cidr",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update IP or Network settings",
        "operationId": "setNodesLxcFirewallIpsetByNodeAndVmidAndNameAndCidr",
        "parameter": [
          {
            "name": "cidr",
            "in": "path",
            "description": "Network/IP specification in CIDR format.",
            "required": true
          },
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update IP or Network settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesLxcFirewallIpset-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Update IP or Network settings"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Remove IP or Network from IPSet.",
        "operationId": "removeNodesLxcFirewallIpsetByNodeAndVmidAndNameAndCidr",
        "parameter": [
          {
            "name": "cidr",
            "in": "path",
            "description": "Network/IP specification in CIDR format.",
            "required": true
          },
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Remove IP or Network from IPSet.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-NodesLxcFirewallIpset-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Remove IP or Network from IPSet."
      },
      "get": {
        "responses": "",
        "summary": "Read IP or Network settings from IPSet.",
        "operationId": "getNodesLxcFirewallIpsetByNodeAndVmidAndNameAndCidr",
        "parameter": [
          {
            "name": "cidr",
            "in": "path",
            "description": "Network/IP specification in CIDR format.",
            "required": true
          },
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Read IP or Network settings from IPSet."
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/log": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesLxcFirewallLog"
                }
              }
            }
          }
        },
        "summary": "Read firewall log",
        "operationId": "getNodesLxcFirewallLogByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Read firewall log",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesLxcFirewallLog-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Read firewall log"
      },
      "summary": "log"
    },
    "/nodes/{node}/lxc/{vmid}/firewall/options": {
      "summary": "options",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Set Firewall options.",
        "operationId": "setNodesLxcFirewallOptionsByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Set Firewall options.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesLxcFirewallOptions-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Set Firewall options."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesLxcFirewallOptions"
                }
              }
            }
          }
        },
        "summary": "Get VM firewall options.",
        "operationId": "getNodesLxcFirewallOptionsByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get VM firewall options."
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/refs": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesLxcFirewallRefs"
                }
              }
            }
          }
        },
        "summary": "Lists possible IPSet/Alias reference which are allowed in source/dest properties.",
        "operationId": "getNodesLxcFirewallRefsByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Lists possible IPSet/Alias reference which are allowed in source/dest properties.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesLxcFirewallRefs-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Lists possible IPSet/Alias reference which are allowed in source/dest properties."
      },
      "summary": "refs"
    },
    "/nodes/{node}/lxc/{vmid}/firewall/rules": {
      "summary": "rules",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesLxcFirewallRules-GET"
                }
              }
            }
          }
        },
        "summary": "List rules.",
        "operationId": "getNodesLxcFirewallRulesByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "List rules."
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create new rule.",
        "operationId": "newNodesLxcFirewallRulesByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create new rule.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesLxcFirewallRules-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Create new rule."
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/rules/{pos}": {
      "summary": "pos",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Modify rule data.",
        "operationId": "setNodesLxcFirewallRulesByNodeAndVmidAndPos",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Modify rule data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesLxcFirewallRules-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Modify rule data."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete rule.",
        "operationId": "removeNodesLxcFirewallRulesByNodeAndVmidAndPos",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Delete rule.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-NodesLxcFirewallRules-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Delete rule."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesLxcFirewallRules"
                }
              }
            }
          }
        },
        "summary": "Get single rule data.",
        "operationId": "getNodesLxcFirewallRulesByNodeAndVmidAndPos",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get single rule data."
      }
    },
    "/nodes/{node}/lxc/{vmid}/interfaces": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesLxcInterfaces"
                }
              }
            }
          }
        },
        "summary": "Get IP addresses of the specified container interface.",
        "operationId": "getNodesLxcInterfacesByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get IP addresses of the specified container interface."
      },
      "summary": "interfaces"
    },
    "/nodes/{node}/lxc/{vmid}/migrate": {
      "post": {
        "responses": "",
        "summary": "Migrate the container to another node. Creates a new migration task.",
        "operationId": "newNodesLxcMigrateByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Migrate the container to another node. Creates a new migration task.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesLxcMigrate-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Migrate the container to another node. Creates a new migration task."
      },
      "summary": "migrate"
    },
    "/nodes/{node}/lxc/{vmid}/move_volume": {
      "post": {
        "responses": "",
        "summary": "Move a rootfs-/mp-volume to a different storage or to a different container.",
        "operationId": "newNodesLxcMovevolumeByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Move a rootfs-/mp-volume to a different storage or to a different container.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesLxcMovevolume-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Move a rootfs-/mp-volume to a different storage or to a different container."
      },
      "summary": "movevolume"
    },
    "/nodes/{node}/lxc/{vmid}/mtunnel": {
      "post": {
        "responses": "",
        "summary": "Migration tunnel endpoint - only for internal use by CT migration.",
        "operationId": "newNodesLxcMtunnelByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Migration tunnel endpoint - only for internal use by CT migration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesLxcMtunnel-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Migration tunnel endpoint - only for internal use by CT migration."
      },
      "summary": "mtunnel"
    },
    "/nodes/{node}/lxc/{vmid}/mtunnelwebsocket": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesLxcMtunnelwebsocket"
                }
              }
            }
          }
        },
        "summary": "Migration tunnel endpoint for websocket upgrade - only for internal use by VM migration.",
        "operationId": "getNodesLxcMtunnelwebsocketByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Migration tunnel endpoint for websocket upgrade - only for internal use by VM migration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesLxcMtunnelwebsocket-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Migration tunnel endpoint for websocket upgrade - only for internal use by VM migration."
      },
      "summary": "mtunnelwebsocket"
    },
    "/nodes/{node}/lxc/{vmid}/pending": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesLxcPending"
                }
              }
            }
          }
        },
        "summary": "Get container configuration, including pending changes.",
        "operationId": "getNodesLxcPendingByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get container configuration, including pending changes."
      },
      "summary": "pending"
    },
    "/nodes/{node}/lxc/{vmid}/remote_migrate": {
      "post": {
        "responses": "",
        "summary": "Migrate the container to another cluster. Creates a new migration task. EXPERIMENTAL feature!",
        "operationId": "newNodesLxcRemotemigrateByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Migrate the container to another cluster. Creates a new migration task. EXPERIMENTAL feature!",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesLxcRemotemigrate-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Migrate the container to another cluster. Creates a new migration task. EXPERIMENTAL feature!"
      },
      "summary": "remotemigrate"
    },
    "/nodes/{node}/lxc/{vmid}/resize": {
      "put": {
        "responses": "",
        "summary": "Resize a container mount point.",
        "operationId": "setNodesLxcResizeByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Resize a container mount point.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesLxcResize-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Resize a container mount point."
      },
      "summary": "resize"
    },
    "/nodes/{node}/lxc/{vmid}/rrd": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesLxcRrd"
                }
              }
            }
          }
        },
        "summary": "Read VM RRD statistics (returns PNG)",
        "operationId": "getNodesLxcRrdByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Read VM RRD statistics (returns PNG)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesLxcRrd-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Read VM RRD statistics (returns PNG)"
      },
      "summary": "rrd"
    },
    "/nodes/{node}/lxc/{vmid}/rrddata": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesLxcRrddata"
                }
              }
            }
          }
        },
        "summary": "Read VM RRD statistics",
        "operationId": "getNodesLxcRrddataByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Read VM RRD statistics",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesLxcRrddata-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Read VM RRD statistics"
      },
      "summary": "rrddata"
    },
    "/nodes/{node}/lxc/{vmid}/snapshot": {
      "summary": "snapshot",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesLxcSnapshot"
                }
              }
            }
          }
        },
        "summary": "List all snapshots.",
        "operationId": "getNodesLxcSnapshotByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "List all snapshots."
      },
      "post": {
        "responses": "",
        "summary": "Snapshot a container.",
        "operationId": "newNodesLxcSnapshotByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Snapshot a container.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesLxcSnapshot-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Snapshot a container."
      }
    },
    "/nodes/{node}/lxc/{vmid}/snapshot/{snapname}": {
      "summary": "snapname",
      "delete": {
        "responses": "",
        "summary": "Delete a LXC snapshot.",
        "operationId": "removeNodesLxcSnapshotByNodeAndVmidAndSnapname",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "snapname",
            "in": "path",
            "description": "The name of the snapshot.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Delete a LXC snapshot.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-NodesLxcSnapshot-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Delete a LXC snapshot."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesLxcSnapshot-GET"
                }
              }
            }
          }
        },
        "summary": "",
        "operationId": "getNodesLxcSnapshotByNodeAndVmidAndSnapname",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "snapname",
            "in": "path",
            "description": "The name of the snapshot.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": ""
      }
    },
    "/nodes/{node}/lxc/{vmid}/snapshot/{snapname}/config": {
      "summary": "config",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update snapshot metadata.",
        "operationId": "setNodesLxcSnapshotConfigByNodeAndVmidAndSnapname",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "snapname",
            "in": "path",
            "description": "The name of the snapshot.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update snapshot metadata.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesLxcSnapshotConfig-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Update snapshot metadata."
      },
      "get": {
        "responses": "",
        "summary": "Get snapshot configuration",
        "operationId": "getNodesLxcSnapshotConfigByNodeAndVmidAndSnapname",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "snapname",
            "in": "path",
            "description": "The name of the snapshot.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get snapshot configuration"
      }
    },
    "/nodes/{node}/lxc/{vmid}/snapshot/{snapname}/rollback": {
      "post": {
        "responses": "",
        "summary": "Rollback LXC state to specified snapshot.",
        "operationId": "newNodesLxcSnapshotRollbackByNodeAndVmidAndSnapname",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "snapname",
            "in": "path",
            "description": "The name of the snapshot.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Rollback LXC state to specified snapshot.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesLxcSnapshotRollback-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Rollback LXC state to specified snapshot."
      },
      "summary": "rollback"
    },
    "/nodes/{node}/lxc/{vmid}/spiceproxy": {
      "post": {
        "responses": "",
        "summary": "Returns a SPICE configuration to connect to the CT.",
        "operationId": "newNodesLxcSpiceproxyByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Returns a SPICE configuration to connect to the CT.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesLxcSpiceproxy-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Returns a SPICE configuration to connect to the CT."
      },
      "summary": "spiceproxy"
    },
    "/nodes/{node}/lxc/{vmid}/status": {
      "get": {
        "responses": "",
        "summary": "Directory index",
        "operationId": "getNodesLxcStatusByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Directory index"
      },
      "summary": "status"
    },
    "/nodes/{node}/lxc/{vmid}/status/current": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesLxcStatusCurrent"
                }
              }
            }
          }
        },
        "summary": "Get virtual machine status.",
        "operationId": "getNodesLxcStatusCurrentByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get virtual machine status."
      },
      "summary": "current"
    },
    "/nodes/{node}/lxc/{vmid}/status/reboot": {
      "post": {
        "responses": "",
        "summary": "Reboot the container by shutting it down, and starting it again. Applies pending changes.",
        "operationId": "newNodesLxcStatusRebootByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Reboot the container by shutting it down, and starting it again. Applies pending changes.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesLxcStatusReboot-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Reboot the container by shutting it down, and starting it again. Applies pending changes."
      },
      "summary": "reboot"
    },
    "/nodes/{node}/lxc/{vmid}/status/resume": {
      "post": {
        "responses": "",
        "summary": "Resume the container.",
        "operationId": "newNodesLxcStatusResumeByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Resume the container."
      },
      "summary": "resume"
    },
    "/nodes/{node}/lxc/{vmid}/status/shutdown": {
      "post": {
        "responses": "",
        "summary": "Shutdown the container. This will trigger a clean shutdown of the container, see lxc-stop(1) for details.",
        "operationId": "newNodesLxcStatusShutdownByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Shutdown the container. This will trigger a clean shutdown of the container, see lxc-stop(1) for details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesLxcStatusShutdown-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Shutdown the container. This will trigger a clean shutdown of the container, see lxc-stop(1) for details."
      },
      "summary": "shutdown"
    },
    "/nodes/{node}/lxc/{vmid}/status/start": {
      "post": {
        "responses": "",
        "summary": "Start the container.",
        "operationId": "newNodesLxcStatusStartByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Start the container.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesLxcStatusStart-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Start the container."
      },
      "summary": "start"
    },
    "/nodes/{node}/lxc/{vmid}/status/stop": {
      "post": {
        "responses": "",
        "summary": "Stop the container. This will abruptly stop all processes running in the container.",
        "operationId": "newNodesLxcStatusStopByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Stop the container. This will abruptly stop all processes running in the container.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesLxcStatusStop-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Stop the container. This will abruptly stop all processes running in the container."
      },
      "summary": "stop"
    },
    "/nodes/{node}/lxc/{vmid}/status/suspend": {
      "post": {
        "responses": "",
        "summary": "Suspend the container. This is experimental.",
        "operationId": "newNodesLxcStatusSuspendByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Suspend the container. This is experimental."
      },
      "summary": "suspend"
    },
    "/nodes/{node}/lxc/{vmid}/template": {
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create a Template.",
        "operationId": "newNodesLxcTemplateByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Create a Template."
      },
      "summary": "template"
    },
    "/nodes/{node}/lxc/{vmid}/termproxy": {
      "post": {
        "responses": "",
        "summary": "Creates a TCP proxy connection.",
        "operationId": "newNodesLxcTermproxyByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Creates a TCP proxy connection."
      },
      "summary": "termproxy"
    },
    "/nodes/{node}/lxc/{vmid}/vncproxy": {
      "post": {
        "responses": "",
        "summary": "Creates a TCP VNC proxy connections.",
        "operationId": "newNodesLxcVncproxyByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Creates a TCP VNC proxy connections.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesLxcVncproxy-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Creates a TCP VNC proxy connections."
      },
      "summary": "vncproxy"
    },
    "/nodes/{node}/lxc/{vmid}/vncwebsocket": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesLxcVncwebsocket"
                }
              }
            }
          }
        },
        "summary": "Opens a weksocket for VNC traffic.",
        "operationId": "getNodesLxcVncwebsocketByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Opens a weksocket for VNC traffic.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesLxcVncwebsocket-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Opens a weksocket for VNC traffic."
      },
      "summary": "vncwebsocket"
    },
    "/nodes/{node}/migrateall": {
      "post": {
        "responses": "",
        "summary": "Migrate all VMs and Containers.",
        "operationId": "newNodesMigrateallByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Migrate all VMs and Containers.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesMigrateall-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Migrate all VMs and Containers."
      },
      "summary": "migrateall"
    },
    "/nodes/{node}/netstat": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesNetstat"
                }
              }
            }
          }
        },
        "summary": "Read tap/vm network device interface counters",
        "operationId": "getNodesNetstatByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Read tap/vm network device interface counters"
      },
      "summary": "netstat"
    },
    "/nodes/{node}/network": {
      "summary": "network",
      "put": {
        "responses": "",
        "summary": "Reload network configuration",
        "operationId": "setNodesNetworkByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Reload network configuration"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Revert network configuration changes.",
        "operationId": "removeNodesNetworkByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Revert network configuration changes."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesNetwork-GET"
                }
              }
            }
          }
        },
        "summary": "List available networks",
        "operationId": "getNodesNetworkByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "List available networks",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesNetwork-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "List available networks"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create network device configuration",
        "operationId": "newNodesNetworkByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create network device configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesNetwork-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Create network device configuration"
      }
    },
    "/nodes/{node}/network/{iface}": {
      "summary": "iface",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update network device configuration",
        "operationId": "setNodesNetworkByNodeAndIface",
        "parameter": [
          {
            "name": "iface",
            "in": "path",
            "description": "Network interface name.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update network device configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesNetwork-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Update network device configuration"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete network device configuration",
        "operationId": "removeNodesNetworkByNodeAndIface",
        "parameter": [
          {
            "name": "iface",
            "in": "path",
            "description": "Network interface name.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Delete network device configuration"
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesNetwork"
                }
              }
            }
          }
        },
        "summary": "Read network device configuration",
        "operationId": "getNodesNetworkByNodeAndIface",
        "parameter": [
          {
            "name": "iface",
            "in": "path",
            "description": "Network interface name.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Read network device configuration"
      }
    },
    "/nodes/{node}/qemu": {
      "summary": "qemu",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemu"
                }
              }
            }
          }
        },
        "summary": "Virtual machine index (per node).",
        "operationId": "getNodesQemuByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Virtual machine index (per node).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesQemu-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Virtual machine index (per node)."
      },
      "post": {
        "responses": "",
        "summary": "Create or restore a virtual machine.",
        "operationId": "newNodesQemuByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create or restore a virtual machine.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemu-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Create or restore a virtual machine."
      }
    },
    "/nodes/{node}/qemu/{vmid}": {
      "summary": "vmid",
      "delete": {
        "responses": "",
        "summary": "Destroy the VM and  all used/owned volumes. Removes any VM specific permissions and firewall rules",
        "operationId": "removeNodesQemuByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Destroy the VM and  all used/owned volumes. Removes any VM specific permissions and firewall rules",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-NodesQemu-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Destroy the VM and  all used/owned volumes. Removes any VM specific permissions and firewall rules"
      },
      "get": {
        "responses": "",
        "summary": "Directory index",
        "operationId": "getNodesQemuByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Directory index"
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent": {
      "summary": "agent",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemuAgent"
                }
              }
            }
          }
        },
        "summary": "QEMU Guest Agent command index.",
        "operationId": "getNodesQemuAgentByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "QEMU Guest Agent command index."
      },
      "post": {
        "responses": "",
        "summary": "Execute QEMU Guest Agent commands.",
        "operationId": "newNodesQemuAgentByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Execute QEMU Guest Agent commands.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuAgent-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Execute QEMU Guest Agent commands."
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/exec": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemuAgentExec"
                }
              }
            }
          }
        },
        "summary": "Executes the given command in the vm via the guest-agent and returns an object with the pid.",
        "operationId": "newNodesQemuAgentExecByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Executes the given command in the vm via the guest-agent and returns an object with the pid.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuAgentExec-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Executes the given command in the vm via the guest-agent and returns an object with the pid."
      },
      "summary": "exec"
    },
    "/nodes/{node}/qemu/{vmid}/agent/exec-status": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemuAgentExecstatus"
                }
              }
            }
          }
        },
        "summary": "Gets the status of the given pid started by the guest-agent",
        "operationId": "getNodesQemuAgentExecstatusByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Gets the status of the given pid started by the guest-agent",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesQemuAgentExecstatus-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Gets the status of the given pid started by the guest-agent"
      },
      "summary": "exec-status"
    },
    "/nodes/{node}/qemu/{vmid}/agent/file-read": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemuAgentFileread"
                }
              }
            }
          }
        },
        "summary": "Reads the given file via guest agent. Is limited to 16777216 bytes.",
        "operationId": "getNodesQemuAgentFilereadByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Reads the given file via guest agent. Is limited to 16777216 bytes.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesQemuAgentFileread-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Reads the given file via guest agent. Is limited to 16777216 bytes."
      },
      "summary": "file-read"
    },
    "/nodes/{node}/qemu/{vmid}/agent/file-write": {
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Writes the given file via guest agent.",
        "operationId": "newNodesQemuAgentFilewriteByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Writes the given file via guest agent.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuAgentFilewrite-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Writes the given file via guest agent."
      },
      "summary": "file-write"
    },
    "/nodes/{node}/qemu/{vmid}/agent/fsfreeze-freeze": {
      "post": {
        "responses": "",
        "summary": "Execute fsfreeze-freeze.",
        "operationId": "newNodesQemuAgentFsfreezefreezeByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Execute fsfreeze-freeze."
      },
      "summary": "fsfreeze-freeze"
    },
    "/nodes/{node}/qemu/{vmid}/agent/fsfreeze-status": {
      "post": {
        "responses": "",
        "summary": "Execute fsfreeze-status.",
        "operationId": "newNodesQemuAgentFsfreezestatusByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Execute fsfreeze-status."
      },
      "summary": "fsfreeze-status"
    },
    "/nodes/{node}/qemu/{vmid}/agent/fsfreeze-thaw": {
      "post": {
        "responses": "",
        "summary": "Execute fsfreeze-thaw.",
        "operationId": "newNodesQemuAgentFsfreezethawByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Execute fsfreeze-thaw."
      },
      "summary": "fsfreeze-thaw"
    },
    "/nodes/{node}/qemu/{vmid}/agent/fstrim": {
      "post": {
        "responses": "",
        "summary": "Execute fstrim.",
        "operationId": "newNodesQemuAgentFstrimByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Execute fstrim."
      },
      "summary": "fstrim"
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-fsinfo": {
      "get": {
        "responses": "",
        "summary": "Execute get-fsinfo.",
        "operationId": "getNodesQemuAgentGetfsinfoByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Execute get-fsinfo."
      },
      "summary": "get-fsinfo"
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-host-name": {
      "get": {
        "responses": "",
        "summary": "Execute get-host-name.",
        "operationId": "getNodesQemuAgentGethostnameByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Execute get-host-name."
      },
      "summary": "get-host-name"
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-memory-block-info": {
      "get": {
        "responses": "",
        "summary": "Execute get-memory-block-info.",
        "operationId": "getNodesQemuAgentGetmemoryblockinfoByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Execute get-memory-block-info."
      },
      "summary": "get-memory-block-info"
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-memory-blocks": {
      "get": {
        "responses": "",
        "summary": "Execute get-memory-blocks.",
        "operationId": "getNodesQemuAgentGetmemoryblocksByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Execute get-memory-blocks."
      },
      "summary": "get-memory-blocks"
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-osinfo": {
      "get": {
        "responses": "",
        "summary": "Execute get-osinfo.",
        "operationId": "getNodesQemuAgentGetosinfoByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Execute get-osinfo."
      },
      "summary": "get-osinfo"
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-time": {
      "get": {
        "responses": "",
        "summary": "Execute get-time.",
        "operationId": "getNodesQemuAgentGettimeByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Execute get-time."
      },
      "summary": "get-time"
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-timezone": {
      "get": {
        "responses": "",
        "summary": "Execute get-timezone.",
        "operationId": "getNodesQemuAgentGettimezoneByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Execute get-timezone."
      },
      "summary": "get-timezone"
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-users": {
      "get": {
        "responses": "",
        "summary": "Execute get-users.",
        "operationId": "getNodesQemuAgentGetusersByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Execute get-users."
      },
      "summary": "get-users"
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-vcpus": {
      "get": {
        "responses": "",
        "summary": "Execute get-vcpus.",
        "operationId": "getNodesQemuAgentGetvcpusByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Execute get-vcpus."
      },
      "summary": "get-vcpus"
    },
    "/nodes/{node}/qemu/{vmid}/agent/info": {
      "get": {
        "responses": "",
        "summary": "Execute info.",
        "operationId": "getNodesQemuAgentInfoByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Execute info."
      },
      "summary": "info"
    },
    "/nodes/{node}/qemu/{vmid}/agent/network-get-interfaces": {
      "get": {
        "responses": "",
        "summary": "Execute network-get-interfaces.",
        "operationId": "getNodesQemuAgentNetworkgetinterfacesByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Execute network-get-interfaces."
      },
      "summary": "network-get-interfaces"
    },
    "/nodes/{node}/qemu/{vmid}/agent/ping": {
      "post": {
        "responses": "",
        "summary": "Execute ping.",
        "operationId": "newNodesQemuAgentPingByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Execute ping."
      },
      "summary": "ping"
    },
    "/nodes/{node}/qemu/{vmid}/agent/set-user-password": {
      "post": {
        "responses": "",
        "summary": "Sets the password for the given user to the given password",
        "operationId": "newNodesQemuAgentSetuserpasswordByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Sets the password for the given user to the given password",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuAgentSetuserpassword-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Sets the password for the given user to the given password"
      },
      "summary": "set-user-password"
    },
    "/nodes/{node}/qemu/{vmid}/agent/shutdown": {
      "post": {
        "responses": "",
        "summary": "Execute shutdown.",
        "operationId": "newNodesQemuAgentShutdownByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Execute shutdown."
      },
      "summary": "shutdown"
    },
    "/nodes/{node}/qemu/{vmid}/agent/suspend-disk": {
      "post": {
        "responses": "",
        "summary": "Execute suspend-disk.",
        "operationId": "newNodesQemuAgentSuspenddiskByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Execute suspend-disk."
      },
      "summary": "suspend-disk"
    },
    "/nodes/{node}/qemu/{vmid}/agent/suspend-hybrid": {
      "post": {
        "responses": "",
        "summary": "Execute suspend-hybrid.",
        "operationId": "newNodesQemuAgentSuspendhybridByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Execute suspend-hybrid."
      },
      "summary": "suspend-hybrid"
    },
    "/nodes/{node}/qemu/{vmid}/agent/suspend-ram": {
      "post": {
        "responses": "",
        "summary": "Execute suspend-ram.",
        "operationId": "newNodesQemuAgentSuspendramByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Execute suspend-ram."
      },
      "summary": "suspend-ram"
    },
    "/nodes/{node}/qemu/{vmid}/clone": {
      "post": {
        "responses": "",
        "summary": "Create a copy of virtual machine/template.",
        "operationId": "newNodesQemuCloneByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create a copy of virtual machine/template.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuClone-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Create a copy of virtual machine/template."
      },
      "summary": "clone"
    },
    "/nodes/{node}/qemu/{vmid}/cloudinit": {
      "summary": "cloudinit",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Regenerate and change cloudinit config drive.",
        "operationId": "setNodesQemuCloudinitByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Regenerate and change cloudinit config drive."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemuCloudinit"
                }
              }
            }
          }
        },
        "summary": "Get the cloudinit configuration with both current and pending values.",
        "operationId": "getNodesQemuCloudinitByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get the cloudinit configuration with both current and pending values."
      }
    },
    "/nodes/{node}/qemu/{vmid}/cloudinit/dump": {
      "get": {
        "responses": "",
        "summary": "Get automatically generated cloudinit config.",
        "operationId": "getNodesQemuCloudinitDumpByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Get automatically generated cloudinit config.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesQemuCloudinitDump-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Get automatically generated cloudinit config."
      },
      "summary": "dump"
    },
    "/nodes/{node}/qemu/{vmid}/config": {
      "summary": "config",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Set virtual machine options (synchronous API) - You should consider using the POST method instead for any actions involving hotplug or storage allocation.",
        "operationId": "setNodesQemuConfigByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Set virtual machine options (synchronous API) - You should consider using the POST method instead for any actions involving hotplug or storage allocation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesQemuConfig-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Set virtual machine options (synchronous API) - You should consider using the POST method instead for any actions involving hotplug or storage allocation."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemuConfig"
                }
              }
            }
          }
        },
        "summary": "Get the virtual machine configuration with pending configuration changes applied. Set the 'current' parameter to get the current configuration instead.",
        "operationId": "getNodesQemuConfigByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Get the virtual machine configuration with pending configuration changes applied. Set the 'current' parameter to get the current configuration instead.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesQemuConfig-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Get the virtual machine configuration with pending configuration changes applied. Set the 'current' parameter to get the current configuration instead."
      },
      "post": {
        "responses": "",
        "summary": "Set virtual machine options (asynchronous API).",
        "operationId": "newNodesQemuConfigByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Set virtual machine options (asynchronous API).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuConfig-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Set virtual machine options (asynchronous API)."
      }
    },
    "/nodes/{node}/qemu/{vmid}/feature": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemuFeature"
                }
              }
            }
          }
        },
        "summary": "Check if feature for virtual machine is available.",
        "operationId": "getNodesQemuFeatureByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Check if feature for virtual machine is available.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesQemuFeature-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Check if feature for virtual machine is available."
      },
      "summary": "feature"
    },
    "/nodes/{node}/qemu/{vmid}/firewall": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemuFirewall"
                }
              }
            }
          }
        },
        "summary": "Directory index.",
        "operationId": "getNodesQemuFirewallByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Directory index."
      },
      "summary": "firewall"
    },
    "/nodes/{node}/qemu/{vmid}/firewall/aliases": {
      "summary": "aliases",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemuFirewallAliases"
                }
              }
            }
          }
        },
        "summary": "List aliases",
        "operationId": "getNodesQemuFirewallAliasesByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "List aliases"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create IP or Network Alias.",
        "operationId": "newNodesQemuFirewallAliasesByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create IP or Network Alias.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuFirewallAliases-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Create IP or Network Alias."
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/aliases/{name}": {
      "summary": "name",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update IP or Network alias.",
        "operationId": "setNodesQemuFirewallAliasesByNodeAndVmidAndName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "Alias name.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update IP or Network alias.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesQemuFirewallAliases-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Update IP or Network alias."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Remove IP or Network alias.",
        "operationId": "removeNodesQemuFirewallAliasesByNodeAndVmidAndName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "Alias name.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Remove IP or Network alias.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-NodesQemuFirewallAliases-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Remove IP or Network alias."
      },
      "get": {
        "responses": "",
        "summary": "Read alias.",
        "operationId": "getNodesQemuFirewallAliasesByNodeAndVmidAndName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "Alias name.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Read alias."
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/ipset": {
      "summary": "ipset",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemuFirewallIpset"
                }
              }
            }
          }
        },
        "summary": "List IPSets",
        "operationId": "getNodesQemuFirewallIpsetByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "List IPSets"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create new IPSet",
        "operationId": "newNodesQemuFirewallIpsetByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create new IPSet",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuFirewallIpset-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Create new IPSet"
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/ipset/{name}": {
      "summary": "name",
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete IPSet",
        "operationId": "removeNodesQemuFirewallIpsetByNodeAndVmidAndName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Delete IPSet",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-NodesQemuFirewallIpset-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Delete IPSet"
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemuFirewallIpset-GET"
                }
              }
            }
          }
        },
        "summary": "List IPSet content",
        "operationId": "getNodesQemuFirewallIpsetByNodeAndVmidAndName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "List IPSet content"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Add IP or Network to IPSet.",
        "operationId": "newNodesQemuFirewallIpsetByNodeAndVmidAndName",
        "parameter": [
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Add IP or Network to IPSet.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuFirewallIpset-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Add IP or Network to IPSet."
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/ipset/{name}/{cidr}": {
      "summary": "cidr",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update IP or Network settings",
        "operationId": "setNodesQemuFirewallIpsetByNodeAndVmidAndNameAndCidr",
        "parameter": [
          {
            "name": "cidr",
            "in": "path",
            "description": "Network/IP specification in CIDR format.",
            "required": true
          },
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update IP or Network settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesQemuFirewallIpset-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Update IP or Network settings"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Remove IP or Network from IPSet.",
        "operationId": "removeNodesQemuFirewallIpsetByNodeAndVmidAndNameAndCidr",
        "parameter": [
          {
            "name": "cidr",
            "in": "path",
            "description": "Network/IP specification in CIDR format.",
            "required": true
          },
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Remove IP or Network from IPSet.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-NodesQemuFirewallIpset-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Remove IP or Network from IPSet."
      },
      "get": {
        "responses": "",
        "summary": "Read IP or Network settings from IPSet.",
        "operationId": "getNodesQemuFirewallIpsetByNodeAndVmidAndNameAndCidr",
        "parameter": [
          {
            "name": "cidr",
            "in": "path",
            "description": "Network/IP specification in CIDR format.",
            "required": true
          },
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Read IP or Network settings from IPSet."
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/log": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemuFirewallLog"
                }
              }
            }
          }
        },
        "summary": "Read firewall log",
        "operationId": "getNodesQemuFirewallLogByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Read firewall log",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesQemuFirewallLog-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Read firewall log"
      },
      "summary": "log"
    },
    "/nodes/{node}/qemu/{vmid}/firewall/options": {
      "summary": "options",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Set Firewall options.",
        "operationId": "setNodesQemuFirewallOptionsByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Set Firewall options.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesQemuFirewallOptions-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Set Firewall options."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemuFirewallOptions"
                }
              }
            }
          }
        },
        "summary": "Get VM firewall options.",
        "operationId": "getNodesQemuFirewallOptionsByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get VM firewall options."
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/refs": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemuFirewallRefs"
                }
              }
            }
          }
        },
        "summary": "Lists possible IPSet/Alias reference which are allowed in source/dest properties.",
        "operationId": "getNodesQemuFirewallRefsByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Lists possible IPSet/Alias reference which are allowed in source/dest properties.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesQemuFirewallRefs-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Lists possible IPSet/Alias reference which are allowed in source/dest properties."
      },
      "summary": "refs"
    },
    "/nodes/{node}/qemu/{vmid}/firewall/rules": {
      "summary": "rules",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemuFirewallRules-GET"
                }
              }
            }
          }
        },
        "summary": "List rules.",
        "operationId": "getNodesQemuFirewallRulesByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "List rules."
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create new rule.",
        "operationId": "newNodesQemuFirewallRulesByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create new rule.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuFirewallRules-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Create new rule."
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/rules/{pos}": {
      "summary": "pos",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Modify rule data.",
        "operationId": "setNodesQemuFirewallRulesByNodeAndVmidAndPos",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Modify rule data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesQemuFirewallRules-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Modify rule data."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete rule.",
        "operationId": "removeNodesQemuFirewallRulesByNodeAndVmidAndPos",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Delete rule.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-NodesQemuFirewallRules-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Delete rule."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemuFirewallRules"
                }
              }
            }
          }
        },
        "summary": "Get single rule data.",
        "operationId": "getNodesQemuFirewallRulesByNodeAndVmidAndPos",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get single rule data."
      }
    },
    "/nodes/{node}/qemu/{vmid}/migrate": {
      "summary": "migrate",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemuMigrate"
                }
              }
            }
          }
        },
        "summary": "Get preconditions for migration.",
        "operationId": "getNodesQemuMigrateByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Get preconditions for migration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesQemuMigrate-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Get preconditions for migration."
      },
      "post": {
        "responses": "",
        "summary": "Migrate virtual machine. Creates a new migration task.",
        "operationId": "newNodesQemuMigrateByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Migrate virtual machine. Creates a new migration task.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuMigrate-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Migrate virtual machine. Creates a new migration task."
      }
    },
    "/nodes/{node}/qemu/{vmid}/monitor": {
      "post": {
        "responses": "",
        "summary": "Execute QEMU monitor commands.",
        "operationId": "newNodesQemuMonitorByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Execute QEMU monitor commands.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuMonitor-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Execute QEMU monitor commands."
      },
      "summary": "monitor"
    },
    "/nodes/{node}/qemu/{vmid}/move_disk": {
      "post": {
        "responses": "",
        "summary": "Move volume to different storage or to a different VM.",
        "operationId": "newNodesQemuMovediskByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Move volume to different storage or to a different VM.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuMovedisk-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Move volume to different storage or to a different VM."
      },
      "summary": "movedisk"
    },
    "/nodes/{node}/qemu/{vmid}/mtunnel": {
      "post": {
        "responses": "",
        "summary": "Migration tunnel endpoint - only for internal use by VM migration.",
        "operationId": "newNodesQemuMtunnelByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Migration tunnel endpoint - only for internal use by VM migration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuMtunnel-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Migration tunnel endpoint - only for internal use by VM migration."
      },
      "summary": "mtunnel"
    },
    "/nodes/{node}/qemu/{vmid}/mtunnelwebsocket": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemuMtunnelwebsocket"
                }
              }
            }
          }
        },
        "summary": "Migration tunnel endpoint for websocket upgrade - only for internal use by VM migration.",
        "operationId": "getNodesQemuMtunnelwebsocketByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Migration tunnel endpoint for websocket upgrade - only for internal use by VM migration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesQemuMtunnelwebsocket-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Migration tunnel endpoint for websocket upgrade - only for internal use by VM migration."
      },
      "summary": "mtunnelwebsocket"
    },
    "/nodes/{node}/qemu/{vmid}/pending": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemuPending"
                }
              }
            }
          }
        },
        "summary": "Get the virtual machine configuration with both current and pending values.",
        "operationId": "getNodesQemuPendingByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get the virtual machine configuration with both current and pending values."
      },
      "summary": "pending"
    },
    "/nodes/{node}/qemu/{vmid}/remote_migrate": {
      "post": {
        "responses": "",
        "summary": "Migrate virtual machine to a remote cluster. Creates a new migration task. EXPERIMENTAL feature!",
        "operationId": "newNodesQemuRemotemigrateByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Migrate virtual machine to a remote cluster. Creates a new migration task. EXPERIMENTAL feature!",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuRemotemigrate-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Migrate virtual machine to a remote cluster. Creates a new migration task. EXPERIMENTAL feature!"
      },
      "summary": "remotemigrate"
    },
    "/nodes/{node}/qemu/{vmid}/resize": {
      "put": {
        "responses": "",
        "summary": "Extend volume size.",
        "operationId": "setNodesQemuResizeByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Extend volume size.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesQemuResize-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Extend volume size."
      },
      "summary": "resize"
    },
    "/nodes/{node}/qemu/{vmid}/rrd": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemuRrd"
                }
              }
            }
          }
        },
        "summary": "Read VM RRD statistics (returns PNG)",
        "operationId": "getNodesQemuRrdByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Read VM RRD statistics (returns PNG)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesQemuRrd-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Read VM RRD statistics (returns PNG)"
      },
      "summary": "rrd"
    },
    "/nodes/{node}/qemu/{vmid}/rrddata": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemuRrddata"
                }
              }
            }
          }
        },
        "summary": "Read VM RRD statistics",
        "operationId": "getNodesQemuRrddataByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Read VM RRD statistics",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesQemuRrddata-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Read VM RRD statistics"
      },
      "summary": "rrddata"
    },
    "/nodes/{node}/qemu/{vmid}/sendkey": {
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Send key event to virtual machine.",
        "operationId": "setNodesQemuSendkeyByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Send key event to virtual machine.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesQemuSendkey-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Send key event to virtual machine."
      },
      "summary": "sendkey"
    },
    "/nodes/{node}/qemu/{vmid}/snapshot": {
      "summary": "snapshot",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemuSnapshot"
                }
              }
            }
          }
        },
        "summary": "List all snapshots.",
        "operationId": "getNodesQemuSnapshotByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "List all snapshots."
      },
      "post": {
        "responses": "",
        "summary": "Snapshot a VM.",
        "operationId": "newNodesQemuSnapshotByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Snapshot a VM.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuSnapshot-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Snapshot a VM."
      }
    },
    "/nodes/{node}/qemu/{vmid}/snapshot/{snapname}": {
      "summary": "snapname",
      "delete": {
        "responses": "",
        "summary": "Delete a VM snapshot.",
        "operationId": "removeNodesQemuSnapshotByNodeAndVmidAndSnapname",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "snapname",
            "in": "path",
            "description": "The name of the snapshot.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Delete a VM snapshot.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-NodesQemuSnapshot-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Delete a VM snapshot."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemuSnapshot-GET"
                }
              }
            }
          }
        },
        "summary": "",
        "operationId": "getNodesQemuSnapshotByNodeAndVmidAndSnapname",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "snapname",
            "in": "path",
            "description": "The name of the snapshot.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": ""
      }
    },
    "/nodes/{node}/qemu/{vmid}/snapshot/{snapname}/config": {
      "summary": "config",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update snapshot metadata.",
        "operationId": "setNodesQemuSnapshotConfigByNodeAndVmidAndSnapname",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "snapname",
            "in": "path",
            "description": "The name of the snapshot.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update snapshot metadata.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesQemuSnapshotConfig-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Update snapshot metadata."
      },
      "get": {
        "responses": "",
        "summary": "Get snapshot configuration",
        "operationId": "getNodesQemuSnapshotConfigByNodeAndVmidAndSnapname",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "snapname",
            "in": "path",
            "description": "The name of the snapshot.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get snapshot configuration"
      }
    },
    "/nodes/{node}/qemu/{vmid}/snapshot/{snapname}/rollback": {
      "post": {
        "responses": "",
        "summary": "Rollback VM state to specified snapshot.",
        "operationId": "newNodesQemuSnapshotRollbackByNodeAndVmidAndSnapname",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "snapname",
            "in": "path",
            "description": "The name of the snapshot.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Rollback VM state to specified snapshot.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuSnapshotRollback-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Rollback VM state to specified snapshot."
      },
      "summary": "rollback"
    },
    "/nodes/{node}/qemu/{vmid}/spiceproxy": {
      "post": {
        "responses": "",
        "summary": "Returns a SPICE configuration to connect to the VM.",
        "operationId": "newNodesQemuSpiceproxyByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Returns a SPICE configuration to connect to the VM.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuSpiceproxy-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Returns a SPICE configuration to connect to the VM."
      },
      "summary": "spiceproxy"
    },
    "/nodes/{node}/qemu/{vmid}/status": {
      "get": {
        "responses": "",
        "summary": "Directory index",
        "operationId": "getNodesQemuStatusByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Directory index"
      },
      "summary": "status"
    },
    "/nodes/{node}/qemu/{vmid}/status/current": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemuStatusCurrent"
                }
              }
            }
          }
        },
        "summary": "Get virtual machine status.",
        "operationId": "getNodesQemuStatusCurrentByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get virtual machine status."
      },
      "summary": "current"
    },
    "/nodes/{node}/qemu/{vmid}/status/reboot": {
      "post": {
        "responses": "",
        "summary": "Reboot the VM by shutting it down, and starting it again. Applies pending changes.",
        "operationId": "newNodesQemuStatusRebootByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Reboot the VM by shutting it down, and starting it again. Applies pending changes.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuStatusReboot-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Reboot the VM by shutting it down, and starting it again. Applies pending changes."
      },
      "summary": "reboot"
    },
    "/nodes/{node}/qemu/{vmid}/status/reset": {
      "post": {
        "responses": "",
        "summary": "Reset virtual machine.",
        "operationId": "newNodesQemuStatusResetByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Reset virtual machine.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuStatusReset-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Reset virtual machine."
      },
      "summary": "reset"
    },
    "/nodes/{node}/qemu/{vmid}/status/resume": {
      "post": {
        "responses": "",
        "summary": "Resume virtual machine.",
        "operationId": "newNodesQemuStatusResumeByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Resume virtual machine.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuStatusResume-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Resume virtual machine."
      },
      "summary": "resume"
    },
    "/nodes/{node}/qemu/{vmid}/status/shutdown": {
      "post": {
        "responses": "",
        "summary": "Shutdown virtual machine. This is similar to pressing the power button on a physical machine. This will send an ACPI event for the guest OS, which should then proceed to a clean shutdown.",
        "operationId": "newNodesQemuStatusShutdownByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Shutdown virtual machine. This is similar to pressing the power button on a physical machine. This will send an ACPI event for the guest OS, which should then proceed to a clean shutdown.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuStatusShutdown-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Shutdown virtual machine. This is similar to pressing the power button on a physical machine. This will send an ACPI event for the guest OS, which should then proceed to a clean shutdown."
      },
      "summary": "shutdown"
    },
    "/nodes/{node}/qemu/{vmid}/status/start": {
      "post": {
        "responses": "",
        "summary": "Start virtual machine.",
        "operationId": "newNodesQemuStatusStartByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Start virtual machine.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuStatusStart-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Start virtual machine."
      },
      "summary": "start"
    },
    "/nodes/{node}/qemu/{vmid}/status/stop": {
      "post": {
        "responses": "",
        "summary": "Stop virtual machine. The qemu process will exit immediately. This is akin to pulling the power plug of a running computer and may damage the VM data.",
        "operationId": "newNodesQemuStatusStopByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Stop virtual machine. The qemu process will exit immediately. This is akin to pulling the power plug of a running computer and may damage the VM data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuStatusStop-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Stop virtual machine. The qemu process will exit immediately. This is akin to pulling the power plug of a running computer and may damage the VM data."
      },
      "summary": "stop"
    },
    "/nodes/{node}/qemu/{vmid}/status/suspend": {
      "post": {
        "responses": "",
        "summary": "Suspend virtual machine.",
        "operationId": "newNodesQemuStatusSuspendByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Suspend virtual machine.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuStatusSuspend-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Suspend virtual machine."
      },
      "summary": "suspend"
    },
    "/nodes/{node}/qemu/{vmid}/template": {
      "post": {
        "responses": "",
        "summary": "Create a Template.",
        "operationId": "newNodesQemuTemplateByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create a Template.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuTemplate-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Create a Template."
      },
      "summary": "template"
    },
    "/nodes/{node}/qemu/{vmid}/termproxy": {
      "post": {
        "responses": "",
        "summary": "Creates a TCP proxy connections.",
        "operationId": "newNodesQemuTermproxyByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Creates a TCP proxy connections.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuTermproxy-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Creates a TCP proxy connections."
      },
      "summary": "termproxy"
    },
    "/nodes/{node}/qemu/{vmid}/unlink": {
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Unlink/delete disk images.",
        "operationId": "setNodesQemuUnlinkByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Unlink/delete disk images.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesQemuUnlink-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Unlink/delete disk images."
      },
      "summary": "unlink"
    },
    "/nodes/{node}/qemu/{vmid}/vncproxy": {
      "post": {
        "responses": "",
        "summary": "Creates a TCP VNC proxy connections.",
        "operationId": "newNodesQemuVncproxyByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Creates a TCP VNC proxy connections.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesQemuVncproxy-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Creates a TCP VNC proxy connections."
      },
      "summary": "vncproxy"
    },
    "/nodes/{node}/qemu/{vmid}/vncwebsocket": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQemuVncwebsocket"
                }
              }
            }
          }
        },
        "summary": "Opens a weksocket for VNC traffic.",
        "operationId": "getNodesQemuVncwebsocketByNodeAndVmid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Opens a weksocket for VNC traffic.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesQemuVncwebsocket-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Opens a weksocket for VNC traffic."
      },
      "summary": "vncwebsocket"
    },
    "/nodes/{node}/query-url-metadata": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesQueryurlmetadata"
                }
              }
            }
          }
        },
        "summary": "Query metadata of an URL: file size, file name and mime type.",
        "operationId": "getNodesQueryurlmetadataByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Query metadata of an URL: file size, file name and mime type.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesQueryurlmetadata-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Query metadata of an URL: file size, file name and mime type."
      },
      "summary": "query-url-metadata"
    },
    "/nodes/{node}/replication": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesReplication"
                }
              }
            }
          }
        },
        "summary": "List status of all replication jobs on this node.",
        "operationId": "getNodesReplicationByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "List status of all replication jobs on this node.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesReplication-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "List status of all replication jobs on this node."
      },
      "summary": "replication"
    },
    "/nodes/{node}/replication/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesReplication-GET"
                }
              }
            }
          }
        },
        "summary": "Directory index.",
        "operationId": "getNodesReplicationByNodeAndId",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": "Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Directory index."
      },
      "summary": "id"
    },
    "/nodes/{node}/replication/{id}/log": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesReplicationLog"
                }
              }
            }
          }
        },
        "summary": "Read replication job log.",
        "operationId": "getNodesReplicationLogByNodeAndId",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": "Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Read replication job log.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesReplicationLog-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Read replication job log."
      },
      "summary": "log"
    },
    "/nodes/{node}/replication/{id}/schedule_now": {
      "post": {
        "responses": "",
        "summary": "Schedule replication job to start as soon as possible.",
        "operationId": "newNodesReplicationSchedulenowByNodeAndId",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": "Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Schedule replication job to start as soon as possible."
      },
      "summary": "schedulenow"
    },
    "/nodes/{node}/replication/{id}/status": {
      "get": {
        "responses": "",
        "summary": "Get replication job status.",
        "operationId": "getNodesReplicationStatusByNodeAndId",
        "parameter": [
          {
            "name": "id",
            "in": "path",
            "description": "Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.",
            "required": true
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get replication job status."
      },
      "summary": "status"
    },
    "/nodes/{node}/report": {
      "get": {
        "responses": "",
        "summary": "Gather various systems information about a node",
        "operationId": "getNodesReportByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Gather various systems information about a node"
      },
      "summary": "report"
    },
    "/nodes/{node}/rrd": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesRrd"
                }
              }
            }
          }
        },
        "summary": "Read node RRD statistics (returns PNG)",
        "operationId": "getNodesRrdByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Read node RRD statistics (returns PNG)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesRrd-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Read node RRD statistics (returns PNG)"
      },
      "summary": "rrd"
    },
    "/nodes/{node}/rrddata": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesRrddata"
                }
              }
            }
          }
        },
        "summary": "Read node RRD statistics",
        "operationId": "getNodesRrddataByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Read node RRD statistics",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesRrddata-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Read node RRD statistics"
      },
      "summary": "rrddata"
    },
    "/nodes/{node}/scan": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesScan"
                }
              }
            }
          }
        },
        "summary": "Index of available scan methods",
        "operationId": "getNodesScanByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Index of available scan methods"
      },
      "summary": "scan"
    },
    "/nodes/{node}/scan/cifs": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesScanCifs"
                }
              }
            }
          }
        },
        "summary": "Scan remote CIFS server.",
        "operationId": "getNodesScanCifsByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Scan remote CIFS server.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesScanCifs-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Scan remote CIFS server."
      },
      "summary": "cifs"
    },
    "/nodes/{node}/scan/glusterfs": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesScanGlusterfs"
                }
              }
            }
          }
        },
        "summary": "Scan remote GlusterFS server.",
        "operationId": "getNodesScanGlusterfsByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Scan remote GlusterFS server.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesScanGlusterfs-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Scan remote GlusterFS server."
      },
      "summary": "glusterfs"
    },
    "/nodes/{node}/scan/iscsi": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesScanIscsi"
                }
              }
            }
          }
        },
        "summary": "Scan remote iSCSI server.",
        "operationId": "getNodesScanIscsiByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Scan remote iSCSI server.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesScanIscsi-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Scan remote iSCSI server."
      },
      "summary": "iscsi"
    },
    "/nodes/{node}/scan/lvm": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesScanLvm"
                }
              }
            }
          }
        },
        "summary": "List local LVM volume groups.",
        "operationId": "getNodesScanLvmByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "List local LVM volume groups."
      },
      "summary": "lvm"
    },
    "/nodes/{node}/scan/lvmthin": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesScanLvmthin"
                }
              }
            }
          }
        },
        "summary": "List local LVM Thin Pools.",
        "operationId": "getNodesScanLvmthinByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "List local LVM Thin Pools.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesScanLvmthin-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "List local LVM Thin Pools."
      },
      "summary": "lvmthin"
    },
    "/nodes/{node}/scan/nfs": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesScanNfs"
                }
              }
            }
          }
        },
        "summary": "Scan remote NFS server.",
        "operationId": "getNodesScanNfsByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Scan remote NFS server.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesScanNfs-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Scan remote NFS server."
      },
      "summary": "nfs"
    },
    "/nodes/{node}/scan/pbs": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesScanPbs"
                }
              }
            }
          }
        },
        "summary": "Scan remote Proxmox Backup Server.",
        "operationId": "getNodesScanPbsByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Scan remote Proxmox Backup Server.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesScanPbs-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Scan remote Proxmox Backup Server."
      },
      "summary": "pbs"
    },
    "/nodes/{node}/scan/zfs": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesScanZfs"
                }
              }
            }
          }
        },
        "summary": "Scan zfs pool list on local node.",
        "operationId": "getNodesScanZfsByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Scan zfs pool list on local node."
      },
      "summary": "zfs"
    },
    "/nodes/{node}/sdn": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesSdn"
                }
              }
            }
          }
        },
        "summary": "SDN index.",
        "operationId": "getNodesSdnByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "SDN index."
      },
      "summary": "sdn"
    },
    "/nodes/{node}/sdn/zones": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesSdnZones"
                }
              }
            }
          }
        },
        "summary": "Get status for all zones.",
        "operationId": "getNodesSdnZonesByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get status for all zones."
      },
      "summary": "zones"
    },
    "/nodes/{node}/sdn/zones/{zone}": {
      "get": {
        "responses": "",
        "summary": "",
        "operationId": "getNodesSdnZonesByNodeAndZone",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "zone",
            "in": "path",
            "description": "The SDN zone object identifier.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": ""
      },
      "summary": "zone"
    },
    "/nodes/{node}/sdn/zones/{zone}/content": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesSdnZonesContent"
                }
              }
            }
          }
        },
        "summary": "List zone content.",
        "operationId": "getNodesSdnZonesContentByNodeAndZone",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "zone",
            "in": "path",
            "description": "The SDN zone object identifier.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "List zone content."
      },
      "summary": "content"
    },
    "/nodes/{node}/services": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesServices"
                }
              }
            }
          }
        },
        "summary": "Service list.",
        "operationId": "getNodesServicesByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Service list."
      },
      "summary": "services"
    },
    "/nodes/{node}/services/{service}": {
      "get": {
        "responses": "",
        "summary": "Directory index",
        "operationId": "getNodesServicesByNodeAndService",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "service",
            "in": "path",
            "description": "Service ID",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Directory index"
      },
      "summary": "service"
    },
    "/nodes/{node}/services/{service}/reload": {
      "post": {
        "responses": "",
        "summary": "Reload service. Falls back to restart if service cannot be reloaded.",
        "operationId": "newNodesServicesReloadByNodeAndService",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "service",
            "in": "path",
            "description": "Service ID",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Reload service. Falls back to restart if service cannot be reloaded."
      },
      "summary": "reload"
    },
    "/nodes/{node}/services/{service}/restart": {
      "post": {
        "responses": "",
        "summary": "Hard restart service. Use reload if you want to reduce interruptions.",
        "operationId": "newNodesServicesRestartByNodeAndService",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "service",
            "in": "path",
            "description": "Service ID",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Hard restart service. Use reload if you want to reduce interruptions."
      },
      "summary": "restart"
    },
    "/nodes/{node}/services/{service}/start": {
      "post": {
        "responses": "",
        "summary": "Start service.",
        "operationId": "newNodesServicesStartByNodeAndService",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "service",
            "in": "path",
            "description": "Service ID",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Start service."
      },
      "summary": "start"
    },
    "/nodes/{node}/services/{service}/state": {
      "get": {
        "responses": "",
        "summary": "Read service properties",
        "operationId": "getNodesServicesStateByNodeAndService",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "service",
            "in": "path",
            "description": "Service ID",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Read service properties"
      },
      "summary": "state"
    },
    "/nodes/{node}/services/{service}/stop": {
      "post": {
        "responses": "",
        "summary": "Stop service.",
        "operationId": "newNodesServicesStopByNodeAndService",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "service",
            "in": "path",
            "description": "Service ID",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Stop service."
      },
      "summary": "stop"
    },
    "/nodes/{node}/spiceshell": {
      "post": {
        "responses": "",
        "summary": "Creates a SPICE shell.",
        "operationId": "newNodesSpiceshellByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Creates a SPICE shell.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesSpiceshell-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Creates a SPICE shell."
      },
      "summary": "spiceshell"
    },
    "/nodes/{node}/startall": {
      "post": {
        "responses": "",
        "summary": "Start all VMs and containers located on this node (by default only those with onboot=1).",
        "operationId": "newNodesStartallByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Start all VMs and containers located on this node (by default only those with onboot=1).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesStartall-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Start all VMs and containers located on this node (by default only those with onboot=1)."
      },
      "summary": "startall"
    },
    "/nodes/{node}/status": {
      "summary": "status",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesStatus"
                }
              }
            }
          }
        },
        "summary": "Read node status",
        "operationId": "getNodesStatusByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Read node status"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Reboot or shutdown a node.",
        "operationId": "newNodesStatusByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Reboot or shutdown a node.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesStatus-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Reboot or shutdown a node."
      }
    },
    "/nodes/{node}/stopall": {
      "post": {
        "responses": "",
        "summary": "Stop all VMs and Containers.",
        "operationId": "newNodesStopallByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Stop all VMs and Containers.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesStopall-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Stop all VMs and Containers."
      },
      "summary": "stopall"
    },
    "/nodes/{node}/storage": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesStorage"
                }
              }
            }
          }
        },
        "summary": "Get status for all datastores.",
        "operationId": "getNodesStorageByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Get status for all datastores.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesStorage-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Get status for all datastores."
      },
      "summary": "storage"
    },
    "/nodes/{node}/storage/{storage}": {
      "get": {
        "responses": "",
        "summary": "",
        "operationId": "getNodesStorageByNodeAndStorage",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": ""
      },
      "summary": "storage"
    },
    "/nodes/{node}/storage/{storage}/content": {
      "summary": "content",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesStorageContent-GET"
                }
              }
            }
          }
        },
        "summary": "List storage content.",
        "operationId": "getNodesStorageContentByNodeAndStorage",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "List storage content.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesStorageContent-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "List storage content."
      },
      "post": {
        "responses": "",
        "summary": "Allocate disk images.",
        "operationId": "newNodesStorageContentByNodeAndStorage",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Allocate disk images.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesStorageContent-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Allocate disk images."
      }
    },
    "/nodes/{node}/storage/{storage}/content/{volume}": {
      "summary": "volume",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update volume attributes",
        "operationId": "setNodesStorageContentByNodeAndStorageAndVolume",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true
          },
          {
            "name": "volume",
            "in": "path",
            "description": "Volume identifier",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update volume attributes",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesStorageContent-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Update volume attributes"
      },
      "delete": {
        "responses": "",
        "summary": "Delete volume",
        "operationId": "removeNodesStorageContentByNodeAndStorageAndVolume",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true
          },
          {
            "name": "volume",
            "in": "path",
            "description": "Volume identifier",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Delete volume",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-NodesStorageContent-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Delete volume"
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesStorageContent"
                }
              }
            }
          }
        },
        "summary": "Get volume attributes",
        "operationId": "getNodesStorageContentByNodeAndStorageAndVolume",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true
          },
          {
            "name": "volume",
            "in": "path",
            "description": "Volume identifier",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Get volume attributes"
      },
      "post": {
        "responses": "",
        "summary": "Copy a volume. This is experimental code - do not use.",
        "operationId": "newNodesStorageContentByNodeAndStorageAndVolume",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true
          },
          {
            "name": "volume",
            "in": "path",
            "description": "Source volume identifier",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Copy a volume. This is experimental code - do not use.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesStorageContent-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Copy a volume. This is experimental code - do not use."
      }
    },
    "/nodes/{node}/storage/{storage}/download-url": {
      "post": {
        "responses": "",
        "summary": "Download templates, ISO images and OVAs by using an URL.",
        "operationId": "newNodesStorageDownloadurlByNodeAndStorage",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Download templates, ISO images and OVAs by using an URL.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesStorageDownloadurl-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Download templates, ISO images and OVAs by using an URL."
      },
      "summary": "download-url"
    },
    "/nodes/{node}/storage/{storage}/file-restore/download": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesStorageFilerestoreDownload"
                }
              }
            }
          }
        },
        "summary": "Extract a file or directory (as zip archive) from a PBS backup.",
        "operationId": "getNodesStorageFilerestoreDownloadByNodeAndStorage",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Extract a file or directory (as zip archive) from a PBS backup.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesStorageFilerestoreDownload-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Extract a file or directory (as zip archive) from a PBS backup."
      },
      "summary": "download"
    },
    "/nodes/{node}/storage/{storage}/file-restore/list": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesStorageFilerestoreList"
                }
              }
            }
          }
        },
        "summary": "List files and directories for single file restore under the given path.",
        "operationId": "getNodesStorageFilerestoreListByNodeAndStorage",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "List files and directories for single file restore under the given path.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesStorageFilerestoreList-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "List files and directories for single file restore under the given path."
      },
      "summary": "list"
    },
    "/nodes/{node}/storage/{storage}/import-metadata": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesStorageImportmetadata"
                }
              }
            }
          }
        },
        "summary": "Get the base parameters for creating a guest which imports data from a foreign importable guest, like an ESXi VM",
        "operationId": "getNodesStorageImportmetadataByNodeAndStorage",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Get the base parameters for creating a guest which imports data from a foreign importable guest, like an ESXi VM",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesStorageImportmetadata-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Get the base parameters for creating a guest which imports data from a foreign importable guest, like an ESXi VM"
      },
      "summary": "import-metadata"
    },
    "/nodes/{node}/storage/{storage}/prunebackups": {
      "summary": "prunebackups",
      "delete": {
        "responses": "",
        "summary": "Prune backups. Only those using the standard naming scheme are considered.",
        "operationId": "removeNodesStoragePrunebackupsByNodeAndStorage",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Prune backups. Only those using the standard naming scheme are considered.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-NodesStoragePrunebackups-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Prune backups. Only those using the standard naming scheme are considered."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesStoragePrunebackups"
                }
              }
            }
          }
        },
        "summary": "Get prune information for backups. NOTE: this is only a preview and might not be what a subsequent prune call does if backups are removed/added in the meantime.",
        "operationId": "getNodesStoragePrunebackupsByNodeAndStorage",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Get prune information for backups. NOTE: this is only a preview and might not be what a subsequent prune call does if backups are removed/added in the meantime.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesStoragePrunebackups-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Get prune information for backups. NOTE: this is only a preview and might not be what a subsequent prune call does if backups are removed/added in the meantime."
      }
    },
    "/nodes/{node}/storage/{storage}/rrd": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesStorageRrd"
                }
              }
            }
          }
        },
        "summary": "Read storage RRD statistics (returns PNG).",
        "operationId": "getNodesStorageRrdByNodeAndStorage",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Read storage RRD statistics (returns PNG).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesStorageRrd-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Read storage RRD statistics (returns PNG)."
      },
      "summary": "rrd"
    },
    "/nodes/{node}/storage/{storage}/rrddata": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesStorageRrddata"
                }
              }
            }
          }
        },
        "summary": "Read storage RRD statistics.",
        "operationId": "getNodesStorageRrddataByNodeAndStorage",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Read storage RRD statistics.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesStorageRrddata-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Read storage RRD statistics."
      },
      "summary": "rrddata"
    },
    "/nodes/{node}/storage/{storage}/status": {
      "get": {
        "responses": "",
        "summary": "Read storage status.",
        "operationId": "getNodesStorageStatusByNodeAndStorage",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Read storage status."
      },
      "summary": "status"
    },
    "/nodes/{node}/storage/{storage}/upload": {
      "post": {
        "responses": "",
        "summary": "Upload templates, ISO images and OVAs.",
        "operationId": "newNodesStorageUploadByNodeAndStorage",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Upload templates, ISO images and OVAs.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesStorageUpload-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Upload templates, ISO images and OVAs."
      },
      "summary": "upload"
    },
    "/nodes/{node}/subscription": {
      "summary": "subscription",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Set subscription key.",
        "operationId": "setNodesSubscriptionByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Set subscription key.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesSubscription-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Set subscription key."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete subscription key of this node.",
        "operationId": "removeNodesSubscriptionByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Delete subscription key of this node."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesSubscription"
                }
              }
            }
          }
        },
        "summary": "Read subscription info.",
        "operationId": "getNodesSubscriptionByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Read subscription info."
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update subscription info.",
        "operationId": "newNodesSubscriptionByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update subscription info.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesSubscription-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Update subscription info."
      }
    },
    "/nodes/{node}/suspendall": {
      "post": {
        "responses": "",
        "summary": "Suspend all VMs.",
        "operationId": "newNodesSuspendallByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Suspend all VMs.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesSuspendall-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Suspend all VMs."
      },
      "summary": "suspendall"
    },
    "/nodes/{node}/syslog": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesSyslog"
                }
              }
            }
          }
        },
        "summary": "Read system log",
        "operationId": "getNodesSyslogByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Read system log",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesSyslog-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Read system log"
      },
      "summary": "syslog"
    },
    "/nodes/{node}/tasks": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesTasks"
                }
              }
            }
          }
        },
        "summary": "Read task list for one node (finished tasks).",
        "operationId": "getNodesTasksByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Read task list for one node (finished tasks).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesTasks-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Read task list for one node (finished tasks)."
      },
      "summary": "tasks"
    },
    "/nodes/{node}/tasks/{upid}": {
      "summary": "upid",
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Stop a task.",
        "operationId": "removeNodesTasksByNodeAndUpid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "upid",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Stop a task."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesTasks-GET"
                }
              }
            }
          }
        },
        "summary": "",
        "operationId": "getNodesTasksByNodeAndUpid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "upid",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": ""
      }
    },
    "/nodes/{node}/tasks/{upid}/log": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesTasksLog"
                }
              }
            }
          }
        },
        "summary": "Read task log.",
        "operationId": "getNodesTasksLogByNodeAndUpid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "upid",
            "in": "path",
            "description": "The task's unique ID.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Read task log.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesTasksLog-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Read task log."
      },
      "summary": "log"
    },
    "/nodes/{node}/tasks/{upid}/status": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesTasksStatus"
                }
              }
            }
          }
        },
        "summary": "Read task status.",
        "operationId": "getNodesTasksStatusByNodeAndUpid",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          },
          {
            "name": "upid",
            "in": "path",
            "description": "The task's unique ID.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Read task status."
      },
      "summary": "status"
    },
    "/nodes/{node}/termproxy": {
      "post": {
        "responses": "",
        "summary": "Creates a VNC Shell proxy.",
        "operationId": "newNodesTermproxyByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Creates a VNC Shell proxy.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesTermproxy-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Creates a VNC Shell proxy."
      },
      "summary": "termproxy"
    },
    "/nodes/{node}/time": {
      "summary": "time",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Set time zone.",
        "operationId": "setNodesTimeByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Set time zone.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-NodesTime-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Set time zone."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesTime"
                }
              }
            }
          }
        },
        "summary": "Read server time and time zone settings.",
        "operationId": "getNodesTimeByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Read server time and time zone settings."
      }
    },
    "/nodes/{node}/version": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesVersion"
                }
              }
            }
          }
        },
        "summary": "API version details",
        "operationId": "getNodesVersionByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "API version details"
      },
      "summary": "version"
    },
    "/nodes/{node}/vncshell": {
      "post": {
        "responses": "",
        "summary": "Creates a VNC Shell proxy.",
        "operationId": "newNodesVncshellByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Creates a VNC Shell proxy.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesVncshell-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Creates a VNC Shell proxy."
      },
      "summary": "vncshell"
    },
    "/nodes/{node}/vncwebsocket": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesVncwebsocket"
                }
              }
            }
          }
        },
        "summary": "Opens a websocket for VNC traffic.",
        "operationId": "getNodesVncwebsocketByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Opens a websocket for VNC traffic.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesVncwebsocket-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Opens a websocket for VNC traffic."
      },
      "summary": "vncwebsocket"
    },
    "/nodes/{node}/vzdump": {
      "post": {
        "responses": "",
        "summary": "Create backup.",
        "operationId": "newNodesVzdumpByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "Only run if executed on this node.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Create backup.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-NodesVzdump-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Create backup."
      },
      "summary": "vzdump"
    },
    "/nodes/{node}/vzdump/defaults": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesVzdumpDefaults"
                }
              }
            }
          }
        },
        "summary": "Get the currently configured vzdump defaults.",
        "operationId": "getNodesVzdumpDefaultsByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Get the currently configured vzdump defaults.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesVzdumpDefaults-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Get the currently configured vzdump defaults."
      },
      "summary": "defaults"
    },
    "/nodes/{node}/vzdump/extractconfig": {
      "get": {
        "responses": "",
        "summary": "Extract configuration from vzdump backup archive.",
        "operationId": "getNodesVzdumpExtractconfigByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Extract configuration from vzdump backup archive.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-NodesVzdumpExtractconfig-RB"
              }
            }
          }
        },
        "tags": [
          "nodes"
        ],
        "description": "Extract configuration from vzdump backup archive."
      },
      "summary": "extractconfig"
    },
    "/nodes/{node}/wakeonlan": {
      "post": {
        "responses": "",
        "summary": "Try to wake a node via 'wake on LAN' network packet.",
        "operationId": "newNodesWakeonlanByNode",
        "parameter": [
          {
            "name": "node",
            "in": "path",
            "description": "target node for wake on LAN packet",
            "required": true
          }
        ],
        "tags": [
          "nodes"
        ],
        "description": "Try to wake a node via 'wake on LAN' network packet."
      },
      "summary": "wakeonlan"
    },
    "/pools": {
      "summary": "pools",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update pool.",
        "operationId": "setPools",
        "requestBody": {
          "description": "Update pool.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-Pools-RB"
              }
            }
          }
        },
        "tags": [
          "pools"
        ],
        "description": "Update pool."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete pool.",
        "operationId": "removePools",
        "requestBody": {
          "description": "Delete pool.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DELETE-Pools-RB"
              }
            }
          }
        },
        "tags": [
          "pools"
        ],
        "description": "Delete pool."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pools-GET"
                }
              }
            }
          }
        },
        "summary": "List pools or get pool configuration.",
        "operationId": "getPools",
        "requestBody": {
          "description": "List pools or get pool configuration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-Pools-RB"
              }
            }
          }
        },
        "tags": [
          "pools"
        ],
        "description": "List pools or get pool configuration."
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Create new pool.",
        "operationId": "newPools",
        "requestBody": {
          "description": "Create new pool.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-Pools-RB"
              }
            }
          }
        },
        "tags": [
          "pools"
        ],
        "description": "Create new pool."
      }
    },
    "/pools/{poolid}": {
      "summary": "poolid",
      "put": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update pool data (deprecated, no support for nested pools - use 'PUT /pools/?poolid={poolid}' instead).",
        "operationId": "setPoolsByPoolid",
        "parameter": [
          {
            "name": "poolid",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update pool data (deprecated, no support for nested pools - use 'PUT /pools/?poolid={poolid}' instead).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-Pools-RB"
              }
            }
          }
        },
        "tags": [
          "pools"
        ],
        "description": "Update pool data (deprecated, no support for nested pools - use 'PUT /pools/?poolid={poolid}' instead)."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete pool (deprecated, no support for nested pools, use 'DELETE /pools/?poolid={poolid}').",
        "operationId": "removePoolsByPoolid",
        "parameter": [
          {
            "name": "poolid",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "tags": [
          "pools"
        ],
        "description": "Delete pool (deprecated, no support for nested pools, use 'DELETE /pools/?poolid={poolid}')."
      },
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pools"
                }
              }
            }
          }
        },
        "summary": "Get pool configuration (deprecated, no support for nested pools, use 'GET /pools/?poolid={poolid}').",
        "operationId": "getPoolsByPoolid",
        "parameter": [
          {
            "name": "poolid",
            "in": "path",
            "description": null,
            "required": true
          }
        ],
        "requestBody": {
          "description": "Get pool configuration (deprecated, no support for nested pools, use 'GET /pools/?poolid={poolid}').",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-Pools-RB"
              }
            }
          }
        },
        "tags": [
          "pools"
        ],
        "description": "Get pool configuration (deprecated, no support for nested pools, use 'GET /pools/?poolid={poolid}')."
      }
    },
    "/storage": {
      "summary": "storage",
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Storage-GET"
                }
              }
            }
          }
        },
        "summary": "Storage index.",
        "operationId": "getStorage",
        "requestBody": {
          "description": "Storage index.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GET-Storage-RB"
              }
            }
          }
        },
        "tags": [
          "storage"
        ],
        "description": "Storage index."
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Storage"
                }
              }
            }
          }
        },
        "summary": "Create a new storage.",
        "operationId": "newStorage",
        "requestBody": {
          "description": "Create a new storage.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POST-Storage-RB"
              }
            }
          }
        },
        "tags": [
          "storage"
        ],
        "description": "Create a new storage."
      }
    },
    "/storage/{storage}": {
      "summary": "storage",
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Storage-PUT"
                }
              }
            }
          }
        },
        "summary": "Update storage configuration.",
        "operationId": "setStorageByStorage",
        "parameter": [
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update storage configuration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PUT-Storage-RB"
              }
            }
          }
        },
        "tags": [
          "storage"
        ],
        "description": "Update storage configuration."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Delete storage configuration.",
        "operationId": "removeStorageByStorage",
        "parameter": [
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true
          }
        ],
        "tags": [
          "storage"
        ],
        "description": "Delete storage configuration."
      },
      "get": {
        "responses": "",
        "summary": "Read storage configuration.",
        "operationId": "getStorageByStorage",
        "parameter": [
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true
          }
        ],
        "tags": [
          "storage"
        ],
        "description": "Read storage configuration."
      }
    },
    "/version": {
      "get": {
        "summary": "API version details, including some parts of the global datacenter config.",
        "tags": [
          "version"
        ],
        "description": "API version details, including some parts of the global datacenter config.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Version"
                }
              }
            }
          }
        },
        "operationId": "getVersion"
      },
      "summary": "version"
    }
  },
  "components": {
    "schemas": {
      "PUT-AccessUsers-RB": {
        "type": "object",
        "properties": {
          "expire": {
            "type": "integer"
          },
          "userid": {
            "type": "string",
            "maxLength": 64
          },
          "lastname": {
            "type": "string",
            "maxLength": 1024
          },
          "groups": {
            "type": "string"
          },
          "append": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "keys": {
            "type": "string",
            "pattern": "[0-9a-zA-Z!=]{0,4096}"
          },
          "email": {
            "type": "string",
            "maxLength": 254
          },
          "enable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "comment": {
            "type": "string",
            "maxLength": 2048
          },
          "firstname": {
            "type": "string",
            "maxLength": 1024
          }
        }
      },
      "POST-AccessTicket-RB": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "maxLength": 64
          },
          "password": {
            "type": "string"
          },
          "tfa-challenge": {
            "type": "string"
          },
          "privs": {
            "type": "string",
            "maxLength": 64
          },
          "new-format": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "path": {
            "type": "string",
            "maxLength": 64
          },
          "realm": {
            "type": "string",
            "maxLength": 32
          },
          "otp": {
            "type": "string"
          }
        }
      },
      "NodesNetstat": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "AccessUsers": {
        "type": "object",
        "properties": {
          "expire": {
            "type": "integer"
          },
          "lastname": {
            "type": "string",
            "maxLength": 1024
          },
          "groups": {
            "type": "array",
            "items": {
              "format": "pve-groupid",
              "type": "string"
            }
          },
          "enable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "keys": {
            "type": "string",
            "pattern": "[0-9a-zA-Z!=]{0,4096}"
          },
          "email": {
            "type": "string",
            "maxLength": 254
          },
          "firstname": {
            "type": "string",
            "maxLength": 1024
          },
          "comment": {
            "type": "string",
            "maxLength": 2048
          },
          "tokens": {
            "type": "object",
            "properties": {
              "comment": {
                "optional": 1,
                "type": "string"
              },
              "expire": {
                "description": "API token expiration date (seconds since epoch). '0' means no expiration date.",
                "minimum": 0,
                "optional": 1,
                "type": "integer"
              },
              "privsep": {
                "default": 1,
                "description": "Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.",
                "optional": 1,
                "type": "boolean"
              }
            }
          }
        }
      },
      "GET-Pools-RB": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "qemu",
              "lxc",
              "storage"
            ],
            "type": "string"
          },
          "poolid": {
            "type": "string"
          }
        }
      },
      "ClusterSdnVnetsSubnets": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "NodesStorageRrd": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string"
          }
        }
      },
      "DELETE-NodesLxcFirewallRules-RB": {
        "type": "object",
        "properties": {
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "pos": {
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "GET-NodesCephCfgValue-RB": {
        "type": "object",
        "properties": {
          "config-keys": {
            "type": "string",
            "pattern": "(?^:^(:?(?^i:[0-9a-z\\-_\\.]+:[0-9a-zA-Z\\-_]+))(:?[;, ](?^i:[0-9a-z\\-_\\.]+:[0-9a-zA-Z\\-_]+))*$)"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesQemuAgentExecstatus": {
        "type": "object",
        "properties": {
          "err-data": {
            "type": "string"
          },
          "out-data": {
            "type": "string"
          },
          "exitcode": {
            "type": "integer"
          },
          "out-truncated": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "exited": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "signal": {
            "type": "integer"
          },
          "err-truncated": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "PUT-ClusterFirewallAliases-RB": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "name": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 64,
            "type": "string"
          },
          "rename": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 64,
            "type": "string"
          },
          "cidr": {
            "type": "string"
          }
        }
      },
      "POST-NodesQemuStatusShutdown-RB": {
        "type": "object",
        "properties": {
          "timeout": {
            "type": "integer"
          },
          "keepActive": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "forceStop": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "skiplock": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "DELETE-NodesQemuSnapshot-RB": {
        "type": "object",
        "properties": {
          "force": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "snapname": {
            "type": "string",
            "maxLength": 40
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "ClusterAcmePlugins": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "plugin": {
              "type": "string"
            }
          }
        }
      },
      "POST-AccessDomainsSync-RB": {
        "type": "object",
        "properties": {
          "enable-new": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "purge": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "scope": {
            "enum": [
              "users",
              "groups",
              "both"
            ],
            "type": "string"
          },
          "full": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "dry-run": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "realm": {
            "type": "string",
            "maxLength": 32
          },
          "remove-vanished": {
            "type": "string",
            "pattern": "(?:(?:(?:acl|properties|entry);)*(?:acl|properties|entry))|none"
          }
        }
      },
      "PUT-ClusterFirewallGroups-RB": {
        "type": "object",
        "properties": {
          "pos": {
            "type": "integer"
          },
          "moveto": {
            "type": "integer"
          },
          "type": {
            "enum": [
              "in",
              "out",
              "forward",
              "group"
            ],
            "type": "string"
          },
          "dest": {
            "type": "string",
            "maxLength": 512
          },
          "source": {
            "type": "string",
            "maxLength": 512
          },
          "comment": {
            "type": "string"
          },
          "enable": {
            "type": "integer"
          },
          "macro": {
            "type": "string",
            "maxLength": 128
          },
          "action": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 20,
            "type": "string"
          },
          "dport": {
            "type": "string"
          },
          "log": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "sport": {
            "type": "string"
          },
          "iface": {
            "minLength": 2,
            "maxLength": 20,
            "type": "string"
          },
          "delete": {
            "type": "string"
          },
          "proto": {
            "type": "string"
          },
          "group": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 18,
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "icmp-type": {
            "type": "string"
          }
        }
      },
      "ClusterSdnVnets": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "PUT-ClusterSdnVnetsFirewallRules-RB": {
        "type": "object",
        "properties": {
          "pos": {
            "type": "integer"
          },
          "moveto": {
            "type": "integer"
          },
          "type": {
            "enum": [
              "in",
              "out",
              "forward",
              "group"
            ],
            "type": "string"
          },
          "dest": {
            "type": "string",
            "maxLength": 512
          },
          "source": {
            "type": "string",
            "maxLength": 512
          },
          "comment": {
            "type": "string"
          },
          "enable": {
            "type": "integer"
          },
          "macro": {
            "type": "string",
            "maxLength": 128
          },
          "action": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 20,
            "type": "string"
          },
          "dport": {
            "type": "string"
          },
          "log": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "sport": {
            "type": "string"
          },
          "iface": {
            "minLength": 2,
            "maxLength": 20,
            "type": "string"
          },
          "delete": {
            "type": "string"
          },
          "vnet": {
            "type": "string"
          },
          "proto": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "icmp-type": {
            "type": "string"
          }
        }
      },
      "GET-NodesLxcVncwebsocket-RB": {
        "type": "object",
        "properties": {
          "port": {
            "minimum": 5900,
            "type": "integer",
            "maximum": 5999
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "vncticket": {
            "type": "string",
            "maxLength": 512
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesStorageImportmetadata": {
        "type": "object",
        "properties": {
          "source": {
            "enum": [
              "esxi"
            ],
            "type": "string"
          },
          "disks": {
            "type": "object",
            "properties": null
          },
          "warnings": {
            "type": "array",
            "items": {
              "additionalProperties": 1,
              "properties": {
                "key": {
                  "description": "Related subject (config) key of warning.",
                  "optional": 1,
                  "type": "string"
                },
                "type": {
                  "description": "What this warning is about.",
                  "enum": [
                    "cdrom-image-ignored",
                    "efi-state-lost",
                    "guest-is-running",
                    "nvme-unsupported",
                    "ova-needs-extracting",
                    "ovmf-with-lsi-unsupported",
                    "serial-port-socket-only"
                  ],
                  "type": "string"
                },
                "value": {
                  "description": "Related subject (config) value of warning.",
                  "optional": 1,
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": {
            "enum": [
              "vm"
            ],
            "type": "string"
          },
          "net": {
            "type": "object",
            "properties": null
          },
          "create-args": {
            "type": "object",
            "properties": null
          }
        }
      },
      "Nodes-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "POST-NodesLxcMovevolume-RB": {
        "type": "object",
        "properties": {
          "volume": {
            "enum": [
              "rootfs",
              "mp0",
              "mp1",
              "mp2",
              "mp3",
              "mp4",
              "mp5",
              "mp6",
              "mp7",
              "mp8",
              "mp9",
              "mp10",
              "mp11",
              "mp12",
              "mp13",
              "mp14",
              "mp15",
              "mp16",
              "mp17",
              "mp18",
              "mp19",
              "mp20",
              "mp21",
              "mp22",
              "mp23",
              "mp24",
              "mp25",
              "mp26",
              "mp27",
              "mp28",
              "mp29",
              "mp30",
              "mp31",
              "mp32",
              "mp33",
              "mp34",
              "mp35",
              "mp36",
              "mp37",
              "mp38",
              "mp39",
              "mp40",
              "mp41",
              "mp42",
              "mp43",
              "mp44",
              "mp45",
              "mp46",
              "mp47",
              "mp48",
              "mp49",
              "mp50",
              "mp51",
              "mp52",
              "mp53",
              "mp54",
              "mp55",
              "mp56",
              "mp57",
              "mp58",
              "mp59",
              "mp60",
              "mp61",
              "mp62",
              "mp63",
              "mp64",
              "mp65",
              "mp66",
              "mp67",
              "mp68",
              "mp69",
              "mp70",
              "mp71",
              "mp72",
              "mp73",
              "mp74",
              "mp75",
              "mp76",
              "mp77",
              "mp78",
              "mp79",
              "mp80",
              "mp81",
              "mp82",
              "mp83",
              "mp84",
              "mp85",
              "mp86",
              "mp87",
              "mp88",
              "mp89",
              "mp90",
              "mp91",
              "mp92",
              "mp93",
              "mp94",
              "mp95",
              "mp96",
              "mp97",
              "mp98",
              "mp99",
              "mp100",
              "mp101",
              "mp102",
              "mp103",
              "mp104",
              "mp105",
              "mp106",
              "mp107",
              "mp108",
              "mp109",
              "mp110",
              "mp111",
              "mp112",
              "mp113",
              "mp114",
              "mp115",
              "mp116",
              "mp117",
              "mp118",
              "mp119",
              "mp120",
              "mp121",
              "mp122",
              "mp123",
              "mp124",
              "mp125",
              "mp126",
              "mp127",
              "mp128",
              "mp129",
              "mp130",
              "mp131",
              "mp132",
              "mp133",
              "mp134",
              "mp135",
              "mp136",
              "mp137",
              "mp138",
              "mp139",
              "mp140",
              "mp141",
              "mp142",
              "mp143",
              "mp144",
              "mp145",
              "mp146",
              "mp147",
              "mp148",
              "mp149",
              "mp150",
              "mp151",
              "mp152",
              "mp153",
              "mp154",
              "mp155",
              "mp156",
              "mp157",
              "mp158",
              "mp159",
              "mp160",
              "mp161",
              "mp162",
              "mp163",
              "mp164",
              "mp165",
              "mp166",
              "mp167",
              "mp168",
              "mp169",
              "mp170",
              "mp171",
              "mp172",
              "mp173",
              "mp174",
              "mp175",
              "mp176",
              "mp177",
              "mp178",
              "mp179",
              "mp180",
              "mp181",
              "mp182",
              "mp183",
              "mp184",
              "mp185",
              "mp186",
              "mp187",
              "mp188",
              "mp189",
              "mp190",
              "mp191",
              "mp192",
              "mp193",
              "mp194",
              "mp195",
              "mp196",
              "mp197",
              "mp198",
              "mp199",
              "mp200",
              "mp201",
              "mp202",
              "mp203",
              "mp204",
              "mp205",
              "mp206",
              "mp207",
              "mp208",
              "mp209",
              "mp210",
              "mp211",
              "mp212",
              "mp213",
              "mp214",
              "mp215",
              "mp216",
              "mp217",
              "mp218",
              "mp219",
              "mp220",
              "mp221",
              "mp222",
              "mp223",
              "mp224",
              "mp225",
              "mp226",
              "mp227",
              "mp228",
              "mp229",
              "mp230",
              "mp231",
              "mp232",
              "mp233",
              "mp234",
              "mp235",
              "mp236",
              "mp237",
              "mp238",
              "mp239",
              "mp240",
              "mp241",
              "mp242",
              "mp243",
              "mp244",
              "mp245",
              "mp246",
              "mp247",
              "mp248",
              "mp249",
              "mp250",
              "mp251",
              "mp252",
              "mp253",
              "mp254",
              "mp255",
              "unused0",
              "unused1",
              "unused2",
              "unused3",
              "unused4",
              "unused5",
              "unused6",
              "unused7",
              "unused8",
              "unused9",
              "unused10",
              "unused11",
              "unused12",
              "unused13",
              "unused14",
              "unused15",
              "unused16",
              "unused17",
              "unused18",
              "unused19",
              "unused20",
              "unused21",
              "unused22",
              "unused23",
              "unused24",
              "unused25",
              "unused26",
              "unused27",
              "unused28",
              "unused29",
              "unused30",
              "unused31",
              "unused32",
              "unused33",
              "unused34",
              "unused35",
              "unused36",
              "unused37",
              "unused38",
              "unused39",
              "unused40",
              "unused41",
              "unused42",
              "unused43",
              "unused44",
              "unused45",
              "unused46",
              "unused47",
              "unused48",
              "unused49",
              "unused50",
              "unused51",
              "unused52",
              "unused53",
              "unused54",
              "unused55",
              "unused56",
              "unused57",
              "unused58",
              "unused59",
              "unused60",
              "unused61",
              "unused62",
              "unused63",
              "unused64",
              "unused65",
              "unused66",
              "unused67",
              "unused68",
              "unused69",
              "unused70",
              "unused71",
              "unused72",
              "unused73",
              "unused74",
              "unused75",
              "unused76",
              "unused77",
              "unused78",
              "unused79",
              "unused80",
              "unused81",
              "unused82",
              "unused83",
              "unused84",
              "unused85",
              "unused86",
              "unused87",
              "unused88",
              "unused89",
              "unused90",
              "unused91",
              "unused92",
              "unused93",
              "unused94",
              "unused95",
              "unused96",
              "unused97",
              "unused98",
              "unused99",
              "unused100",
              "unused101",
              "unused102",
              "unused103",
              "unused104",
              "unused105",
              "unused106",
              "unused107",
              "unused108",
              "unused109",
              "unused110",
              "unused111",
              "unused112",
              "unused113",
              "unused114",
              "unused115",
              "unused116",
              "unused117",
              "unused118",
              "unused119",
              "unused120",
              "unused121",
              "unused122",
              "unused123",
              "unused124",
              "unused125",
              "unused126",
              "unused127",
              "unused128",
              "unused129",
              "unused130",
              "unused131",
              "unused132",
              "unused133",
              "unused134",
              "unused135",
              "unused136",
              "unused137",
              "unused138",
              "unused139",
              "unused140",
              "unused141",
              "unused142",
              "unused143",
              "unused144",
              "unused145",
              "unused146",
              "unused147",
              "unused148",
              "unused149",
              "unused150",
              "unused151",
              "unused152",
              "unused153",
              "unused154",
              "unused155",
              "unused156",
              "unused157",
              "unused158",
              "unused159",
              "unused160",
              "unused161",
              "unused162",
              "unused163",
              "unused164",
              "unused165",
              "unused166",
              "unused167",
              "unused168",
              "unused169",
              "unused170",
              "unused171",
              "unused172",
              "unused173",
              "unused174",
              "unused175",
              "unused176",
              "unused177",
              "unused178",
              "unused179",
              "unused180",
              "unused181",
              "unused182",
              "unused183",
              "unused184",
              "unused185",
              "unused186",
              "unused187",
              "unused188",
              "unused189",
              "unused190",
              "unused191",
              "unused192",
              "unused193",
              "unused194",
              "unused195",
              "unused196",
              "unused197",
              "unused198",
              "unused199",
              "unused200",
              "unused201",
              "unused202",
              "unused203",
              "unused204",
              "unused205",
              "unused206",
              "unused207",
              "unused208",
              "unused209",
              "unused210",
              "unused211",
              "unused212",
              "unused213",
              "unused214",
              "unused215",
              "unused216",
              "unused217",
              "unused218",
              "unused219",
              "unused220",
              "unused221",
              "unused222",
              "unused223",
              "unused224",
              "unused225",
              "unused226",
              "unused227",
              "unused228",
              "unused229",
              "unused230",
              "unused231",
              "unused232",
              "unused233",
              "unused234",
              "unused235",
              "unused236",
              "unused237",
              "unused238",
              "unused239",
              "unused240",
              "unused241",
              "unused242",
              "unused243",
              "unused244",
              "unused245",
              "unused246",
              "unused247",
              "unused248",
              "unused249",
              "unused250",
              "unused251",
              "unused252",
              "unused253",
              "unused254",
              "unused255"
            ],
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 40
          },
          "target-volume": {
            "enum": [
              "rootfs",
              "mp0",
              "mp1",
              "mp2",
              "mp3",
              "mp4",
              "mp5",
              "mp6",
              "mp7",
              "mp8",
              "mp9",
              "mp10",
              "mp11",
              "mp12",
              "mp13",
              "mp14",
              "mp15",
              "mp16",
              "mp17",
              "mp18",
              "mp19",
              "mp20",
              "mp21",
              "mp22",
              "mp23",
              "mp24",
              "mp25",
              "mp26",
              "mp27",
              "mp28",
              "mp29",
              "mp30",
              "mp31",
              "mp32",
              "mp33",
              "mp34",
              "mp35",
              "mp36",
              "mp37",
              "mp38",
              "mp39",
              "mp40",
              "mp41",
              "mp42",
              "mp43",
              "mp44",
              "mp45",
              "mp46",
              "mp47",
              "mp48",
              "mp49",
              "mp50",
              "mp51",
              "mp52",
              "mp53",
              "mp54",
              "mp55",
              "mp56",
              "mp57",
              "mp58",
              "mp59",
              "mp60",
              "mp61",
              "mp62",
              "mp63",
              "mp64",
              "mp65",
              "mp66",
              "mp67",
              "mp68",
              "mp69",
              "mp70",
              "mp71",
              "mp72",
              "mp73",
              "mp74",
              "mp75",
              "mp76",
              "mp77",
              "mp78",
              "mp79",
              "mp80",
              "mp81",
              "mp82",
              "mp83",
              "mp84",
              "mp85",
              "mp86",
              "mp87",
              "mp88",
              "mp89",
              "mp90",
              "mp91",
              "mp92",
              "mp93",
              "mp94",
              "mp95",
              "mp96",
              "mp97",
              "mp98",
              "mp99",
              "mp100",
              "mp101",
              "mp102",
              "mp103",
              "mp104",
              "mp105",
              "mp106",
              "mp107",
              "mp108",
              "mp109",
              "mp110",
              "mp111",
              "mp112",
              "mp113",
              "mp114",
              "mp115",
              "mp116",
              "mp117",
              "mp118",
              "mp119",
              "mp120",
              "mp121",
              "mp122",
              "mp123",
              "mp124",
              "mp125",
              "mp126",
              "mp127",
              "mp128",
              "mp129",
              "mp130",
              "mp131",
              "mp132",
              "mp133",
              "mp134",
              "mp135",
              "mp136",
              "mp137",
              "mp138",
              "mp139",
              "mp140",
              "mp141",
              "mp142",
              "mp143",
              "mp144",
              "mp145",
              "mp146",
              "mp147",
              "mp148",
              "mp149",
              "mp150",
              "mp151",
              "mp152",
              "mp153",
              "mp154",
              "mp155",
              "mp156",
              "mp157",
              "mp158",
              "mp159",
              "mp160",
              "mp161",
              "mp162",
              "mp163",
              "mp164",
              "mp165",
              "mp166",
              "mp167",
              "mp168",
              "mp169",
              "mp170",
              "mp171",
              "mp172",
              "mp173",
              "mp174",
              "mp175",
              "mp176",
              "mp177",
              "mp178",
              "mp179",
              "mp180",
              "mp181",
              "mp182",
              "mp183",
              "mp184",
              "mp185",
              "mp186",
              "mp187",
              "mp188",
              "mp189",
              "mp190",
              "mp191",
              "mp192",
              "mp193",
              "mp194",
              "mp195",
              "mp196",
              "mp197",
              "mp198",
              "mp199",
              "mp200",
              "mp201",
              "mp202",
              "mp203",
              "mp204",
              "mp205",
              "mp206",
              "mp207",
              "mp208",
              "mp209",
              "mp210",
              "mp211",
              "mp212",
              "mp213",
              "mp214",
              "mp215",
              "mp216",
              "mp217",
              "mp218",
              "mp219",
              "mp220",
              "mp221",
              "mp222",
              "mp223",
              "mp224",
              "mp225",
              "mp226",
              "mp227",
              "mp228",
              "mp229",
              "mp230",
              "mp231",
              "mp232",
              "mp233",
              "mp234",
              "mp235",
              "mp236",
              "mp237",
              "mp238",
              "mp239",
              "mp240",
              "mp241",
              "mp242",
              "mp243",
              "mp244",
              "mp245",
              "mp246",
              "mp247",
              "mp248",
              "mp249",
              "mp250",
              "mp251",
              "mp252",
              "mp253",
              "mp254",
              "mp255",
              "unused0",
              "unused1",
              "unused2",
              "unused3",
              "unused4",
              "unused5",
              "unused6",
              "unused7",
              "unused8",
              "unused9",
              "unused10",
              "unused11",
              "unused12",
              "unused13",
              "unused14",
              "unused15",
              "unused16",
              "unused17",
              "unused18",
              "unused19",
              "unused20",
              "unused21",
              "unused22",
              "unused23",
              "unused24",
              "unused25",
              "unused26",
              "unused27",
              "unused28",
              "unused29",
              "unused30",
              "unused31",
              "unused32",
              "unused33",
              "unused34",
              "unused35",
              "unused36",
              "unused37",
              "unused38",
              "unused39",
              "unused40",
              "unused41",
              "unused42",
              "unused43",
              "unused44",
              "unused45",
              "unused46",
              "unused47",
              "unused48",
              "unused49",
              "unused50",
              "unused51",
              "unused52",
              "unused53",
              "unused54",
              "unused55",
              "unused56",
              "unused57",
              "unused58",
              "unused59",
              "unused60",
              "unused61",
              "unused62",
              "unused63",
              "unused64",
              "unused65",
              "unused66",
              "unused67",
              "unused68",
              "unused69",
              "unused70",
              "unused71",
              "unused72",
              "unused73",
              "unused74",
              "unused75",
              "unused76",
              "unused77",
              "unused78",
              "unused79",
              "unused80",
              "unused81",
              "unused82",
              "unused83",
              "unused84",
              "unused85",
              "unused86",
              "unused87",
              "unused88",
              "unused89",
              "unused90",
              "unused91",
              "unused92",
              "unused93",
              "unused94",
              "unused95",
              "unused96",
              "unused97",
              "unused98",
              "unused99",
              "unused100",
              "unused101",
              "unused102",
              "unused103",
              "unused104",
              "unused105",
              "unused106",
              "unused107",
              "unused108",
              "unused109",
              "unused110",
              "unused111",
              "unused112",
              "unused113",
              "unused114",
              "unused115",
              "unused116",
              "unused117",
              "unused118",
              "unused119",
              "unused120",
              "unused121",
              "unused122",
              "unused123",
              "unused124",
              "unused125",
              "unused126",
              "unused127",
              "unused128",
              "unused129",
              "unused130",
              "unused131",
              "unused132",
              "unused133",
              "unused134",
              "unused135",
              "unused136",
              "unused137",
              "unused138",
              "unused139",
              "unused140",
              "unused141",
              "unused142",
              "unused143",
              "unused144",
              "unused145",
              "unused146",
              "unused147",
              "unused148",
              "unused149",
              "unused150",
              "unused151",
              "unused152",
              "unused153",
              "unused154",
              "unused155",
              "unused156",
              "unused157",
              "unused158",
              "unused159",
              "unused160",
              "unused161",
              "unused162",
              "unused163",
              "unused164",
              "unused165",
              "unused166",
              "unused167",
              "unused168",
              "unused169",
              "unused170",
              "unused171",
              "unused172",
              "unused173",
              "unused174",
              "unused175",
              "unused176",
              "unused177",
              "unused178",
              "unused179",
              "unused180",
              "unused181",
              "unused182",
              "unused183",
              "unused184",
              "unused185",
              "unused186",
              "unused187",
              "unused188",
              "unused189",
              "unused190",
              "unused191",
              "unused192",
              "unused193",
              "unused194",
              "unused195",
              "unused196",
              "unused197",
              "unused198",
              "unused199",
              "unused200",
              "unused201",
              "unused202",
              "unused203",
              "unused204",
              "unused205",
              "unused206",
              "unused207",
              "unused208",
              "unused209",
              "unused210",
              "unused211",
              "unused212",
              "unused213",
              "unused214",
              "unused215",
              "unused216",
              "unused217",
              "unused218",
              "unused219",
              "unused220",
              "unused221",
              "unused222",
              "unused223",
              "unused224",
              "unused225",
              "unused226",
              "unused227",
              "unused228",
              "unused229",
              "unused230",
              "unused231",
              "unused232",
              "unused233",
              "unused234",
              "unused235",
              "unused236",
              "unused237",
              "unused238",
              "unused239",
              "unused240",
              "unused241",
              "unused242",
              "unused243",
              "unused244",
              "unused245",
              "unused246",
              "unused247",
              "unused248",
              "unused249",
              "unused250",
              "unused251",
              "unused252",
              "unused253",
              "unused254",
              "unused255"
            ],
            "type": "string"
          },
          "bwlimit": {
            "type": "number",
            "minimum": "0"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          },
          "storage": {
            "type": "string"
          },
          "target-vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "delete": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "target-digest": {
            "type": "string",
            "maxLength": 40
          }
        }
      },
      "GET-NodesStorage-RB": {
        "type": "object",
        "properties": {
          "format": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "enabled": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "content": {
            "type": "string"
          },
          "target": {
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "storage": {
            "type": "string"
          }
        }
      },
      "GET-NodesCephLog-RB": {
        "type": "object",
        "properties": {
          "start": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "POST-NodesQemuMonitor-RB": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "PUT-NodesFirewallOptions-RB": {
        "type": "object",
        "properties": {
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "tcp_flags_log_level": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "enable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "nosmurfs": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "log_nf_conntrack": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "nf_conntrack_max": {
            "type": "integer",
            "minimum": 32768
          },
          "nf_conntrack_allow_invalid": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "log_level_forward": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "nf_conntrack_tcp_timeout_established": {
            "type": "integer",
            "minimum": 7875
          },
          "log_level_in": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "protection_synflood": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          },
          "nftables": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "protection_synflood_rate": {
            "type": "integer"
          },
          "tcpflags": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "delete": {
            "type": "string"
          },
          "nf_conntrack_tcp_timeout_syn_recv": {
            "minimum": 30,
            "type": "integer",
            "maximum": 60
          },
          "smurf_log_level": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "ndp": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "protection_synflood_burst": {
            "type": "integer"
          },
          "nf_conntrack_helpers": {
            "type": "string"
          },
          "log_level_out": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          }
        }
      },
      "GET-NodesQemuConfig-RB": {
        "type": "object",
        "properties": {
          "current": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "snapshot": {
            "type": "string",
            "maxLength": 40
          },
          "node": {
            "type": "string"
          }
        }
      },
      "GET-NodesTasks-RB": {
        "type": "object",
        "properties": {
          "typefilter": {
            "type": "string"
          },
          "source": {
            "enum": [
              "archive",
              "active",
              "all"
            ],
            "type": "string"
          },
          "limit": {
            "type": "integer"
          },
          "userfilter": {
            "type": "string"
          },
          "statusfilter": {
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "errors": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "since": {
            "type": "integer"
          },
          "start": {
            "type": "integer"
          },
          "until": {
            "type": "integer"
          }
        }
      },
      "DELETE-NodesStoragePrunebackups-RB": {
        "type": "object",
        "properties": {
          "storage": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "prune-backups": {
            "type": "string"
          },
          "type": {
            "enum": [
              "qemu",
              "lxc"
            ],
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "POST-NodesQemuTemplate-RB": {
        "type": "object",
        "properties": {
          "disk": {
            "enum": [
              "ide0",
              "ide1",
              "ide2",
              "ide3",
              "scsi0",
              "scsi1",
              "scsi2",
              "scsi3",
              "scsi4",
              "scsi5",
              "scsi6",
              "scsi7",
              "scsi8",
              "scsi9",
              "scsi10",
              "scsi11",
              "scsi12",
              "scsi13",
              "scsi14",
              "scsi15",
              "scsi16",
              "scsi17",
              "scsi18",
              "scsi19",
              "scsi20",
              "scsi21",
              "scsi22",
              "scsi23",
              "scsi24",
              "scsi25",
              "scsi26",
              "scsi27",
              "scsi28",
              "scsi29",
              "scsi30",
              "virtio0",
              "virtio1",
              "virtio2",
              "virtio3",
              "virtio4",
              "virtio5",
              "virtio6",
              "virtio7",
              "virtio8",
              "virtio9",
              "virtio10",
              "virtio11",
              "virtio12",
              "virtio13",
              "virtio14",
              "virtio15",
              "sata0",
              "sata1",
              "sata2",
              "sata3",
              "sata4",
              "sata5",
              "efidisk0",
              "tpmstate0"
            ],
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesFirewallRules-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "pos": {
              "type": "integer"
            }
          }
        }
      },
      "NodesCephCfgDb": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "value": {
              "type": "string"
            },
            "section": {
              "type": "string"
            },
            "can_update_at_runtime": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "level": {
              "type": "string"
            },
            "mask": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          }
        }
      },
      "NodesServices": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "POST-NodesCertificatesAcmeCertificate-RB": {
        "type": "object",
        "properties": {
          "node": {
            "type": "string"
          },
          "force": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "PUT-NodesQemuFirewallRules-RB": {
        "type": "object",
        "properties": {
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "pos": {
            "type": "integer"
          },
          "moveto": {
            "type": "integer"
          },
          "type": {
            "enum": [
              "in",
              "out",
              "forward",
              "group"
            ],
            "type": "string"
          },
          "dest": {
            "type": "string",
            "maxLength": 512
          },
          "source": {
            "type": "string",
            "maxLength": 512
          },
          "comment": {
            "type": "string"
          },
          "enable": {
            "type": "integer"
          },
          "macro": {
            "type": "string",
            "maxLength": 128
          },
          "node": {
            "type": "string"
          },
          "action": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 20,
            "type": "string"
          },
          "dport": {
            "type": "string"
          },
          "log": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "sport": {
            "type": "string"
          },
          "iface": {
            "minLength": 2,
            "maxLength": 20,
            "type": "string"
          },
          "delete": {
            "type": "string"
          },
          "proto": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "icmp-type": {
            "type": "string"
          }
        }
      },
      "GET-NodesStorageFilerestoreList-RB": {
        "type": "object",
        "properties": {
          "storage": {
            "type": "string"
          },
          "volume": {
            "type": "string"
          },
          "filepath": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "ClusterCephMetadata": {
        "type": "object",
        "properties": {
          "mds": {
            "type": "object",
            "properties": {
              "{id}": {
                "description": "Useful properties are listed, but not the full list.",
                "properties": {
                  "addr": {
                    "description": "Bind addresses and ports.",
                    "type": "string"
                  },
                  "ceph_release": {
                    "description": "Ceph release codename currently used.",
                    "type": "string"
                  },
                  "ceph_version": {
                    "description": "Version info currently used by the service.",
                    "type": "string"
                  },
                  "ceph_version_short": {
                    "description": "Short version (numerical) info currently used by the service.",
                    "type": "string"
                  },
                  "hostname": {
                    "description": "Hostname on which the service is running.",
                    "type": "string"
                  },
                  "mem_swap_kb": {
                    "description": "Memory of the service currently in swap.",
                    "type": "integer"
                  },
                  "mem_total_kb": {
                    "description": "Memory consumption of the service.",
                    "type": "integer"
                  },
                  "name": {
                    "description": "Name of the service instance.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "node": {
            "type": "object",
            "properties": {
              "{node}": {
                "properties": {
                  "buildcommit": {
                    "description": "GIT commit used for the build.",
                    "type": "string"
                  },
                  "version": {
                    "description": "Version info.",
                    "properties": {
                      "parts": {
                        "description": "major, minor & patch",
                        "type": "array"
                      },
                      "str": {
                        "description": "Version as single string.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "osd": {
            "type": "array",
            "items": null
          },
          "mon": {
            "type": "object",
            "properties": {
              "{id}": {
                "description": "Useful properties are listed, but not the full list.",
                "properties": {
                  "addrs": {
                    "description": "Bind addresses and ports.",
                    "type": "string"
                  },
                  "ceph_release": {
                    "description": "Ceph release codename currently used.",
                    "type": "string"
                  },
                  "ceph_version": {
                    "description": "Version info currently used by the service.",
                    "type": "string"
                  },
                  "ceph_version_short": {
                    "description": "Short version (numerical) info currently used by the service.",
                    "type": "string"
                  },
                  "hostname": {
                    "description": "Hostname on which the service is running.",
                    "type": "string"
                  },
                  "mem_swap_kb": {
                    "description": "Memory of the service currently in swap.",
                    "type": "integer"
                  },
                  "mem_total_kb": {
                    "description": "Memory consumption of the service.",
                    "type": "integer"
                  },
                  "name": {
                    "description": "Name of the service instance.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "mgr": {
            "type": "object",
            "properties": {
              "{id}": {
                "description": "Useful properties are listed, but not the full list.",
                "properties": {
                  "addr": {
                    "description": "Bind address",
                    "type": "string"
                  },
                  "ceph_release": {
                    "description": "Ceph release codename currently used.",
                    "type": "string"
                  },
                  "ceph_version": {
                    "description": "Version info currently used by the service.",
                    "type": "string"
                  },
                  "ceph_version_short": {
                    "description": "Short version (numerical) info currently used by the service.",
                    "type": "string"
                  },
                  "hostname": {
                    "description": "Hostname on which the service is running.",
                    "type": "string"
                  },
                  "mem_swap_kb": {
                    "description": "Memory of the service currently in swap.",
                    "type": "integer"
                  },
                  "mem_total_kb": {
                    "description": "Memory consumption of the service.",
                    "type": "integer"
                  },
                  "name": {
                    "description": "Name of the service instance.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        }
      },
      "PUT-NodesCertificatesAcmeCertificate-RB": {
        "type": "object",
        "properties": {
          "node": {
            "type": "string"
          },
          "force": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "POST-NodesAplinfo-RB": {
        "type": "object",
        "properties": {
          "storage": {
            "type": "string"
          },
          "template": {
            "type": "string",
            "maxLength": 255
          },
          "node": {
            "type": "string"
          }
        }
      },
      "PUT-ClusterFirewallOptions-RB": {
        "type": "object",
        "properties": {
          "policy_in": {
            "enum": [
              "ACCEPT",
              "REJECT",
              "DROP"
            ],
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "log_ratelimit": {
            "type": "string"
          },
          "ebtables": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "enable": {
            "type": "integer"
          },
          "policy_out": {
            "enum": [
              "ACCEPT",
              "REJECT",
              "DROP"
            ],
            "type": "string"
          },
          "policy_forward": {
            "enum": [
              "ACCEPT",
              "DROP"
            ],
            "type": "string"
          },
          "delete": {
            "type": "string"
          }
        }
      },
      "ClusterNotificationsEndpointsSendmail": {
        "type": "object",
        "properties": {
          "author": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "from-address": {
            "type": "string"
          },
          "mailto": {
            "type": "array",
            "items": {
              "format": "email-or-username",
              "type": "string"
            }
          },
          "mailto-user": {
            "type": "array",
            "items": {
              "format": "pve-userid",
              "type": "string"
            }
          },
          "comment": {
            "type": "string"
          },
          "disable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "POST-NodesFirewallRules-RB": {
        "type": "object",
        "properties": {
          "pos": {
            "type": "integer"
          },
          "type": {
            "enum": [
              "in",
              "out",
              "forward",
              "group"
            ],
            "type": "string"
          },
          "dest": {
            "type": "string",
            "maxLength": 512
          },
          "source": {
            "type": "string",
            "maxLength": 512
          },
          "dport": {
            "type": "string"
          },
          "enable": {
            "type": "integer"
          },
          "action": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 20,
            "type": "string"
          },
          "macro": {
            "type": "string",
            "maxLength": 128
          },
          "node": {
            "type": "string"
          },
          "iface": {
            "minLength": 2,
            "maxLength": 20,
            "type": "string"
          },
          "log": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "sport": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "proto": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "icmp-type": {
            "type": "string"
          }
        }
      },
      "POST-NodesCephInit-RB": {
        "type": "object",
        "properties": {
          "pg_bits": {
            "minimum": 6,
            "type": "integer",
            "maximum": 14
          },
          "network": {
            "type": "string",
            "maxLength": 128
          },
          "disable_cephx": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          },
          "cluster-network": {
            "type": "string",
            "maxLength": 128
          },
          "min_size": {
            "minimum": 1,
            "type": "integer",
            "maximum": 7
          },
          "size": {
            "minimum": 1,
            "type": "integer",
            "maximum": 7
          }
        }
      },
      "AccessRoles": {
        "type": "object",
        "properties": {
          "Pool.Audit": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "VM.Config.Memory": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "VM.Config.Network": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "Sys.Console": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "SDN.Use": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "Realm.AllocateUser": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "VM.Config.CDROM": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "Sys.Syslog": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "Permissions.Modify": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "VM.Config.HWType": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "Datastore.Audit": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "Datastore.AllocateSpace": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "VM.Backup": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "Sys.AccessNetwork": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "SDN.Audit": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "Sys.Audit": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "VM.Snapshot.Rollback": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "VM.PowerMgmt": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "VM.Clone": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "Sys.PowerMgmt": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "Pool.Allocate": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "VM.Snapshot": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "VM.Config.Options": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "Datastore.AllocateTemplate": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "VM.Migrate": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "Sys.Modify": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "Mapping.Use": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "SDN.Allocate": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "Group.Allocate": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "User.Modify": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "Realm.Allocate": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "VM.Audit": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "VM.Monitor": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "VM.Console": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "Datastore.Allocate": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "VM.Allocate": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "Sys.Incoming": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "VM.Config.Cloudinit": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "Mapping.Audit": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "Mapping.Modify": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "VM.Config.CPU": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "VM.Config.Disk": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "PUT-NodesQemuSnapshotConfig-RB": {
        "type": "object",
        "properties": {
          "snapname": {
            "type": "string",
            "maxLength": 40
          },
          "description": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "POST-ClusterMappingPci-RB": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "maxLength": 4096
          },
          "map": {
            "type": "array",
            "items": {
              "format": {
                "description": {
                  "description": "Description of the node specific device.",
                  "maxLength": 4096,
                  "optional": 1,
                  "type": "string"
                },
                "id": {
                  "description": "The vendor and device ID that is expected. Used for detecting hardware changes",
                  "pattern": "(?^:^[0-9A-Fa-f]{4}:[0-9A-Fa-f]{4}$)",
                  "type": "string"
                },
                "iommugroup": {
                  "description": "The IOMMU group in which the device is to be expected in. Used for detecting hardware changes.",
                  "optional": 1,
                  "type": "integer"
                },
                "node": {
                  "description": "The cluster node name.",
                  "format": "pve-node",
                  "type": "string"
                },
                "path": {
                  "description": "The path to the device. If the function is omitted, the whole device is mapped. In that case use the attributes of the first device. You can give multiple paths as a semicolon seperated list, the first available will then be chosen on guest start.",
                  "pattern": "(?:[a-f0-9]{4,}:[a-f0-9]{2}:[a-f0-9]{2}(?:.[a-f0-9])?;)*[a-f0-9]{4,}:[a-f0-9]{2}:[a-f0-9]{2}(?:.[a-f0-9])?",
                  "type": "string"
                },
                "subsystem-id": {
                  "description": "The subsystem vendor and device ID that is expected. Used for detecting hardware changes.",
                  "optional": 1,
                  "pattern": "(?^:^[0-9A-Fa-f]{4}:[0-9A-Fa-f]{4}$)",
                  "type": "string"
                }
              },
              "type": "string"
            }
          },
          "mdev": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "POST-NodesStorageDownloadurl-RB": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "pattern": "https?://.*"
          },
          "content": {
            "enum": [
              "iso",
              "vztmpl",
              "import"
            ],
            "type": "string"
          },
          "checksum-algorithm": {
            "enum": [
              "md5",
              "sha1",
              "sha224",
              "sha256",
              "sha384",
              "sha512"
            ],
            "type": "string"
          },
          "checksum": {
            "type": "string"
          },
          "filename": {
            "type": "string",
            "maxLength": 255
          },
          "node": {
            "type": "string"
          },
          "storage": {
            "type": "string"
          },
          "verify-certificates": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "compression": {
            "type": "string"
          }
        }
      },
      "POST-NodesSuspendall-RB": {
        "type": "object",
        "properties": {
          "node": {
            "type": "string"
          },
          "vms": {
            "type": "string"
          }
        }
      },
      "GET-NodesFirewallLog-RB": {
        "type": "object",
        "properties": {
          "since": {
            "type": "integer"
          },
          "start": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "until": {
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "DELETE-NodesLxcSnapshot-RB": {
        "type": "object",
        "properties": {
          "force": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "snapname": {
            "type": "string",
            "maxLength": 40
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "PUT-ClusterOptions-RB": {
        "type": "object",
        "properties": {
          "http_proxy": {
            "type": "string",
            "pattern": "http://.*"
          },
          "description": {
            "type": "string",
            "maxLength": 65536
          },
          "u2f": {
            "type": "string"
          },
          "max_workers": {
            "type": "integer",
            "minimum": 1
          },
          "next-id": {
            "type": "string"
          },
          "migration_unsecure": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "notify": {
            "type": "string"
          },
          "ha": {
            "type": "string"
          },
          "console": {
            "enum": [
              "applet",
              "vv",
              "html5",
              "xtermjs"
            ],
            "type": "string"
          },
          "language": {
            "enum": [
              "ar",
              "ca",
              "da",
              "de",
              "en",
              "es",
              "eu",
              "fa",
              "fr",
              "hr",
              "he",
              "it",
              "ja",
              "ka",
              "kr",
              "nb",
              "nl",
              "nn",
              "pl",
              "pt_BR",
              "ru",
              "sl",
              "sv",
              "tr",
              "ukr",
              "zh_CN",
              "zh_TW"
            ],
            "type": "string"
          },
          "mac_prefix": {
            "type": "string"
          },
          "registered-tags": {
            "type": "string",
            "pattern": "(?:(?^i:[a-z0-9_][a-z0-9_\\-\\+\\.]*);)*(?^i:[a-z0-9_][a-z0-9_\\-\\+\\.]*)"
          },
          "keyboard": {
            "enum": [
              "de",
              "de-ch",
              "da",
              "en-gb",
              "en-us",
              "es",
              "fi",
              "fr",
              "fr-be",
              "fr-ca",
              "fr-ch",
              "hu",
              "is",
              "it",
              "ja",
              "lt",
              "mk",
              "nl",
              "no",
              "pl",
              "pt",
              "pt-br",
              "sv",
              "sl",
              "tr"
            ],
            "type": "string"
          },
          "bwlimit": {
            "type": "string"
          },
          "email_from": {
            "type": "string"
          },
          "fencing": {
            "enum": [
              "watchdog",
              "hardware",
              "both"
            ],
            "type": "string"
          },
          "migration": {
            "type": "string"
          },
          "delete": {
            "type": "string"
          },
          "webauthn": {
            "type": "string"
          },
          "user-tag-access": {
            "type": "string"
          },
          "crs": {
            "type": "string"
          },
          "tag-style": {
            "type": "string"
          }
        }
      },
      "POST-ClusterSdnDns-RB": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "ttl": {
            "type": "integer"
          },
          "url": {
            "type": "string"
          },
          "type": {
            "enum": [
              "powerdns"
            ],
            "type": "string"
          },
          "reversemaskv6": {
            "type": "integer"
          },
          "dns": {
            "type": "string"
          },
          "reversev6mask": {
            "type": "integer"
          }
        }
      },
      "GET-ClusterSdnIpams-RB": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "netbox",
              "phpipam",
              "pve"
            ],
            "type": "string"
          }
        }
      },
      "PUT-ClusterFirewallRules-RB": {
        "type": "object",
        "properties": {
          "pos": {
            "type": "integer"
          },
          "moveto": {
            "type": "integer"
          },
          "type": {
            "enum": [
              "in",
              "out",
              "forward",
              "group"
            ],
            "type": "string"
          },
          "dest": {
            "type": "string",
            "maxLength": 512
          },
          "source": {
            "type": "string",
            "maxLength": 512
          },
          "comment": {
            "type": "string"
          },
          "enable": {
            "type": "integer"
          },
          "macro": {
            "type": "string",
            "maxLength": 128
          },
          "action": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 20,
            "type": "string"
          },
          "dport": {
            "type": "string"
          },
          "log": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "sport": {
            "type": "string"
          },
          "iface": {
            "minLength": 2,
            "maxLength": 20,
            "type": "string"
          },
          "delete": {
            "type": "string"
          },
          "proto": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "icmp-type": {
            "type": "string"
          }
        }
      },
      "ClusterNotificationsEndpoints": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "GET-NodesSyslog-RB": {
        "type": "object",
        "properties": {
          "until": {
            "type": "string",
            "pattern": "^\\d{4}-\\d{2}-\\d{2}( \\d{2}:\\d{2}(:\\d{2})?)?$"
          },
          "limit": {
            "type": "integer"
          },
          "service": {
            "type": "string",
            "maxLength": 128
          },
          "node": {
            "type": "string"
          },
          "since": {
            "type": "string",
            "pattern": "^\\d{4}-\\d{2}-\\d{2}( \\d{2}:\\d{2}(:\\d{2})?)?$"
          },
          "start": {
            "type": "integer"
          }
        }
      },
      "NodesQemuAgentFileread": {
        "type": "object",
        "properties": {
          "truncated": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "content": {
            "type": "string"
          }
        }
      },
      "PUT-NodesConfig-RB": {
        "type": "object",
        "properties": {
          "wakeonlan": {
            "type": "string"
          },
          "acmedomain[n]": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 40
          },
          "acme": {
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "startall-onboot-delay": {
            "type": "integer",
            "maximum": 300
          },
          "delete": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "maxLength": 65536
          }
        }
      },
      "POST-NodesStartall-RB": {
        "type": "object",
        "properties": {
          "force": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "vms": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "PUT-NodesTime-RB": {
        "type": "object",
        "properties": {
          "node": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          }
        }
      },
      "GET-NodesQemuMtunnelwebsocket-RB": {
        "type": "object",
        "properties": {
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "socket": {
            "type": "string"
          },
          "ticket": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "GET-NodesVncwebsocket-RB": {
        "type": "object",
        "properties": {
          "port": {
            "minimum": 5900,
            "type": "integer",
            "maximum": 5999
          },
          "vncticket": {
            "type": "string",
            "maxLength": 512
          },
          "node": {
            "type": "string"
          }
        }
      },
      "AccessTfa-GET": {
        "type": "object",
        "properties": {
          "enable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "created": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "enum": [
              "totp",
              "u2f",
              "webauthn",
              "recovery",
              "yubico"
            ],
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "POST-NodesQemuStatusStop-RB": {
        "type": "object",
        "properties": {
          "migratedfrom": {
            "type": "string"
          },
          "overrule-shutdown": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "timeout": {
            "type": "integer"
          },
          "keepActive": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "skiplock": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "POST-NodesCertificatesCustom-RB": {
        "type": "object",
        "properties": {
          "force": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "key": {
            "type": "string"
          },
          "certificates": {
            "type": "string"
          },
          "restart": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesHardwarePci-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "method": {
              "type": "string"
            }
          }
        }
      },
      "GET-NodesScanCifs-RB": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "server": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "POST-ClusterBackup-RB": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "prune-backups": {
            "type": "string"
          },
          "bwlimit": {
            "type": "integer"
          },
          "remove": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "fleecing": {
            "type": "string"
          },
          "schedule": {
            "type": "string",
            "maxLength": 128
          },
          "all": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "dow": {
            "type": "string"
          },
          "protected": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "exclude-path": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pbs-change-detection-mode": {
            "enum": [
              "legacy",
              "data",
              "metadata"
            ],
            "type": "string"
          },
          "script": {
            "type": "string"
          },
          "repeat-missed": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "comment": {
            "type": "string",
            "maxLength": 512
          },
          "tmpdir": {
            "type": "string"
          },
          "pool": {
            "type": "string"
          },
          "zstd": {
            "type": "integer"
          },
          "stopwait": {
            "type": "integer"
          },
          "enabled": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "exclude": {
            "type": "string"
          },
          "stop": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "mailto": {
            "type": "string"
          },
          "storage": {
            "type": "string"
          },
          "notes-template": {
            "type": "string",
            "maxLength": 1024
          },
          "dumpdir": {
            "type": "string"
          },
          "stdexcludes": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "mailnotification": {
            "enum": [
              "always",
              "failure"
            ],
            "type": "string"
          },
          "mode": {
            "enum": [
              "snapshot",
              "suspend",
              "stop"
            ],
            "type": "string"
          },
          "lockwait": {
            "type": "integer"
          },
          "notification-target": {
            "type": "string"
          },
          "pigz": {
            "type": "integer"
          },
          "performance": {
            "type": "string"
          },
          "maxfiles": {
            "type": "integer",
            "minimum": 1
          },
          "ionice": {
            "type": "integer",
            "maximum": 8
          },
          "notification-policy": {
            "enum": [
              "always",
              "failure",
              "never"
            ],
            "type": "string"
          },
          "starttime": {
            "type": "string",
            "pattern": "\\d{1,2}:\\d{1,2}"
          },
          "vmid": {
            "type": "string"
          },
          "compress": {
            "enum": [
              "0",
              "1",
              "gzip",
              "lzo",
              "zstd"
            ],
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "quiet": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "notification-mode": {
            "enum": [
              "auto",
              "legacy-sendmail",
              "notification-system"
            ],
            "type": "string"
          }
        }
      },
      "NodesSubscription": {
        "type": "object",
        "properties": {
          "checktime": {
            "type": "integer"
          },
          "nextduedate": {
            "type": "string"
          },
          "regdate": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "productname": {
            "type": "string"
          },
          "level": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "serverid": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "status": {
            "enum": [
              "new",
              "notfound",
              "active",
              "invalid",
              "expired",
              "suspended"
            ],
            "type": "string"
          },
          "sockets": {
            "type": "integer"
          }
        }
      },
      "GET-NodesStorageImportmetadata-RB": {
        "type": "object",
        "properties": {
          "storage": {
            "type": "string"
          },
          "volume": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "PUT-Storage-RB": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "maxLength": 256
          },
          "prune-backups": {
            "type": "string"
          },
          "blocksize": {
            "type": "string"
          },
          "transport": {
            "enum": [
              "tcp",
              "rdma",
              "unix"
            ],
            "type": "string"
          },
          "saferemove": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "skip-cert-verification": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "lio_tpg": {
            "type": "string"
          },
          "create-base-path": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "nodes": {
            "type": "string"
          },
          "krbd": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "fuse": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "subdir": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "fs-name": {
            "type": "string"
          },
          "tagged_only": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "data-pool": {
            "type": "string"
          },
          "fingerprint": {
            "type": "string",
            "pattern": "([A-Fa-f0-9]{2}:){31}[A-Fa-f0-9]{2}"
          },
          "pool": {
            "type": "string"
          },
          "saferemove_throughput": {
            "type": "string"
          },
          "preallocation": {
            "enum": [
              "off",
              "metadata",
              "falloc",
              "full"
            ],
            "type": "string"
          },
          "delete": {
            "type": "string",
            "maxLength": 4096
          },
          "encryption-key": {
            "type": "string"
          },
          "port": {
            "minimum": 1,
            "type": "integer",
            "maximum": 65535
          },
          "monhost": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "smbversion": {
            "enum": [
              "default",
              "2.0",
              "2.1",
              "3",
              "3.0",
              "3.11"
            ],
            "type": "string"
          },
          "max-protected-backups": {
            "type": "integer",
            "minimum": -1
          },
          "is_mountpoint": {
            "type": "string"
          },
          "disable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "username": {
            "type": "string"
          },
          "master-pubkey": {
            "type": "string"
          },
          "nocow": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "nowritecache": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "mkdir": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "comstar_hg": {
            "type": "string"
          },
          "server2": {
            "type": "string"
          },
          "maxfiles": {
            "type": "integer"
          },
          "server": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "mountpoint": {
            "type": "string"
          },
          "domain": {
            "type": "string",
            "maxLength": 256
          },
          "keyring": {
            "type": "string"
          },
          "comstar_tg": {
            "type": "string"
          },
          "bwlimit": {
            "type": "string"
          },
          "options": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "create-subdirs": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "storage": {
            "type": "string"
          },
          "shared": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "sparse": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "content-dirs": {
            "type": "string"
          }
        }
      },
      "ClusterHaStatus": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "GET-NodesDisksList-RB": {
        "type": "object",
        "properties": {
          "include-partitions": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "type": {
            "enum": [
              "unused",
              "journal_disks"
            ],
            "type": "string"
          },
          "skipsmart": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesQemuConfig": {
        "type": "object",
        "properties": {
          "keyboard": {
            "enum": [
              "de",
              "de-ch",
              "da",
              "en-gb",
              "en-us",
              "es",
              "fi",
              "fr",
              "fr-be",
              "fr-ca",
              "fr-ch",
              "hu",
              "is",
              "it",
              "ja",
              "lt",
              "mk",
              "nl",
              "no",
              "pl",
              "pt",
              "pt-br",
              "sv",
              "sl",
              "tr"
            ],
            "type": "string"
          },
          "efidisk0": {
            "type": "string"
          },
          "net[n]": {
            "type": "string"
          },
          "vcpus": {
            "type": "integer",
            "minimum": 1
          },
          "cores": {
            "type": "integer",
            "minimum": 1
          },
          "ciuser": {
            "type": "string"
          },
          "startup": {
            "type": "string"
          },
          "cdrom": {
            "type": "string"
          },
          "usb[n]": {
            "type": "string"
          },
          "cicustom": {
            "type": "string"
          },
          "ciupgrade": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "cpulimit": {
            "type": "number",
            "maximum": 128
          },
          "spice_enhancements": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "freeze": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "tpmstate0": {
            "type": "string"
          },
          "ipconfig[n]": {
            "type": "string"
          },
          "args": {
            "type": "string"
          },
          "localtime": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "rng0": {
            "type": "string"
          },
          "migrate_speed": {
            "type": "integer"
          },
          "balloon": {
            "type": "integer"
          },
          "hookscript": {
            "type": "string"
          },
          "tdf": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "lock": {
            "enum": [
              "backup",
              "clone",
              "create",
              "migrate",
              "rollback",
              "snapshot",
              "snapshot-delete",
              "suspending",
              "suspended"
            ],
            "type": "string"
          },
          "smp": {
            "type": "integer",
            "minimum": 1
          },
          "numa": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "vmstatestorage": {
            "type": "string"
          },
          "scsihw": {
            "enum": [
              "lsi",
              "lsi53c810",
              "virtio-scsi-pci",
              "virtio-scsi-single",
              "megasas",
              "pvscsi"
            ],
            "type": "string"
          },
          "shares": {
            "type": "integer",
            "maximum": 50000
          },
          "onboot": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "cpu": {
            "type": "string"
          },
          "reboot": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "cpuunits": {
            "minimum": 1,
            "type": "integer",
            "maximum": 262144
          },
          "autostart": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "description": {
            "type": "string",
            "maxLength": 8192
          },
          "cipassword": {
            "type": "string"
          },
          "hotplug": {
            "type": "string"
          },
          "tablet": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "citype": {
            "enum": [
              "configdrive2",
              "nocloud",
              "opennebula"
            ],
            "type": "string"
          },
          "kvm": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "memory": {
            "type": "string"
          },
          "bios": {
            "enum": [
              "seabios",
              "ovmf"
            ],
            "type": "string"
          },
          "ivshmem": {
            "type": "string"
          },
          "vga": {
            "type": "string"
          },
          "agent": {
            "type": "string"
          },
          "audio0": {
            "type": "string"
          },
          "parallel[n]": {
            "type": "string",
            "pattern": "/dev/parport\\d+|/dev/usb/lp\\d+"
          },
          "scsi[n]": {
            "type": "string"
          },
          "digest": {
            "type": "string"
          },
          "unused[n]": {
            "type": "string"
          },
          "ide[n]": {
            "type": "string"
          },
          "boot": {
            "type": "string"
          },
          "smbios1": {
            "type": "string",
            "maxLength": 512
          },
          "keephugepages": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "startdate": {
            "type": "string",
            "pattern": "(now|\\d{4}-\\d{1,2}-\\d{1,2}(T\\d{1,2}:\\d{1,2}:\\d{1,2})?)"
          },
          "protection": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "numa[n]": {
            "type": "string"
          },
          "template": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "sata[n]": {
            "type": "string"
          },
          "nameserver": {
            "type": "string"
          },
          "machine": {
            "type": "string"
          },
          "arch": {
            "enum": [
              "x86_64",
              "aarch64"
            ],
            "type": "string"
          },
          "ostype": {
            "enum": [
              "other",
              "wxp",
              "w2k",
              "w2k3",
              "w2k8",
              "wvista",
              "win7",
              "win8",
              "win10",
              "win11",
              "l24",
              "l26",
              "solaris"
            ],
            "type": "string"
          },
          "serial[n]": {
            "type": "string",
            "pattern": "(/dev/.+|socket)"
          },
          "affinity": {
            "type": "string"
          },
          "sockets": {
            "type": "integer",
            "minimum": 1
          },
          "bootdisk": {
            "type": "string",
            "pattern": "(ide|sata|scsi|virtio)\\d+"
          },
          "searchdomain": {
            "type": "string"
          },
          "tags": {
            "type": "string"
          },
          "acpi": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "virtio[n]": {
            "type": "string"
          },
          "watchdog": {
            "type": "string"
          },
          "sshkeys": {
            "type": "string"
          },
          "amd-sev": {
            "type": "string"
          },
          "hugepages": {
            "enum": [
              "any",
              "2",
              "1024"
            ],
            "type": "string"
          },
          "vmgenid": {
            "type": "string",
            "pattern": "(?:[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}|[01])"
          },
          "hostpci[n]": {
            "type": "string"
          },
          "migrate_downtime": {
            "type": "number"
          }
        }
      },
      "NodesQemuFirewallIpset": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "comment": {
              "type": "string"
            },
            "digest": {
              "type": "string",
              "maxLength": 64
            },
            "name": {
              "minLength": 2,
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64,
              "type": "string"
            }
          }
        }
      },
      "ClusterFirewallIpset": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "comment": {
              "type": "string"
            },
            "digest": {
              "type": "string",
              "maxLength": 64
            },
            "name": {
              "minLength": 2,
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64,
              "type": "string"
            }
          }
        }
      },
      "AccessUsers-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "totp-locked": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "email": {
              "type": "string",
              "maxLength": 254
            },
            "lastname": {
              "type": "string",
              "maxLength": 1024
            },
            "tokens": {
              "type": "array",
              "items": {
                "properties": {
                  "comment": {
                    "optional": 1,
                    "type": "string"
                  },
                  "expire": {
                    "default": "same as user",
                    "description": "API token expiration date (seconds since epoch). '0' means no expiration date.",
                    "minimum": 0,
                    "optional": 1,
                    "type": "integer"
                  },
                  "privsep": {
                    "default": 1,
                    "description": "Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.",
                    "optional": 1,
                    "type": "boolean"
                  },
                  "tokenid": {
                    "description": "User-specific token identifier.",
                    "pattern": "(?^:[A-Za-z][A-Za-z0-9\\.\\-_]+)",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "enable": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "firstname": {
              "type": "string",
              "maxLength": 1024
            },
            "comment": {
              "type": "string",
              "maxLength": 2048
            },
            "realm-type": {
              "type": "string"
            },
            "tfa-locked-until": {
              "type": "integer"
            },
            "groups": {
              "type": "string"
            },
            "keys": {
              "type": "string",
              "pattern": "[0-9a-zA-Z!=]{0,4096}"
            },
            "userid": {
              "type": "string",
              "maxLength": 64
            },
            "expire": {
              "type": "integer"
            }
          }
        }
      },
      "POST-AccessGroups-RB": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "groupid": {
            "type": "string"
          }
        }
      },
      "PUT-NodesQemuResize-RB": {
        "type": "object",
        "properties": {
          "disk": {
            "enum": [
              "ide0",
              "ide1",
              "ide2",
              "ide3",
              "scsi0",
              "scsi1",
              "scsi2",
              "scsi3",
              "scsi4",
              "scsi5",
              "scsi6",
              "scsi7",
              "scsi8",
              "scsi9",
              "scsi10",
              "scsi11",
              "scsi12",
              "scsi13",
              "scsi14",
              "scsi15",
              "scsi16",
              "scsi17",
              "scsi18",
              "scsi19",
              "scsi20",
              "scsi21",
              "scsi22",
              "scsi23",
              "scsi24",
              "scsi25",
              "scsi26",
              "scsi27",
              "scsi28",
              "scsi29",
              "scsi30",
              "virtio0",
              "virtio1",
              "virtio2",
              "virtio3",
              "virtio4",
              "virtio5",
              "virtio6",
              "virtio7",
              "virtio8",
              "virtio9",
              "virtio10",
              "virtio11",
              "virtio12",
              "virtio13",
              "virtio14",
              "virtio15",
              "sata0",
              "sata1",
              "sata2",
              "sata3",
              "sata4",
              "sata5",
              "efidisk0",
              "tpmstate0"
            ],
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 40
          },
          "node": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "skiplock": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "size": {
            "type": "string",
            "pattern": "\\+?\\d+(\\.\\d+)?[KMGT]?"
          }
        }
      },
      "ClusterSdnIpams": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "ipam": {
              "type": "string"
            }
          }
        }
      },
      "NodesQueryurlmetadata": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string"
          },
          "mimetype": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          }
        }
      },
      "DELETE-ClusterSdnVnetsFirewallRules-RB": {
        "type": "object",
        "properties": {
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "vnet": {
            "type": "string"
          },
          "pos": {
            "type": "integer"
          }
        }
      },
      "DELETE-NodesDisksLvm-RB": {
        "type": "object",
        "properties": {
          "cleanup-disks": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "cleanup-config": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "GET-ClusterSdnDns-RB": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "powerdns"
            ],
            "type": "string"
          }
        }
      },
      "NodesHardware": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            }
          }
        }
      },
      "GET-NodesQemuAgentFileread-RB": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "AccessTfa-GET-AV": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "enable": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "created": {
              "type": "integer"
            },
            "description": {
              "type": "string"
            },
            "type": {
              "enum": [
                "totp",
                "u2f",
                "webauthn",
                "recovery",
                "yubico"
              ],
              "type": "string"
            },
            "id": {
              "type": "string"
            }
          }
        }
      },
      "ClusterResources": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "tags": {
              "type": "string"
            },
            "mem": {
              "type": "integer"
            },
            "diskread": {
              "type": "integer"
            },
            "level": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "type": {
              "enum": [
                "node",
                "storage",
                "pool",
                "qemu",
                "lxc",
                "openvz",
                "sdn"
              ],
              "type": "string"
            },
            "disk": {
              "type": "integer"
            },
            "maxcpu": {
              "type": "number"
            },
            "pool": {
              "type": "string"
            },
            "plugintype": {
              "type": "string"
            },
            "netout": {
              "type": "integer"
            },
            "diskwrite": {
              "type": "integer"
            },
            "template": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "cpu": {
              "type": "number"
            },
            "maxdisk": {
              "type": "integer"
            },
            "storage": {
              "type": "string"
            },
            "hastate": {
              "type": "string"
            },
            "lock": {
              "type": "string"
            },
            "content": {
              "type": "string"
            },
            "maxmem": {
              "type": "integer"
            },
            "uptime": {
              "type": "integer"
            },
            "netin": {
              "type": "integer"
            },
            "vmid": {
              "minimum": 100,
              "type": "integer",
              "maximum": 999999999
            },
            "cgroup-mode": {
              "type": "integer"
            },
            "node": {
              "type": "string"
            },
            "status": {
              "type": "string"
            }
          }
        }
      },
      "NodesLxcFirewallRefs": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "comment": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "scope": {
              "type": "string"
            },
            "type": {
              "enum": [
                "alias",
                "ipset"
              ],
              "type": "string"
            },
            "ref": {
              "type": "string"
            }
          }
        }
      },
      "GET-NodesStoragePrunebackups-RB": {
        "type": "object",
        "properties": {
          "storage": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "prune-backups": {
            "type": "string"
          },
          "type": {
            "enum": [
              "qemu",
              "lxc"
            ],
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "GET-NodesLxcConfig-RB": {
        "type": "object",
        "properties": {
          "current": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "snapshot": {
            "type": "string",
            "maxLength": 40
          },
          "node": {
            "type": "string"
          }
        }
      },
      "POST-AccessOpenidLogin-RB": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "maxLength": 1024
          },
          "code": {
            "type": "string",
            "maxLength": 4096
          },
          "redirect-url": {
            "type": "string",
            "maxLength": 255
          }
        }
      },
      "POST-NodesQemuStatusReset-RB": {
        "type": "object",
        "properties": {
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "skiplock": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "POST-ClusterSdnIpams-RB": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "ipam": {
            "type": "string"
          },
          "section": {
            "type": "integer"
          },
          "token": {
            "type": "string"
          },
          "type": {
            "enum": [
              "netbox",
              "phpipam",
              "pve"
            ],
            "type": "string"
          }
        }
      },
      "POST-NodesQemuTermproxy-RB": {
        "type": "object",
        "properties": {
          "serial": {
            "enum": [
              "serial0",
              "serial1",
              "serial2",
              "serial3"
            ],
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "POST-NodesLxcSnapshot-RB": {
        "type": "object",
        "properties": {
          "snapname": {
            "type": "string",
            "maxLength": 40
          },
          "description": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesVncwebsocket": {
        "type": "object",
        "properties": {
          "port": {
            "type": "string"
          }
        }
      },
      "POST-NodesQemu-RB": {
        "type": "object",
        "properties": {
          "keyboard": {
            "enum": [
              "de",
              "de-ch",
              "da",
              "en-gb",
              "en-us",
              "es",
              "fi",
              "fr",
              "fr-be",
              "fr-ca",
              "fr-ch",
              "hu",
              "is",
              "it",
              "ja",
              "lt",
              "mk",
              "nl",
              "no",
              "pl",
              "pt",
              "pt-br",
              "sv",
              "sl",
              "tr"
            ],
            "type": "string"
          },
          "efidisk0": {
            "type": "string"
          },
          "net[n]": {
            "type": "string"
          },
          "vcpus": {
            "type": "integer",
            "minimum": 1
          },
          "pool": {
            "type": "string"
          },
          "cores": {
            "type": "integer",
            "minimum": 1
          },
          "start": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "ciuser": {
            "type": "string"
          },
          "startup": {
            "type": "string"
          },
          "cdrom": {
            "type": "string"
          },
          "usb[n]": {
            "type": "string"
          },
          "cicustom": {
            "type": "string"
          },
          "ciupgrade": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "cpulimit": {
            "type": "number",
            "maximum": 128
          },
          "spice_enhancements": {
            "type": "string"
          },
          "unique": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "freeze": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "live-restore": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "tpmstate0": {
            "type": "string"
          },
          "ipconfig[n]": {
            "type": "string"
          },
          "args": {
            "type": "string"
          },
          "localtime": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "rng0": {
            "type": "string"
          },
          "migrate_speed": {
            "type": "integer"
          },
          "balloon": {
            "type": "integer"
          },
          "import-working-storage": {
            "type": "string"
          },
          "hookscript": {
            "type": "string"
          },
          "tdf": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "lock": {
            "enum": [
              "backup",
              "clone",
              "create",
              "migrate",
              "rollback",
              "snapshot",
              "snapshot-delete",
              "suspending",
              "suspended"
            ],
            "type": "string"
          },
          "smp": {
            "type": "integer",
            "minimum": 1
          },
          "numa": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "vmstatestorage": {
            "type": "string"
          },
          "bwlimit": {
            "type": "integer",
            "minimum": "0"
          },
          "shares": {
            "type": "integer",
            "maximum": 50000
          },
          "onboot": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "cpu": {
            "type": "string"
          },
          "reboot": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "cpuunits": {
            "minimum": 1,
            "type": "integer",
            "maximum": 262144
          },
          "autostart": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "scsihw": {
            "enum": [
              "lsi",
              "lsi53c810",
              "virtio-scsi-pci",
              "virtio-scsi-single",
              "megasas",
              "pvscsi"
            ],
            "type": "string"
          },
          "description": {
            "type": "string",
            "maxLength": 8192
          },
          "storage": {
            "type": "string"
          },
          "cipassword": {
            "type": "string"
          },
          "hotplug": {
            "type": "string"
          },
          "force": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "citype": {
            "enum": [
              "configdrive2",
              "nocloud",
              "opennebula"
            ],
            "type": "string"
          },
          "kvm": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "memory": {
            "type": "string"
          },
          "bios": {
            "enum": [
              "seabios",
              "ovmf"
            ],
            "type": "string"
          },
          "ivshmem": {
            "type": "string"
          },
          "vga": {
            "type": "string"
          },
          "agent": {
            "type": "string"
          },
          "audio0": {
            "type": "string"
          },
          "parallel[n]": {
            "type": "string",
            "pattern": "/dev/parport\\d+|/dev/usb/lp\\d+"
          },
          "scsi[n]": {
            "type": "string"
          },
          "archive": {
            "type": "string",
            "maxLength": 255
          },
          "unused[n]": {
            "type": "string"
          },
          "ide[n]": {
            "type": "string"
          },
          "boot": {
            "type": "string"
          },
          "smbios1": {
            "type": "string",
            "maxLength": 512
          },
          "keephugepages": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          },
          "tablet": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "startdate": {
            "type": "string",
            "pattern": "(now|\\d{4}-\\d{1,2}-\\d{1,2}(T\\d{1,2}:\\d{1,2}:\\d{1,2})?)"
          },
          "protection": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "numa[n]": {
            "type": "string"
          },
          "template": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "sata[n]": {
            "type": "string"
          },
          "nameserver": {
            "type": "string"
          },
          "machine": {
            "type": "string"
          },
          "arch": {
            "enum": [
              "x86_64",
              "aarch64"
            ],
            "type": "string"
          },
          "ostype": {
            "enum": [
              "other",
              "wxp",
              "w2k",
              "w2k3",
              "w2k8",
              "wvista",
              "win7",
              "win8",
              "win10",
              "win11",
              "l24",
              "l26",
              "solaris"
            ],
            "type": "string"
          },
          "serial[n]": {
            "type": "string",
            "pattern": "(/dev/.+|socket)"
          },
          "affinity": {
            "type": "string"
          },
          "sockets": {
            "type": "integer",
            "minimum": 1
          },
          "bootdisk": {
            "type": "string",
            "pattern": "(ide|sata|scsi|virtio)\\d+"
          },
          "searchdomain": {
            "type": "string"
          },
          "tags": {
            "type": "string"
          },
          "acpi": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "virtio[n]": {
            "type": "string"
          },
          "watchdog": {
            "type": "string"
          },
          "sshkeys": {
            "type": "string"
          },
          "amd-sev": {
            "type": "string"
          },
          "hugepages": {
            "enum": [
              "any",
              "2",
              "1024"
            ],
            "type": "string"
          },
          "vmgenid": {
            "type": "string",
            "pattern": "(?:[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}|[01])"
          },
          "hostpci[n]": {
            "type": "string"
          },
          "migrate_downtime": {
            "type": "number"
          }
        }
      },
      "GET-ClusterCephMetadata-RB": {
        "type": "object",
        "properties": {
          "scope": {
            "enum": [
              "all",
              "versions"
            ],
            "type": "string"
          }
        }
      },
      "POST-AccessDomains-RB": {
        "type": "object",
        "properties": {
          "group_filter": {
            "type": "string",
            "maxLength": 2048
          },
          "type": {
            "enum": [
              "ad",
              "ldap",
              "openid",
              "pam",
              "pve"
            ],
            "type": "string"
          },
          "capath": {
            "type": "string"
          },
          "filter": {
            "type": "string",
            "maxLength": 2048
          },
          "client-id": {
            "type": "string",
            "maxLength": 256
          },
          "mode": {
            "enum": [
              "ldap",
              "ldaps",
              "ldap+starttls"
            ],
            "type": "string"
          },
          "tfa": {
            "type": "string",
            "maxLength": 128
          },
          "sync_attributes": {
            "type": "string",
            "pattern": "\\w+=[^,]+(,\\s*\\w+=[^,]+)*"
          },
          "prompt": {
            "type": "string",
            "pattern": "(?:none|login|consent|select_account|\\S+)"
          },
          "comment": {
            "type": "string",
            "maxLength": 4096
          },
          "case-sensitive": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "group_classes": {
            "type": "string"
          },
          "username-claim": {
            "type": "string"
          },
          "server2": {
            "type": "string",
            "maxLength": 256
          },
          "user_attr": {
            "pattern": "\\S{2,}",
            "maxLength": 256,
            "type": "string"
          },
          "cert": {
            "type": "string"
          },
          "sslversion": {
            "enum": [
              "tlsv1",
              "tlsv1_1",
              "tlsv1_2",
              "tlsv1_3"
            ],
            "type": "string"
          },
          "group_dn": {
            "type": "string",
            "maxLength": 256
          },
          "check-connection": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "port": {
            "minimum": 1,
            "type": "integer",
            "maximum": 65535
          },
          "realm": {
            "type": "string",
            "maxLength": 32
          },
          "sync-defaults-options": {
            "type": "string"
          },
          "certkey": {
            "type": "string"
          },
          "issuer-url": {
            "type": "string",
            "maxLength": 256
          },
          "default": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "client-key": {
            "type": "string",
            "maxLength": 256
          },
          "base_dn": {
            "type": "string",
            "maxLength": 256
          },
          "group_name_attr": {
            "type": "string",
            "maxLength": 256
          },
          "secure": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "verify": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "autocreate": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "acr-values": {
            "type": "string",
            "pattern": "^[^\\x00-\\x1F\\x7F <>#\"]*$"
          },
          "domain": {
            "pattern": "\\S+",
            "maxLength": 256,
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "user_classes": {
            "type": "string"
          },
          "server1": {
            "type": "string",
            "maxLength": 256
          },
          "scopes": {
            "type": "string"
          },
          "bind_dn": {
            "type": "string",
            "maxLength": 256
          }
        }
      },
      "POST-ClusterReplication-RB": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string"
          },
          "schedule": {
            "type": "string",
            "maxLength": 128
          },
          "target": {
            "type": "string"
          },
          "type": {
            "enum": [
              "local"
            ],
            "type": "string"
          },
          "rate": {
            "type": "number",
            "minimum": 1
          },
          "comment": {
            "type": "string",
            "maxLength": 4096
          },
          "disable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "remove_job": {
            "enum": [
              "local",
              "full"
            ],
            "type": "string"
          },
          "id": {
            "type": "string",
            "pattern": "[1-9][0-9]{2,8}-\\d{1,9}"
          }
        }
      },
      "GET-NodesQemu-RB": {
        "type": "object",
        "properties": {
          "node": {
            "type": "string"
          },
          "full": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "NodesAptVersions": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "POST-NodesCephOsd-RB": {
        "type": "object",
        "properties": {
          "osds-per-device": {
            "type": "integer",
            "minimum": "1"
          },
          "encrypted": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "dev": {
            "type": "string"
          },
          "db_dev": {
            "type": "string"
          },
          "wal_dev": {
            "type": "string"
          },
          "db_dev_size": {
            "type": "number",
            "minimum": 1
          },
          "node": {
            "type": "string"
          },
          "crush-device-class": {
            "type": "string"
          },
          "wal_dev_size": {
            "type": "number",
            "minimum": 0.5
          }
        }
      },
      "NodesStorageRrddata": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "NodesHardwarePciMdev": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "available": {
              "type": "integer"
            },
            "type": {
              "type": "string"
            }
          }
        }
      },
      "DELETE-ClusterFirewallGroups-RB": {
        "type": "object",
        "properties": {
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "group": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 18,
            "type": "string"
          },
          "pos": {
            "type": "integer"
          }
        }
      },
      "POST-NodesDisksLvmthin-RB": {
        "type": "object",
        "properties": {
          "add_storage": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "device": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "ClusterNotificationsEndpointsGotify-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "comment": {
              "type": "string"
            },
            "server": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "disable": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "origin": {
              "enum": [
                "user-created",
                "builtin",
                "modified-builtin"
              ],
              "type": "string"
            }
          }
        }
      },
      "GET-ClusterSdnZones-RB": {
        "type": "object",
        "properties": {
          "pending": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "running": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "zone": {
            "type": "string"
          }
        }
      },
      "ClusterNotificationsMatchers-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "invert-match": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "mode": {
              "enum": [
                "all",
                "any"
              ],
              "type": "string"
            },
            "match-severity": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "origin": {
              "enum": [
                "user-created",
                "builtin",
                "modified-builtin"
              ],
              "type": "string"
            },
            "match-calendar": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "target": {
              "type": "array",
              "items": {
                "format": "pve-configid",
                "type": "string"
              }
            },
            "comment": {
              "type": "string"
            },
            "match-field": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "disable": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "name": {
              "type": "string"
            }
          }
        }
      },
      "DELETE-NodesQemuFirewallIpset-RB": {
        "type": "object",
        "properties": {
          "cidr": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "name": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 64,
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesStoragePrunebackups": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "mark": {
              "enum": [
                "keep",
                "remove",
                "protected",
                "renamed"
              ],
              "type": "string"
            },
            "volid": {
              "type": "string"
            },
            "ctime": {
              "type": "integer"
            },
            "vmid": {
              "type": "integer"
            },
            "type": {
              "type": "string"
            }
          }
        }
      },
      "PUT-NodesQemuFirewallOptions-RB": {
        "type": "object",
        "properties": {
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "macfilter": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "policy_in": {
            "enum": [
              "ACCEPT",
              "REJECT",
              "DROP"
            ],
            "type": "string"
          },
          "enable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "radv": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          },
          "dhcp": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "log_level_in": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "policy_out": {
            "enum": [
              "ACCEPT",
              "REJECT",
              "DROP"
            ],
            "type": "string"
          },
          "ipfilter": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "delete": {
            "type": "string"
          },
          "ndp": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "log_level_out": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          }
        }
      },
      "NodesLxc": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "status": {
              "enum": [
                "stopped",
                "running"
              ],
              "type": "string"
            },
            "template": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "maxmem": {
              "type": "integer"
            },
            "netin": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            },
            "diskread": {
              "type": "integer"
            },
            "diskwrite": {
              "type": "integer"
            },
            "maxswap": {
              "type": "integer"
            },
            "tags": {
              "type": "string"
            },
            "uptime": {
              "type": "integer"
            },
            "cpus": {
              "type": "number"
            },
            "vmid": {
              "minimum": 100,
              "type": "integer",
              "maximum": 999999999
            },
            "disk": {
              "type": "integer"
            },
            "maxdisk": {
              "type": "integer"
            },
            "lock": {
              "type": "string"
            },
            "netout": {
              "type": "integer"
            }
          }
        }
      },
      "PUT-NodesLxcResize-RB": {
        "type": "object",
        "properties": {
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "digest": {
            "type": "string",
            "maxLength": 40
          },
          "disk": {
            "enum": [
              "rootfs",
              "mp0",
              "mp1",
              "mp2",
              "mp3",
              "mp4",
              "mp5",
              "mp6",
              "mp7",
              "mp8",
              "mp9",
              "mp10",
              "mp11",
              "mp12",
              "mp13",
              "mp14",
              "mp15",
              "mp16",
              "mp17",
              "mp18",
              "mp19",
              "mp20",
              "mp21",
              "mp22",
              "mp23",
              "mp24",
              "mp25",
              "mp26",
              "mp27",
              "mp28",
              "mp29",
              "mp30",
              "mp31",
              "mp32",
              "mp33",
              "mp34",
              "mp35",
              "mp36",
              "mp37",
              "mp38",
              "mp39",
              "mp40",
              "mp41",
              "mp42",
              "mp43",
              "mp44",
              "mp45",
              "mp46",
              "mp47",
              "mp48",
              "mp49",
              "mp50",
              "mp51",
              "mp52",
              "mp53",
              "mp54",
              "mp55",
              "mp56",
              "mp57",
              "mp58",
              "mp59",
              "mp60",
              "mp61",
              "mp62",
              "mp63",
              "mp64",
              "mp65",
              "mp66",
              "mp67",
              "mp68",
              "mp69",
              "mp70",
              "mp71",
              "mp72",
              "mp73",
              "mp74",
              "mp75",
              "mp76",
              "mp77",
              "mp78",
              "mp79",
              "mp80",
              "mp81",
              "mp82",
              "mp83",
              "mp84",
              "mp85",
              "mp86",
              "mp87",
              "mp88",
              "mp89",
              "mp90",
              "mp91",
              "mp92",
              "mp93",
              "mp94",
              "mp95",
              "mp96",
              "mp97",
              "mp98",
              "mp99",
              "mp100",
              "mp101",
              "mp102",
              "mp103",
              "mp104",
              "mp105",
              "mp106",
              "mp107",
              "mp108",
              "mp109",
              "mp110",
              "mp111",
              "mp112",
              "mp113",
              "mp114",
              "mp115",
              "mp116",
              "mp117",
              "mp118",
              "mp119",
              "mp120",
              "mp121",
              "mp122",
              "mp123",
              "mp124",
              "mp125",
              "mp126",
              "mp127",
              "mp128",
              "mp129",
              "mp130",
              "mp131",
              "mp132",
              "mp133",
              "mp134",
              "mp135",
              "mp136",
              "mp137",
              "mp138",
              "mp139",
              "mp140",
              "mp141",
              "mp142",
              "mp143",
              "mp144",
              "mp145",
              "mp146",
              "mp147",
              "mp148",
              "mp149",
              "mp150",
              "mp151",
              "mp152",
              "mp153",
              "mp154",
              "mp155",
              "mp156",
              "mp157",
              "mp158",
              "mp159",
              "mp160",
              "mp161",
              "mp162",
              "mp163",
              "mp164",
              "mp165",
              "mp166",
              "mp167",
              "mp168",
              "mp169",
              "mp170",
              "mp171",
              "mp172",
              "mp173",
              "mp174",
              "mp175",
              "mp176",
              "mp177",
              "mp178",
              "mp179",
              "mp180",
              "mp181",
              "mp182",
              "mp183",
              "mp184",
              "mp185",
              "mp186",
              "mp187",
              "mp188",
              "mp189",
              "mp190",
              "mp191",
              "mp192",
              "mp193",
              "mp194",
              "mp195",
              "mp196",
              "mp197",
              "mp198",
              "mp199",
              "mp200",
              "mp201",
              "mp202",
              "mp203",
              "mp204",
              "mp205",
              "mp206",
              "mp207",
              "mp208",
              "mp209",
              "mp210",
              "mp211",
              "mp212",
              "mp213",
              "mp214",
              "mp215",
              "mp216",
              "mp217",
              "mp218",
              "mp219",
              "mp220",
              "mp221",
              "mp222",
              "mp223",
              "mp224",
              "mp225",
              "mp226",
              "mp227",
              "mp228",
              "mp229",
              "mp230",
              "mp231",
              "mp232",
              "mp233",
              "mp234",
              "mp235",
              "mp236",
              "mp237",
              "mp238",
              "mp239",
              "mp240",
              "mp241",
              "mp242",
              "mp243",
              "mp244",
              "mp245",
              "mp246",
              "mp247",
              "mp248",
              "mp249",
              "mp250",
              "mp251",
              "mp252",
              "mp253",
              "mp254",
              "mp255"
            ],
            "type": "string"
          },
          "size": {
            "type": "string",
            "pattern": "\\+?\\d+(\\.\\d+)?[KMGT]?"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "ClusterAcmeChallengeschema": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "schema": {
              "type": "object"
            },
            "name": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "id": {
              "type": "string"
            }
          }
        }
      },
      "GET-ClusterHaResources-RB": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "ct",
              "vm"
            ],
            "type": "string"
          }
        }
      },
      "NodesQemuFirewallLog": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "t": {
              "type": "string"
            },
            "n": {
              "type": "integer"
            }
          }
        }
      },
      "GET-NodesScanPbs-RB": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "fingerprint": {
            "type": "string",
            "pattern": "([A-Fa-f0-9]{2}:){31}[A-Fa-f0-9]{2}"
          },
          "password": {
            "type": "string"
          },
          "port": {
            "minimum": 1,
            "type": "integer",
            "maximum": 65535
          },
          "server": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesQemuMigrate": {
        "type": "object",
        "properties": {
          "local_resources": {
            "type": "array",
            "items": null
          },
          "not_allowed_nodes": {
            "type": "object"
          },
          "allowed_nodes": {
            "type": "array",
            "items": null
          },
          "local_disks": {
            "type": "array",
            "items": null
          },
          "running": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "mapped-resources": {
            "type": "array",
            "items": null
          }
        }
      },
      "PUT-NodesFirewallRules-RB": {
        "type": "object",
        "properties": {
          "pos": {
            "type": "integer"
          },
          "moveto": {
            "type": "integer"
          },
          "type": {
            "enum": [
              "in",
              "out",
              "forward",
              "group"
            ],
            "type": "string"
          },
          "dest": {
            "type": "string",
            "maxLength": 512
          },
          "source": {
            "type": "string",
            "maxLength": 512
          },
          "comment": {
            "type": "string"
          },
          "enable": {
            "type": "integer"
          },
          "macro": {
            "type": "string",
            "maxLength": 128
          },
          "node": {
            "type": "string"
          },
          "action": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 20,
            "type": "string"
          },
          "dport": {
            "type": "string"
          },
          "log": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "sport": {
            "type": "string"
          },
          "iface": {
            "minLength": 2,
            "maxLength": 20,
            "type": "string"
          },
          "delete": {
            "type": "string"
          },
          "proto": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "icmp-type": {
            "type": "string"
          }
        }
      },
      "ClusterNotificationsMatcherfieldvalues": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "comment": {
              "type": "string"
            },
            "field": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          }
        }
      },
      "GET-NodesStorageRrddata-RB": {
        "type": "object",
        "properties": {
          "timeframe": {
            "enum": [
              "hour",
              "day",
              "week",
              "month",
              "year"
            ],
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "storage": {
            "type": "string"
          },
          "cf": {
            "enum": [
              "AVERAGE",
              "MAX"
            ],
            "type": "string"
          }
        }
      },
      "PUT-NodesSubscription-RB": {
        "type": "object",
        "properties": {
          "node": {
            "type": "string"
          },
          "key": {
            "pattern": "\\s*pve([1248])([cbsp])-[0-9a-f]{10}\\s*",
            "maxLength": 32,
            "type": "string"
          }
        }
      },
      "NodesCephCfg": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "NodesQemu": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "status": {
              "enum": [
                "stopped",
                "running"
              ],
              "type": "string"
            },
            "template": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "netin": {
              "type": "integer"
            },
            "qmpstatus": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "diskread": {
              "type": "integer"
            },
            "diskwrite": {
              "type": "integer"
            },
            "tags": {
              "type": "string"
            },
            "cpus": {
              "type": "number"
            },
            "running-machine": {
              "type": "string"
            },
            "pid": {
              "type": "integer"
            },
            "uptime": {
              "type": "integer"
            },
            "vmid": {
              "minimum": 100,
              "type": "integer",
              "maximum": 999999999
            },
            "maxmem": {
              "type": "integer"
            },
            "running-qemu": {
              "type": "string"
            },
            "maxdisk": {
              "type": "integer"
            },
            "lock": {
              "type": "string"
            },
            "netout": {
              "type": "integer"
            }
          }
        }
      },
      "ClusterConfigJoin": {
        "type": "object",
        "properties": {
          "nodelist": {
            "type": "array",
            "items": {
              "additionalProperties": 1,
              "properties": {
                "name": {
                  "description": "The cluster node name.",
                  "format": "pve-node",
                  "type": "string"
                },
                "nodeid": {
                  "description": "Node id for this node.",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "pve_addr": {
                  "format": "ip",
                  "type": "string"
                },
                "pve_fp": {
                  "description": "Certificate SHA 256 fingerprint.",
                  "pattern": "([A-Fa-f0-9]{2}:){31}[A-Fa-f0-9]{2}",
                  "type": "string"
                },
                "quorum_votes": {
                  "minimum": 0,
                  "type": "integer"
                },
                "ring0_addr": {
                  "description": "Address and priority information of a single corosync link. (up to 8 links supported; link0..link7)",
                  "format": {
                    "address": {
                      "default_key": 1,
                      "description": "Hostname (or IP) of this corosync link address.",
                      "format": "address",
                      "format_description": "IP",
                      "type": "string"
                    },
                    "priority": {
                      "default": 0,
                      "description": "The priority for the link when knet is used in 'passive' mode (default). Lower value means higher priority. Only valid for cluster create, ignored on node add.",
                      "maximum": 255,
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    }
                  },
                  "optional": 1,
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "totem": {
            "type": "object"
          },
          "config_digest": {
            "type": "string"
          },
          "preferred_node": {
            "type": "string"
          }
        }
      },
      "POST-NodesLxcVncproxy-RB": {
        "type": "object",
        "properties": {
          "websocket": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "width": {
            "minimum": 16,
            "type": "integer",
            "maximum": 4096
          },
          "height": {
            "minimum": 16,
            "type": "integer",
            "maximum": 2160
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "ClusterMetricsServer": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "port": {
              "type": "integer"
            },
            "server": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "disable": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "id": {
              "type": "string"
            }
          }
        }
      },
      "NodesQemuPending": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "pending": {
              "type": "string"
            },
            "value": {
              "type": "string"
            },
            "key": {
              "type": "string"
            },
            "delete": {
              "type": "integer",
              "maximum": 2
            }
          }
        }
      },
      "POST-ClusterFirewallIpset-RB": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "name": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 64,
            "type": "string"
          },
          "nomatch": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "cidr": {
            "type": "string"
          }
        }
      },
      "GET-NodesQemuFirewallRefs-RB": {
        "type": "object",
        "properties": {
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "type": {
            "enum": [
              "alias",
              "ipset"
            ],
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "AccessUsersToken-POST": {
        "type": "object",
        "properties": {
          "full-tokenid": {
            "type": "string"
          },
          "info": {
            "type": "object",
            "properties": {
              "comment": {
                "optional": 1,
                "type": "string"
              },
              "expire": {
                "default": "same as user",
                "description": "API token expiration date (seconds since epoch). '0' means no expiration date.",
                "minimum": 0,
                "optional": 1,
                "type": "integer"
              },
              "privsep": {
                "default": 1,
                "description": "Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.",
                "optional": 1,
                "type": "boolean"
              }
            }
          },
          "value": {
            "type": "string"
          }
        }
      },
      "NodesQemuSnapshot-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "NodesLxcConfig": {
        "type": "object",
        "properties": {
          "startup": {
            "type": "string"
          },
          "lxc": {
            "type": "array",
            "items": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "tags": {
            "type": "string"
          },
          "swap": {
            "type": "integer"
          },
          "nameserver": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "ostype": {
            "enum": [
              "debian",
              "devuan",
              "ubuntu",
              "centos",
              "fedora",
              "opensuse",
              "archlinux",
              "alpine",
              "gentoo",
              "nixos",
              "unmanaged"
            ],
            "type": "string"
          },
          "debug": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "unused[n]": {
            "type": "string"
          },
          "cpulimit": {
            "type": "number",
            "maximum": 8192
          },
          "tty": {
            "type": "integer",
            "maximum": 6
          },
          "cmode": {
            "enum": [
              "shell",
              "console",
              "tty"
            ],
            "type": "string"
          },
          "template": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "hookscript": {
            "type": "string"
          },
          "onboot": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "net[n]": {
            "type": "string"
          },
          "lock": {
            "enum": [
              "backup",
              "create",
              "destroyed",
              "disk",
              "fstrim",
              "migrate",
              "mounted",
              "rollback",
              "snapshot",
              "snapshot-delete"
            ],
            "type": "string"
          },
          "mp[n]": {
            "type": "string"
          },
          "searchdomain": {
            "type": "string"
          },
          "hostname": {
            "type": "string",
            "maxLength": 255
          },
          "arch": {
            "enum": [
              "amd64",
              "i386",
              "arm64",
              "armhf",
              "riscv32",
              "riscv64"
            ],
            "type": "string"
          },
          "description": {
            "type": "string",
            "maxLength": 8192
          },
          "cores": {
            "minimum": 1,
            "type": "integer",
            "maximum": 8192
          },
          "memory": {
            "type": "integer",
            "minimum": 16
          },
          "digest": {
            "type": "string"
          },
          "features": {
            "type": "string"
          },
          "unprivileged": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "console": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "dev[n]": {
            "type": "string"
          },
          "rootfs": {
            "type": "string"
          },
          "protection": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "cpuunits": {
            "type": "integer",
            "maximum": 500000
          }
        }
      },
      "NodesHosts": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "ClusterConfigApiversion": {
        "type": "integer",
        "desciption": null
      },
      "NodesLxcFirewall": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "POST-NodesCephPool-RB": {
        "type": "object",
        "properties": {
          "erasure-coding": {
            "type": "string"
          },
          "application": {
            "enum": [
              "rbd",
              "cephfs",
              "rgw"
            ],
            "title": "Application",
            "type": "string"
          },
          "pg_num": {
            "title": "PG Num",
            "type": "integer",
            "minimum": 1,
            "maximum": 32768
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "target_size_ratio": {
            "type": "number",
            "title": "PG Autoscale Target Ratio"
          },
          "node": {
            "type": "string"
          },
          "target_size": {
            "pattern": "^(\\d+(\\.\\d+)?)([KMGT])?$",
            "title": "PG Autoscale Target Size",
            "type": "string"
          },
          "add_storages": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "min_size": {
            "title": "Min Size",
            "type": "integer",
            "minimum": 1,
            "maximum": 7
          },
          "pg_num_min": {
            "title": "min. PG Num",
            "type": "integer",
            "maximum": 32768
          },
          "crush_rule": {
            "type": "string",
            "title": "Crush Rule Name"
          },
          "size": {
            "title": "Size",
            "type": "integer",
            "minimum": 1,
            "maximum": 7
          },
          "pg_autoscale_mode": {
            "enum": [
              "on",
              "off",
              "warn"
            ],
            "title": "PG Autoscale Mode",
            "type": "string"
          }
        }
      },
      "DELETE-NodesCephPool-RB": {
        "type": "object",
        "properties": {
          "force": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "remove_storages": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "remove_ecprofile": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesCephPool": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "bytes_used": {
              "type": "integer",
              "title": "Used"
            },
            "type": {
              "enum": [
                "replicated",
                "erasure",
                "unknown"
              ],
              "title": "Type",
              "type": "string"
            },
            "pg_num": {
              "type": "integer",
              "title": "PG Num"
            },
            "size": {
              "type": "integer",
              "title": "Size"
            },
            "target_size": {
              "type": "integer",
              "title": "PG Autoscale Target Size"
            },
            "pg_num_final": {
              "type": "integer",
              "title": "Optimal PG Num"
            },
            "pg_num_min": {
              "type": "integer",
              "title": "min. PG Num"
            },
            "target_size_ratio": {
              "type": "number",
              "title": "PG Autoscale Target Ratio"
            },
            "pg_autoscale_mode": {
              "type": "string",
              "title": "PG Autoscale Mode"
            },
            "min_size": {
              "type": "integer",
              "title": "Min Size"
            },
            "autoscale_status": {
              "type": "object",
              "title": "Autoscale Status"
            },
            "crush_rule": {
              "type": "integer",
              "title": "Crush Rule"
            },
            "pool_name": {
              "type": "string",
              "title": "Name"
            },
            "crush_rule_name": {
              "type": "string",
              "title": "Crush Rule Name"
            },
            "application_metadata": {
              "type": "object",
              "title": "Associated Applications"
            },
            "percent_used": {
              "type": "number",
              "title": "%-Used"
            },
            "pool": {
              "type": "integer",
              "title": "ID"
            }
          }
        }
      },
      "ClusterBackupinfoNotbackedup": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "vmid": {
              "type": "integer"
            },
            "type": {
              "enum": [
                "qemu",
                "lxc"
              ],
              "type": "string"
            }
          }
        }
      },
      "PUT-NodesNetwork-RB": {
        "type": "object",
        "properties": {
          "ovs_bridge": {
            "type": "string"
          },
          "bond-primary": {
            "type": "string"
          },
          "comments": {
            "type": "string"
          },
          "ovs_bonds": {
            "type": "string"
          },
          "ovs_tag": {
            "minimum": 1,
            "type": "integer",
            "maximum": 4094
          },
          "gateway": {
            "type": "string"
          },
          "ovs_ports": {
            "type": "string"
          },
          "vlan-raw-device": {
            "type": "string"
          },
          "bridge_vlan_aware": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "netmask6": {
            "type": "integer",
            "maximum": 128
          },
          "gateway6": {
            "type": "string"
          },
          "bridge_vids": {
            "type": "string"
          },
          "delete": {
            "type": "string"
          },
          "netmask": {
            "type": "string"
          },
          "bond_mode": {
            "enum": [
              "balance-rr",
              "active-backup",
              "balance-xor",
              "broadcast",
              "802.3ad",
              "balance-tlb",
              "balance-alb",
              "balance-slb",
              "lacp-balance-slb",
              "lacp-balance-tcp"
            ],
            "type": "string"
          },
          "bond_xmit_hash_policy": {
            "enum": [
              "layer2",
              "layer2+3",
              "layer3+4"
            ],
            "type": "string"
          },
          "slaves": {
            "type": "string"
          },
          "bridge_ports": {
            "type": "string"
          },
          "address6": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "autostart": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "comments6": {
            "type": "string"
          },
          "iface": {
            "minLength": 2,
            "maxLength": 20,
            "type": "string"
          },
          "vlan-id": {
            "minimum": 1,
            "type": "integer",
            "maximum": 4094
          },
          "cidr6": {
            "type": "string"
          },
          "ovs_options": {
            "type": "string",
            "maxLength": 1024
          },
          "cidr": {
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "mtu": {
            "minimum": 1280,
            "type": "integer",
            "maximum": 65520
          },
          "type": {
            "enum": [
              "bridge",
              "bond",
              "eth",
              "alias",
              "vlan",
              "OVSBridge",
              "OVSBond",
              "OVSPort",
              "OVSIntPort",
              "unknown"
            ],
            "type": "string"
          }
        }
      },
      "ClusterSdnZones": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "dns": {
              "type": "string"
            },
            "ipam": {
              "type": "string"
            },
            "dhcp": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "dnszone": {
              "type": "string"
            },
            "nodes": {
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "reversedns": {
              "type": "string"
            },
            "pending": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "mtu": {
              "type": "integer"
            },
            "zone": {
              "type": "string"
            }
          }
        }
      },
      "POST-Pools-RB": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "poolid": {
            "type": "string"
          }
        }
      },
      "POST-ClusterNotificationsMatchers-RB": {
        "type": "object",
        "properties": {
          "invert-match": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "mode": {
            "enum": [
              "all",
              "any"
            ],
            "type": "string"
          },
          "match-severity": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "target": {
            "type": "array",
            "items": {
              "format": "pve-configid",
              "type": "string"
            }
          },
          "match-calendar": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "comment": {
            "type": "string"
          },
          "match-field": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "disable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "POST-NodesQemuVncproxy-RB": {
        "type": "object",
        "properties": {
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "generate-password": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "websocket": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "POST-ClusterNotificationsEndpointsGotify-RB": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "server": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "disable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "DELETE-NodesLxcFirewallAliases-RB": {
        "type": "object",
        "properties": {
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "name": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 64,
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "GET-NodesDisksSmart-RB": {
        "type": "object",
        "properties": {
          "disk": {
            "type": "string",
            "pattern": "^/dev/[a-zA-Z0-9\\/]+$"
          },
          "healthonly": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "ClusterFirewallRules-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "pos": {
              "type": "integer"
            }
          }
        }
      },
      "NodesFirewallLog": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "t": {
              "type": "string"
            },
            "n": {
              "type": "integer"
            }
          }
        }
      },
      "POST-ClusterSdnVnetsFirewallRules-RB": {
        "type": "object",
        "properties": {
          "pos": {
            "type": "integer"
          },
          "type": {
            "enum": [
              "in",
              "out",
              "forward",
              "group"
            ],
            "type": "string"
          },
          "dest": {
            "type": "string",
            "maxLength": 512
          },
          "source": {
            "type": "string",
            "maxLength": 512
          },
          "dport": {
            "type": "string"
          },
          "enable": {
            "type": "integer"
          },
          "action": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 20,
            "type": "string"
          },
          "macro": {
            "type": "string",
            "maxLength": 128
          },
          "iface": {
            "minLength": 2,
            "maxLength": 20,
            "type": "string"
          },
          "log": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "sport": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "vnet": {
            "type": "string"
          },
          "proto": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "icmp-type": {
            "type": "string"
          }
        }
      },
      "GET-ClusterConfigJoin-RB": {
        "type": "object",
        "properties": {
          "node": {
            "type": "string"
          }
        }
      },
      "GET-AccessPermissions-RB": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "userid": {
            "type": "string",
            "pattern": "(?^:^(?^:[^\\s:/]+)\\@(?^:[A-Za-z][A-Za-z0-9\\.\\-_]+)(?:!(?^:[A-Za-z][A-Za-z0-9\\.\\-_]+))?$)"
          }
        }
      },
      "ClusterConfigNodes-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "node": {
              "type": "string"
            }
          }
        }
      },
      "Storage-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "storage": {
              "type": "string"
            }
          }
        }
      },
      "PUT-NodesQemuFirewallAliases-RB": {
        "type": "object",
        "properties": {
          "cidr": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "node": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "rename": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 64,
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "name": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 64,
            "type": "string"
          }
        }
      },
      "POST-NodesLxcClone-RB": {
        "type": "object",
        "properties": {
          "target": {
            "type": "string"
          },
          "full": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "snapname": {
            "type": "string",
            "maxLength": 40
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "bwlimit": {
            "type": "number",
            "minimum": "0"
          },
          "newid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          },
          "storage": {
            "type": "string"
          },
          "hostname": {
            "type": "string"
          },
          "pool": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "GET-ClusterAcmeMeta-RB": {
        "type": "object",
        "properties": {
          "directory": {
            "type": "string",
            "pattern": "^https?://.*"
          }
        }
      },
      "POST-NodesDisksLvm-RB": {
        "type": "object",
        "properties": {
          "add_storage": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "device": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "POST-ClusterSdnVnetsIps-RB": {
        "type": "object",
        "properties": {
          "mac": {
            "type": "string"
          },
          "zone": {
            "type": "string"
          },
          "vnet": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          }
        }
      },
      "GET-NodesQemuMigrate-RB": {
        "type": "object",
        "properties": {
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "target": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesFirewallOptions": {
        "type": "object",
        "properties": {
          "tcp_flags_log_level": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "enable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "nosmurfs": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "nf_conntrack_max": {
            "type": "integer",
            "minimum": 32768
          },
          "protection_synflood": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "log_nf_conntrack": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "log_level_out": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "log_level_in": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "protection_synflood_burst": {
            "type": "integer"
          },
          "nftables": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "protection_synflood_rate": {
            "type": "integer"
          },
          "tcpflags": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "log_level_forward": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "nf_conntrack_allow_invalid": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "nf_conntrack_tcp_timeout_syn_recv": {
            "minimum": 30,
            "type": "integer",
            "maximum": 60
          },
          "smurf_log_level": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "ndp": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "nf_conntrack_helpers": {
            "type": "string"
          },
          "nf_conntrack_tcp_timeout_established": {
            "type": "integer",
            "minimum": 7875
          }
        }
      },
      "ClusterNotifications": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "NodesQemuFeature": {
        "type": "object",
        "properties": {
          "hasFeature": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "nodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GET-NodesQemuRrd-RB": {
        "type": "object",
        "properties": {
          "timeframe": {
            "enum": [
              "hour",
              "day",
              "week",
              "month",
              "year"
            ],
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "ds": {
            "type": "string"
          },
          "cf": {
            "enum": [
              "AVERAGE",
              "MAX"
            ],
            "type": "string"
          }
        }
      },
      "NodesVersion": {
        "type": "object",
        "properties": {
          "release": {
            "type": "string"
          },
          "repoid": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "ClusterHaGroups": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "group": {
              "type": "string"
            }
          }
        }
      },
      "NodesCeph": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "NodesQemuFirewallAliases": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "comment": {
              "type": "string"
            },
            "digest": {
              "type": "string",
              "maxLength": 64
            },
            "name": {
              "type": "string"
            },
            "cidr": {
              "type": "string"
            }
          }
        }
      },
      "ClusterBackupIncludedvolumes": {
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "properties": {
                "children": {
                  "description": "The volumes of the guest with the information if they will be included in backups.",
                  "items": {
                    "properties": {
                      "id": {
                        "description": "Configuration key of the volume.",
                        "type": "string"
                      },
                      "included": {
                        "description": "Whether the volume is included in the backup or not.",
                        "type": "boolean"
                      },
                      "name": {
                        "description": "Name of the volume.",
                        "type": "string"
                      },
                      "reason": {
                        "description": "The reason why the volume is included (or excluded).",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "optional": 1,
                  "type": "array"
                },
                "id": {
                  "description": "VMID of the guest.",
                  "type": "integer"
                },
                "name": {
                  "description": "Name of the guest",
                  "optional": 1,
                  "type": "string"
                },
                "type": {
                  "description": "Type of the guest, VM, CT or unknown for removed but not purged guests.",
                  "enum": [
                    "qemu",
                    "lxc",
                    "unknown"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        }
      },
      "GET-ClusterMetricsExport-RB": {
        "type": "object",
        "properties": {
          "history": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "start-time": {
            "type": "integer"
          },
          "local-only": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "NodesTasksStatus": {
        "type": "object",
        "properties": {
          "pid": {
            "type": "integer"
          },
          "exitstatus": {
            "type": "string"
          },
          "pstart": {
            "type": "integer"
          },
          "user": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "starttime": {
            "type": "integer"
          },
          "upid": {
            "type": "string"
          },
          "status": {
            "enum": [
              "running",
              "stopped"
            ],
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "NodesDisksSmart": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "health": {
            "type": "string"
          },
          "attributes": {
            "type": "array",
            "items": null
          },
          "type": {
            "type": "string"
          }
        }
      },
      "GET-NodesCephPoolStatus-RB": {
        "type": "object",
        "properties": {
          "verbose": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesScanNfs": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "options": {
              "type": "string"
            },
            "path": {
              "type": "string"
            }
          }
        }
      },
      "POST-NodesSubscription-RB": {
        "type": "object",
        "properties": {
          "node": {
            "type": "string"
          },
          "force": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "PUT-NodesQemuUnlink-RB": {
        "type": "object",
        "properties": {
          "force": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "idlist": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "AccessDomains": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "comment": {
              "type": "string"
            },
            "realm": {
              "type": "string"
            },
            "tfa": {
              "enum": [
                "yubico",
                "oath"
              ],
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          }
        }
      },
      "NodesScanZfs": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "pool": {
              "type": "string"
            }
          }
        }
      },
      "PUT-ClusterAcmePlugins-RB": {
        "type": "object",
        "properties": {
          "api": {
            "enum": [
              "1984hosting",
              "acmedns",
              "acmeproxy",
              "active24",
              "ad",
              "ali",
              "anx",
              "artfiles",
              "arvan",
              "aurora",
              "autodns",
              "aws",
              "azion",
              "azure",
              "bookmyname",
              "bunny",
              "cf",
              "clouddns",
              "cloudns",
              "cn",
              "conoha",
              "constellix",
              "cpanel",
              "curanet",
              "cyon",
              "da",
              "ddnss",
              "desec",
              "df",
              "dgon",
              "dnsexit",
              "dnshome",
              "dnsimple",
              "dnsservices",
              "do",
              "doapi",
              "domeneshop",
              "dp",
              "dpi",
              "dreamhost",
              "duckdns",
              "durabledns",
              "dyn",
              "dynu",
              "dynv6",
              "easydns",
              "edgedns",
              "euserv",
              "exoscale",
              "fornex",
              "freedns",
              "gandi_livedns",
              "gcloud",
              "gcore",
              "gd",
              "geoscaling",
              "googledomains",
              "he",
              "hetzner",
              "hexonet",
              "hostingde",
              "huaweicloud",
              "infoblox",
              "infomaniak",
              "internetbs",
              "inwx",
              "ionos",
              "ipv64",
              "ispconfig",
              "jd",
              "joker",
              "kappernet",
              "kas",
              "kinghost",
              "knot",
              "la",
              "leaseweb",
              "lexicon",
              "linode",
              "linode_v4",
              "loopia",
              "lua",
              "maradns",
              "me",
              "miab",
              "misaka",
              "myapi",
              "mydevil",
              "mydnsjp",
              "mythic_beasts",
              "namecheap",
              "namecom",
              "namesilo",
              "nanelo",
              "nederhost",
              "neodigit",
              "netcup",
              "netlify",
              "nic",
              "njalla",
              "nm",
              "nsd",
              "nsone",
              "nsupdate",
              "nw",
              "oci",
              "one",
              "online",
              "openprovider",
              "openstack",
              "opnsense",
              "ovh",
              "pdns",
              "pleskxml",
              "pointhq",
              "porkbun",
              "rackcorp",
              "rackspace",
              "rage4",
              "rcode0",
              "regru",
              "scaleway",
              "schlundtech",
              "selectel",
              "selfhost",
              "servercow",
              "simply",
              "tele3",
              "tencent",
              "transip",
              "udr",
              "ultra",
              "unoeuro",
              "variomedia",
              "veesp",
              "vercel",
              "vscale",
              "vultr",
              "websupport",
              "world4you",
              "yandex",
              "yc",
              "zilore",
              "zone",
              "zonomi"
            ],
            "type": "string"
          },
          "validation-delay": {
            "type": "integer",
            "maximum": 172800
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "data": {
            "type": "string"
          },
          "nodes": {
            "type": "string"
          },
          "delete": {
            "type": "string",
            "maxLength": 4096
          },
          "disable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "GET-NodesReplicationLog-RB": {
        "type": "object",
        "properties": {
          "start": {
            "type": "integer"
          },
          "node": {
            "type": "string"
          },
          "limit": {
            "type": "integer"
          },
          "id": {
            "type": "string",
            "pattern": "[1-9][0-9]{2,8}-\\d{1,9}"
          }
        }
      },
      "NodesCapabilitiesQemuCpu": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "custom": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "vendor": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          }
        }
      },
      "POST-NodesQemuFirewallIpset-RB": {
        "type": "object",
        "properties": {
          "cidr": {
            "type": "string"
          },
          "nomatch": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "comment": {
            "type": "string"
          },
          "name": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 64,
            "type": "string"
          }
        }
      },
      "GET-NodesQemuCloudinitDump-RB": {
        "type": "object",
        "properties": {
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "type": {
            "enum": [
              "user",
              "network",
              "meta"
            ],
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesDns": {
        "type": "object",
        "properties": {
          "search": {
            "type": "string"
          },
          "dns3": {
            "type": "string"
          },
          "dns1": {
            "type": "string"
          },
          "dns2": {
            "type": "string"
          }
        }
      },
      "PUT-ClusterFirewallIpset-RB": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "name": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 64,
            "type": "string"
          },
          "nomatch": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "cidr": {
            "type": "string"
          }
        }
      },
      "AccessGroups-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "comment": {
              "type": "string"
            },
            "groupid": {
              "type": "string"
            },
            "users": {
              "type": "string"
            }
          }
        }
      },
      "ClusterMappingPci": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "map": {
              "type": "array",
              "items": {
                "description": "A mapping for a node.",
                "type": "string"
              }
            },
            "checks": {
              "type": "array",
              "items": {
                "properties": {
                  "message": {
                    "description": "The message of the error",
                    "type": "string"
                  },
                  "severity": {
                    "description": "The severity of the error",
                    "enum": [
                      "warning",
                      "error"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        }
      },
      "GET-NodesTasksLog-RB": {
        "type": "object",
        "properties": {
          "start": {
            "type": "integer"
          },
          "upid": {
            "type": "string"
          },
          "download": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "POST-NodesTermproxy-RB": {
        "type": "object",
        "properties": {
          "cmd-opts": {
            "type": "string"
          },
          "cmd": {
            "enum": [
              "upgrade",
              "ceph_install",
              "login"
            ],
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "POST-NodesQemuAgentExec-RB": {
        "type": "object",
        "properties": {
          "input-data": {
            "type": "string",
            "maxLength": 65536
          },
          "command": {
            "type": "array",
            "items": {
              "description": "A single part of the program + arguments.",
              "format": "string"
            }
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "ClusterFirewallGroups-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "comment": {
              "type": "string"
            },
            "digest": {
              "type": "string",
              "maxLength": 64
            },
            "group": {
              "minLength": 2,
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 18,
              "type": "string"
            }
          }
        }
      },
      "NodesLxcFeature": {
        "type": "object",
        "properties": {
          "hasFeature": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "ClusterFirewallIpset-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "comment": {
              "type": "string"
            },
            "digest": {
              "type": "string",
              "maxLength": 64
            },
            "nomatch": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "cidr": {
              "type": "string"
            }
          }
        }
      },
      "POST-NodesQemuSnapshot-RB": {
        "type": "object",
        "properties": {
          "snapname": {
            "type": "string",
            "maxLength": 40
          },
          "description": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "vmstate": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "PUT-NodesStorageContent-RB": {
        "type": "object",
        "properties": {
          "notes": {
            "type": "string"
          },
          "protected": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "volume": {
            "type": "string"
          },
          "storage": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "PUT-ClusterMappingUsb-RB": {
        "type": "object",
        "properties": {
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "description": {
            "type": "string",
            "maxLength": 4096
          },
          "delete": {
            "type": "string",
            "maxLength": 4096
          },
          "map": {
            "type": "array",
            "items": {
              "format": {
                "description": {
                  "description": "Description of the node specific device.",
                  "maxLength": 4096,
                  "optional": 1,
                  "type": "string"
                },
                "id": {
                  "description": "The vendor and device ID that is expected. If a USB path is given, it is only used for detecting hardware changes",
                  "pattern": "(?^:^[0-9A-Fa-f]{4}:[0-9A-Fa-f]{4}$)",
                  "type": "string"
                },
                "node": {
                  "description": "The cluster node name.",
                  "format": "pve-node",
                  "type": "string"
                },
                "path": {
                  "description": "The path to the usb device.",
                  "optional": 1,
                  "pattern": "(?^:^(\\d+)\\-(\\d+(\\.\\d+)*)$)",
                  "type": "string"
                }
              },
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          }
        }
      },
      "ClusterNotificationsEndpointsSendmail-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "author": {
              "type": "string"
            },
            "mailto-user": {
              "type": "array",
              "items": {
                "format": "pve-userid",
                "type": "string"
              }
            },
            "from-address": {
              "type": "string"
            },
            "origin": {
              "enum": [
                "user-created",
                "builtin",
                "modified-builtin"
              ],
              "type": "string"
            },
            "mailto": {
              "type": "array",
              "items": {
                "format": "email-or-username",
                "type": "string"
              }
            },
            "comment": {
              "type": "string"
            },
            "disable": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "name": {
              "type": "string"
            }
          }
        }
      },
      "GET-ClusterSdnVnets-RB": {
        "type": "object",
        "properties": {
          "pending": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "running": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "vnet": {
            "type": "string"
          }
        }
      },
      "NodesCephPool-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "PUT-NodesQemuSendkey-RB": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "skiplock": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "ClusterNotificationsEndpointsWebhook": {
        "type": "object",
        "properties": {
          "secret": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "header": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "method": {
            "enum": [
              "post",
              "put",
              "get"
            ],
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "disable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Pools": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "members": {
            "type": "array",
            "items": {
              "additionalProperties": 1,
              "properties": {
                "id": {
                  "type": "string"
                },
                "node": {
                  "type": "string"
                },
                "storage": {
                  "optional": 1,
                  "type": "string"
                },
                "type": {
                  "enum": [
                    "qemu",
                    "lxc",
                    "openvz",
                    "storage"
                  ],
                  "type": "string"
                },
                "vmid": {
                  "optional": 1,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        }
      },
      "NodesNetwork-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "POST-NodesCephRestart-RB": {
        "type": "object",
        "properties": {
          "service": {
            "type": "string",
            "pattern": "(mon|mds|osd|mgr)(\\.[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?)?"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesQemuFirewallRefs": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "comment": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "scope": {
              "type": "string"
            },
            "type": {
              "enum": [
                "alias",
                "ipset"
              ],
              "type": "string"
            },
            "ref": {
              "type": "string"
            }
          }
        }
      },
      "NodesReplication-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "NodesScanPbs": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "comment": {
              "type": "string"
            },
            "store": {
              "type": "string"
            }
          }
        }
      },
      "Storage-PUT": {
        "type": "object",
        "properties": {
          "storage": {
            "type": "string"
          },
          "config": {
            "properties": null,
            "type": "object"
          },
          "type": {
            "enum": [
              "btrfs",
              "cephfs",
              "cifs",
              "dir",
              "esxi",
              "glusterfs",
              "iscsi",
              "iscsidirect",
              "lvm",
              "lvmthin",
              "nfs",
              "pbs",
              "rbd",
              "zfs",
              "zfspool"
            ],
            "type": "string"
          }
        }
      },
      "POST-AccessTfa-RB": {
        "type": "object",
        "properties": {
          "challenge": {
            "type": "string"
          },
          "userid": {
            "type": "string",
            "maxLength": 64
          },
          "password": {
            "minLength": 5,
            "maxLength": 64,
            "type": "string"
          },
          "type": {
            "enum": [
              "totp",
              "u2f",
              "webauthn",
              "recovery",
              "yubico"
            ],
            "type": "string"
          },
          "totp": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "maxLength": 255
          }
        }
      },
      "NodesCapabilitiesQemuMachines": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "version": {
              "type": "string"
            },
            "type": {
              "enum": [
                "q35",
                "i440fx"
              ],
              "type": "string"
            },
            "id": {
              "type": "string"
            }
          }
        }
      },
      "POST-NodesDisksInitgpt-RB": {
        "type": "object",
        "properties": {
          "uuid": {
            "pattern": "[a-fA-F0-9\\-]+",
            "maxLength": 36,
            "type": "string"
          },
          "disk": {
            "type": "string",
            "pattern": "^/dev/[a-zA-Z0-9\\/]+$"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "AccessUsersToken-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "comment": {
              "type": "string"
            },
            "expire": {
              "type": "integer"
            },
            "privsep": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "tokenid": {
              "type": "string",
              "pattern": "(?^:[A-Za-z][A-Za-z0-9\\.\\-_]+)"
            }
          }
        }
      },
      "NodesCephOsd": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "ClusterAcme": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "NodesScan": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "method": {
              "type": "string"
            }
          }
        }
      },
      "GET-NodesNetwork-RB": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "bridge",
              "bond",
              "eth",
              "alias",
              "vlan",
              "OVSBridge",
              "OVSBond",
              "OVSPort",
              "OVSIntPort",
              "any_bridge",
              "any_local_bridge"
            ],
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesCephRules": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            }
          }
        }
      },
      "ClusterHaResources": {
        "type": "object",
        "properties": {
          "sid": {
            "type": "string"
          },
          "max_restart": {
            "type": "integer"
          },
          "digest": {
            "type": "string"
          },
          "state": {
            "enum": [
              "started",
              "stopped",
              "enabled",
              "disabled",
              "ignored"
            ],
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "max_relocate": {
            "type": "integer"
          },
          "comment": {
            "type": "string"
          },
          "group": {
            "type": "string"
          }
        }
      },
      "NodesQemuSnapshot": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "parent": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "vmstate": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "snaptime": {
              "type": "integer"
            }
          }
        }
      },
      "NodesCertificatesAcme": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "NodesLxcRrddata": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "PUT-ClusterNotificationsEndpointsWebhook-RB": {
        "type": "object",
        "properties": {
          "secret": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "header": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "method": {
            "enum": [
              "post",
              "put",
              "get"
            ],
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "delete": {
            "type": "array",
            "items": {
              "format": "pve-configid",
              "type": "string"
            }
          },
          "disable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ClusterJobsRealmsync": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "realm": {
              "type": "string",
              "maxLength": 32
            },
            "enabled": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "scope": {
              "enum": [
                "users",
                "groups",
                "both"
              ],
              "type": "string"
            },
            "remove-vanished": {
              "type": "string",
              "pattern": "(?:(?:(?:acl|properties|entry);)*(?:acl|properties|entry))|none"
            },
            "schedule": {
              "type": "string"
            },
            "next-run": {
              "type": "integer"
            },
            "last-run": {
              "type": "integer"
            },
            "comment": {
              "type": "string"
            },
            "id": {
              "type": "string"
            }
          }
        }
      },
      "Storage": {
        "type": "object",
        "properties": {
          "storage": {
            "type": "string"
          },
          "config": {
            "properties": null,
            "type": "object"
          },
          "type": {
            "enum": [
              "btrfs",
              "cephfs",
              "cifs",
              "dir",
              "esxi",
              "glusterfs",
              "iscsi",
              "iscsidirect",
              "lvm",
              "lvmthin",
              "nfs",
              "pbs",
              "rbd",
              "zfs",
              "zfspool"
            ],
            "type": "string"
          }
        }
      },
      "PUT-AccessAcl-RB": {
        "type": "object",
        "properties": {
          "roles": {
            "type": "string"
          },
          "users": {
            "type": "string"
          },
          "groups": {
            "type": "string"
          },
          "propagate": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "delete": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "tokens": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        }
      },
      "PUT-NodesCephPool-RB": {
        "type": "object",
        "properties": {
          "crush_rule": {
            "type": "string",
            "title": "Crush Rule Name"
          },
          "size": {
            "title": "Size",
            "type": "integer",
            "minimum": 1,
            "maximum": 7
          },
          "pg_num": {
            "title": "PG Num",
            "type": "integer",
            "minimum": 1,
            "maximum": 32768
          },
          "pg_num_min": {
            "title": "min. PG Num",
            "type": "integer",
            "maximum": 32768
          },
          "application": {
            "enum": [
              "rbd",
              "cephfs",
              "rgw"
            ],
            "title": "Application",
            "type": "string"
          },
          "target_size_ratio": {
            "type": "number",
            "title": "PG Autoscale Target Ratio"
          },
          "target_size": {
            "pattern": "^(\\d+(\\.\\d+)?)([KMGT])?$",
            "title": "PG Autoscale Target Size",
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "pg_autoscale_mode": {
            "enum": [
              "on",
              "off",
              "warn"
            ],
            "title": "PG Autoscale Mode",
            "type": "string"
          },
          "min_size": {
            "title": "Min Size",
            "type": "integer",
            "minimum": 1,
            "maximum": 7
          },
          "name": {
            "type": "string",
            "title": "Name"
          }
        }
      },
      "NodesCertificates": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "POST-NodesLxcSpiceproxy-RB": {
        "type": "object",
        "properties": {
          "proxy": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "GET-NodesStorageRrd-RB": {
        "type": "object",
        "properties": {
          "timeframe": {
            "enum": [
              "hour",
              "day",
              "week",
              "month",
              "year"
            ],
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "storage": {
            "type": "string"
          },
          "ds": {
            "type": "string"
          },
          "cf": {
            "enum": [
              "AVERAGE",
              "MAX"
            ],
            "type": "string"
          }
        }
      },
      "ClusterFirewallRules": {
        "type": "object",
        "properties": {
          "pos": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "ipversion": {
            "type": "integer"
          },
          "dest": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "enable": {
            "type": "integer"
          },
          "action": {
            "type": "string"
          },
          "macro": {
            "type": "string"
          },
          "iface": {
            "type": "string"
          },
          "dport": {
            "type": "string"
          },
          "log": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "sport": {
            "type": "string"
          },
          "proto": {
            "type": "string"
          },
          "icmp-type": {
            "type": "string"
          }
        }
      },
      "NodesDisksDirectory": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "options": {
              "type": "string"
            },
            "device": {
              "type": "string"
            },
            "unitfile": {
              "type": "string"
            },
            "path": {
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          }
        }
      },
      "POST-ClusterConfigNodes-RB": {
        "type": "object",
        "properties": {
          "votes": {
            "type": "integer"
          },
          "new_node_ip": {
            "type": "string"
          },
          "link[n]": {
            "type": "string"
          },
          "force": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          },
          "apiversion": {
            "type": "integer"
          },
          "nodeid": {
            "type": "integer",
            "minimum": 1
          }
        }
      },
      "NodesLxcInterfaces": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "inet": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "inet6": {
              "type": "string"
            },
            "hwaddr": {
              "type": "string"
            }
          }
        }
      },
      "GET-NodesScanLvmthin-RB": {
        "type": "object",
        "properties": {
          "node": {
            "type": "string"
          },
          "vg": {
            "pattern": "[a-zA-Z0-9\\.\\+\\_][a-zA-Z0-9\\.\\+\\_\\-]+",
            "maxLength": 100,
            "type": "string"
          }
        }
      },
      "NodesQemuAgent": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "PUT-NodesQemuFirewallIpset-RB": {
        "type": "object",
        "properties": {
          "cidr": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "nomatch": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "comment": {
            "type": "string"
          },
          "name": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 64,
            "type": "string"
          }
        }
      },
      "NodesCephOsdMetadata": {
        "type": "object",
        "properties": {
          "osd": {
            "type": "object",
            "properties": {
              "back_addr": {
                "description": "Address and port used to talk to other OSDs.",
                "type": "string"
              },
              "front_addr": {
                "description": "Address and port used to talk to clients and monitors.",
                "type": "string"
              },
              "hb_back_addr": {
                "description": "Heartbeat address and port for other OSDs.",
                "type": "string"
              },
              "hb_front_addr": {
                "description": "Heartbeat address and port for clients and monitors.",
                "type": "string"
              },
              "hostname": {
                "description": "Name of the host containing the OSD.",
                "type": "string"
              },
              "id": {
                "description": "ID of the OSD.",
                "type": "integer"
              },
              "mem_usage": {
                "description": "Memory usage of the OSD service.",
                "type": "integer"
              },
              "osd_data": {
                "description": "Path to the OSD's data directory.",
                "type": "string"
              },
              "osd_objectstore": {
                "description": "The type of object store used.",
                "type": "string"
              },
              "pid": {
                "description": "OSD process ID.",
                "type": "integer"
              },
              "version": {
                "description": "Ceph version of the OSD service.",
                "type": "string"
              }
            }
          },
          "devices": {
            "type": "array",
            "items": {
              "properties": {
                "dev_node": {
                  "description": "Device node",
                  "type": "string"
                },
                "device": {
                  "description": "Kind of OSD device",
                  "enum": [
                    "block",
                    "db",
                    "wal"
                  ],
                  "type": "string"
                },
                "devices": {
                  "description": "Physical disks used",
                  "type": "string"
                },
                "size": {
                  "description": "Size in bytes",
                  "type": "integer"
                },
                "support_discard": {
                  "description": "Discard support of the physical device",
                  "type": "boolean"
                },
                "type": {
                  "description": "Type of device. For example, hdd or ssd",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        }
      },
      "NodesLxcSnapshot": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "parent": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "snaptime": {
              "type": "integer"
            }
          }
        }
      },
      "GET-NodesScanNfs-RB": {
        "type": "object",
        "properties": {
          "server": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "ClusterSdnDns": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "dns": {
              "type": "string"
            }
          }
        }
      },
      "PUT-NodesLxcFirewallAliases-RB": {
        "type": "object",
        "properties": {
          "cidr": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "node": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "rename": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 64,
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "name": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 64,
            "type": "string"
          }
        }
      },
      "ClusterFirewallRefs": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "comment": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "scope": {
              "type": "string"
            },
            "type": {
              "enum": [
                "alias",
                "ipset"
              ],
              "type": "string"
            },
            "ref": {
              "type": "string"
            }
          }
        }
      },
      "NodesRrd": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string"
          }
        }
      },
      "POST-ClusterJobsRealmsync-RB": {
        "type": "object",
        "properties": {
          "enabled": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "scope": {
            "enum": [
              "users",
              "groups",
              "both"
            ],
            "type": "string"
          },
          "schedule": {
            "type": "string",
            "maxLength": 128
          },
          "remove-vanished": {
            "type": "string",
            "pattern": "(?:(?:(?:acl|properties|entry);)*(?:acl|properties|entry))|none"
          },
          "enable-new": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "comment": {
            "type": "string",
            "maxLength": 512
          },
          "realm": {
            "type": "string",
            "maxLength": 32
          },
          "id": {
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "PUT-NodesLxcFirewallRules-RB": {
        "type": "object",
        "properties": {
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "pos": {
            "type": "integer"
          },
          "moveto": {
            "type": "integer"
          },
          "type": {
            "enum": [
              "in",
              "out",
              "forward",
              "group"
            ],
            "type": "string"
          },
          "dest": {
            "type": "string",
            "maxLength": 512
          },
          "source": {
            "type": "string",
            "maxLength": 512
          },
          "comment": {
            "type": "string"
          },
          "enable": {
            "type": "integer"
          },
          "macro": {
            "type": "string",
            "maxLength": 128
          },
          "node": {
            "type": "string"
          },
          "action": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 20,
            "type": "string"
          },
          "dport": {
            "type": "string"
          },
          "log": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "sport": {
            "type": "string"
          },
          "iface": {
            "minLength": 2,
            "maxLength": 20,
            "type": "string"
          },
          "delete": {
            "type": "string"
          },
          "proto": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "icmp-type": {
            "type": "string"
          }
        }
      },
      "GET-AccessUsersTfa-RB": {
        "type": "object",
        "properties": {
          "multiple": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "userid": {
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "PUT-ClusterSdnVnetsIps-RB": {
        "type": "object",
        "properties": {
          "mac": {
            "type": "string"
          },
          "zone": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "vnet": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          }
        }
      },
      "NodesCephMon": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "quorum": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "addr": {
              "type": "string"
            },
            "service": {
              "type": "integer"
            },
            "state": {
              "type": "string"
            },
            "ceph_version": {
              "type": "string"
            },
            "rank": {
              "type": "integer"
            },
            "ceph_version_short": {
              "type": "string"
            },
            "direxists": {
              "type": "string"
            },
            "host": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            }
          }
        }
      },
      "PUT-NodesAptRepositories-RB": {
        "type": "object",
        "properties": {
          "digest": {
            "type": "string",
            "maxLength": 80
          },
          "handle": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "ClusterLog": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "NodesStorageFilerestoreList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "filepath": {
              "type": "string"
            },
            "mtime": {
              "type": "integer"
            },
            "type": {
              "type": "string"
            },
            "leaf": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "text": {
              "type": "string"
            },
            "size": {
              "type": "integer"
            }
          }
        }
      },
      "NodesLxcStatusCurrent": {
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "stopped",
              "running"
            ],
            "type": "string"
          },
          "tags": {
            "type": "string"
          },
          "template": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "netin": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "diskread": {
            "type": "integer"
          },
          "ha": {
            "type": "object"
          },
          "diskwrite": {
            "type": "integer"
          },
          "maxswap": {
            "type": "integer"
          },
          "disk": {
            "type": "integer"
          },
          "uptime": {
            "type": "integer"
          },
          "cpus": {
            "type": "number"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "maxmem": {
            "type": "integer"
          },
          "maxdisk": {
            "type": "integer"
          },
          "lock": {
            "type": "string"
          },
          "netout": {
            "type": "integer"
          }
        }
      },
      "GET-NodesQemuFirewallLog-RB": {
        "type": "object",
        "properties": {
          "until": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "node": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "since": {
            "type": "integer"
          },
          "start": {
            "type": "integer"
          }
        }
      },
      "NodesQemuAgentExec": {
        "type": "object",
        "properties": {
          "pid": {
            "type": "integer"
          }
        }
      },
      "GET-Storage-RB": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "btrfs",
              "cephfs",
              "cifs",
              "dir",
              "esxi",
              "glusterfs",
              "iscsi",
              "iscsidirect",
              "lvm",
              "lvmthin",
              "nfs",
              "pbs",
              "rbd",
              "zfs",
              "zfspool"
            ],
            "type": "string"
          }
        }
      },
      "PUT-NodesQemuConfig-RB": {
        "type": "object",
        "properties": {
          "keyboard": {
            "enum": [
              "de",
              "de-ch",
              "da",
              "en-gb",
              "en-us",
              "es",
              "fi",
              "fr",
              "fr-be",
              "fr-ca",
              "fr-ch",
              "hu",
              "is",
              "it",
              "ja",
              "lt",
              "mk",
              "nl",
              "no",
              "pl",
              "pt",
              "pt-br",
              "sv",
              "sl",
              "tr"
            ],
            "type": "string"
          },
          "skiplock": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "net[n]": {
            "type": "string"
          },
          "delete": {
            "type": "string"
          },
          "vcpus": {
            "type": "integer",
            "minimum": 1
          },
          "cores": {
            "type": "integer",
            "minimum": 1
          },
          "ciuser": {
            "type": "string"
          },
          "startup": {
            "type": "string"
          },
          "cdrom": {
            "type": "string"
          },
          "usb[n]": {
            "type": "string"
          },
          "cicustom": {
            "type": "string"
          },
          "ciupgrade": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "cpulimit": {
            "type": "number",
            "maximum": 128
          },
          "spice_enhancements": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "freeze": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "tpmstate0": {
            "type": "string"
          },
          "ipconfig[n]": {
            "type": "string"
          },
          "args": {
            "type": "string"
          },
          "localtime": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "rng0": {
            "type": "string"
          },
          "migrate_speed": {
            "type": "integer"
          },
          "efidisk0": {
            "type": "string"
          },
          "hookscript": {
            "type": "string"
          },
          "tdf": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "lock": {
            "enum": [
              "backup",
              "clone",
              "create",
              "migrate",
              "rollback",
              "snapshot",
              "snapshot-delete",
              "suspending",
              "suspended"
            ],
            "type": "string"
          },
          "smp": {
            "type": "integer",
            "minimum": 1
          },
          "numa": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "balloon": {
            "type": "integer"
          },
          "vmstatestorage": {
            "type": "string"
          },
          "scsihw": {
            "enum": [
              "lsi",
              "lsi53c810",
              "virtio-scsi-pci",
              "virtio-scsi-single",
              "megasas",
              "pvscsi"
            ],
            "type": "string"
          },
          "shares": {
            "type": "integer",
            "maximum": 50000
          },
          "onboot": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "cpu": {
            "type": "string"
          },
          "reboot": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "cpuunits": {
            "minimum": 1,
            "type": "integer",
            "maximum": 262144
          },
          "autostart": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "description": {
            "type": "string",
            "maxLength": 8192
          },
          "cipassword": {
            "type": "string"
          },
          "hotplug": {
            "type": "string"
          },
          "force": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "citype": {
            "enum": [
              "configdrive2",
              "nocloud",
              "opennebula"
            ],
            "type": "string"
          },
          "kvm": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "memory": {
            "type": "string"
          },
          "bios": {
            "enum": [
              "seabios",
              "ovmf"
            ],
            "type": "string"
          },
          "ivshmem": {
            "type": "string"
          },
          "vga": {
            "type": "string"
          },
          "agent": {
            "type": "string"
          },
          "audio0": {
            "type": "string"
          },
          "parallel[n]": {
            "type": "string",
            "pattern": "/dev/parport\\d+|/dev/usb/lp\\d+"
          },
          "scsi[n]": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 40
          },
          "unused[n]": {
            "type": "string"
          },
          "ide[n]": {
            "type": "string"
          },
          "boot": {
            "type": "string"
          },
          "smbios1": {
            "type": "string",
            "maxLength": 512
          },
          "keephugepages": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          },
          "tablet": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "startdate": {
            "type": "string",
            "pattern": "(now|\\d{4}-\\d{1,2}-\\d{1,2}(T\\d{1,2}:\\d{1,2}:\\d{1,2})?)"
          },
          "protection": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "numa[n]": {
            "type": "string"
          },
          "template": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "sata[n]": {
            "type": "string"
          },
          "nameserver": {
            "type": "string"
          },
          "revert": {
            "type": "string"
          },
          "machine": {
            "type": "string"
          },
          "arch": {
            "enum": [
              "x86_64",
              "aarch64"
            ],
            "type": "string"
          },
          "ostype": {
            "enum": [
              "other",
              "wxp",
              "w2k",
              "w2k3",
              "w2k8",
              "wvista",
              "win7",
              "win8",
              "win10",
              "win11",
              "l24",
              "l26",
              "solaris"
            ],
            "type": "string"
          },
          "serial[n]": {
            "type": "string",
            "pattern": "(/dev/.+|socket)"
          },
          "affinity": {
            "type": "string"
          },
          "sockets": {
            "type": "integer",
            "minimum": 1
          },
          "bootdisk": {
            "type": "string",
            "pattern": "(ide|sata|scsi|virtio)\\d+"
          },
          "searchdomain": {
            "type": "string"
          },
          "tags": {
            "type": "string"
          },
          "acpi": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "virtio[n]": {
            "type": "string"
          },
          "watchdog": {
            "type": "string"
          },
          "sshkeys": {
            "type": "string"
          },
          "amd-sev": {
            "type": "string"
          },
          "hugepages": {
            "enum": [
              "any",
              "2",
              "1024"
            ],
            "type": "string"
          },
          "vmgenid": {
            "type": "string",
            "pattern": "(?:[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}|[01])"
          },
          "hostpci[n]": {
            "type": "string"
          },
          "migrate_downtime": {
            "type": "number"
          }
        }
      },
      "POST-NodesDisksZfs-RB": {
        "type": "object",
        "properties": {
          "draid-config": {
            "type": "string"
          },
          "add_storage": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "ashift": {
            "minimum": 9,
            "type": "integer",
            "maximum": 16
          },
          "devices": {
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "raidlevel": {
            "enum": [
              "single",
              "mirror",
              "raid10",
              "raidz",
              "raidz2",
              "raidz3",
              "draid",
              "draid2",
              "draid3"
            ],
            "type": "string"
          },
          "compression": {
            "enum": [
              "on",
              "off",
              "gzip",
              "lz4",
              "lzjb",
              "zle",
              "zstd"
            ],
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "NodesLxcMtunnelwebsocket": {
        "type": "object",
        "properties": {
          "socket": {
            "type": "string"
          },
          "port": {
            "type": "string"
          }
        }
      },
      "PUT-AccessGroups-RB": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "groupid": {
            "type": "string"
          }
        }
      },
      "GET-NodesAptChangelog-RB": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "POST-NodesNetwork-RB": {
        "type": "object",
        "properties": {
          "ovs_bridge": {
            "type": "string"
          },
          "bond-primary": {
            "type": "string"
          },
          "comments": {
            "type": "string"
          },
          "ovs_bonds": {
            "type": "string"
          },
          "ovs_tag": {
            "minimum": 1,
            "type": "integer",
            "maximum": 4094
          },
          "gateway": {
            "type": "string"
          },
          "ovs_ports": {
            "type": "string"
          },
          "vlan-raw-device": {
            "type": "string"
          },
          "bridge_vlan_aware": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "netmask6": {
            "type": "integer",
            "maximum": 128
          },
          "gateway6": {
            "type": "string"
          },
          "bridge_vids": {
            "type": "string"
          },
          "netmask": {
            "type": "string"
          },
          "bond_mode": {
            "enum": [
              "balance-rr",
              "active-backup",
              "balance-xor",
              "broadcast",
              "802.3ad",
              "balance-tlb",
              "balance-alb",
              "balance-slb",
              "lacp-balance-slb",
              "lacp-balance-tcp"
            ],
            "type": "string"
          },
          "bond_xmit_hash_policy": {
            "enum": [
              "layer2",
              "layer2+3",
              "layer3+4"
            ],
            "type": "string"
          },
          "slaves": {
            "type": "string"
          },
          "bridge_ports": {
            "type": "string"
          },
          "address6": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "autostart": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "comments6": {
            "type": "string"
          },
          "iface": {
            "minLength": 2,
            "maxLength": 20,
            "type": "string"
          },
          "vlan-id": {
            "minimum": 1,
            "type": "integer",
            "maximum": 4094
          },
          "cidr6": {
            "type": "string"
          },
          "ovs_options": {
            "type": "string",
            "maxLength": 1024
          },
          "cidr": {
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "mtu": {
            "minimum": 1280,
            "type": "integer",
            "maximum": 65520
          },
          "type": {
            "enum": [
              "bridge",
              "bond",
              "eth",
              "alias",
              "vlan",
              "OVSBridge",
              "OVSBond",
              "OVSPort",
              "OVSIntPort",
              "unknown"
            ],
            "type": "string"
          }
        }
      },
      "PUT-ClusterAcmeAccount-RB": {
        "type": "object",
        "properties": {
          "contact": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "NodesFirewallRules": {
        "type": "object",
        "properties": {
          "pos": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "ipversion": {
            "type": "integer"
          },
          "dest": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "enable": {
            "type": "integer"
          },
          "action": {
            "type": "string"
          },
          "macro": {
            "type": "string"
          },
          "iface": {
            "type": "string"
          },
          "dport": {
            "type": "string"
          },
          "log": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "sport": {
            "type": "string"
          },
          "proto": {
            "type": "string"
          },
          "icmp-type": {
            "type": "string"
          }
        }
      },
      "ClusterStatus": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "nodeid": {
              "type": "integer"
            },
            "type": {
              "enum": [
                "cluster",
                "node"
              ],
              "type": "string"
            },
            "local": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "level": {
              "type": "string"
            },
            "quorate": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "ip": {
              "type": "string"
            },
            "nodes": {
              "type": "integer"
            },
            "online": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "version": {
              "type": "integer"
            },
            "id": {
              "type": "string"
            }
          }
        }
      },
      "POST-ClusterMappingUsb-RB": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "maxLength": 4096
          },
          "map": {
            "type": "array",
            "items": {
              "format": {
                "description": {
                  "description": "Description of the node specific device.",
                  "maxLength": 4096,
                  "optional": 1,
                  "type": "string"
                },
                "id": {
                  "description": "The vendor and device ID that is expected. If a USB path is given, it is only used for detecting hardware changes",
                  "pattern": "(?^:^[0-9A-Fa-f]{4}:[0-9A-Fa-f]{4}$)",
                  "type": "string"
                },
                "node": {
                  "description": "The cluster node name.",
                  "format": "pve-node",
                  "type": "string"
                },
                "path": {
                  "description": "The path to the usb device.",
                  "optional": 1,
                  "pattern": "(?^:^(\\d+)\\-(\\d+(\\.\\d+)*)$)",
                  "type": "string"
                }
              },
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          }
        }
      },
      "NodesHardwarePci": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "subsystem_vendor": {
              "type": "string"
            },
            "vendor": {
              "type": "string"
            },
            "class": {
              "type": "string"
            },
            "subsystem_device": {
              "type": "string"
            },
            "subsystem_device_name": {
              "type": "string"
            },
            "device": {
              "type": "string"
            },
            "mdev": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "vendor_name": {
              "type": "string"
            },
            "subsystem_vendor_name": {
              "type": "string"
            },
            "iommugroup": {
              "type": "integer"
            },
            "device_name": {
              "type": "string"
            },
            "id": {
              "type": "string"
            }
          }
        }
      },
      "NodesLxcRrd": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string"
          }
        }
      },
      "ClusterSdnVnetsFirewall": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "POST-NodesQemuMigrate-RB": {
        "type": "object",
        "properties": {
          "force": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "target": {
            "type": "string"
          },
          "bwlimit": {
            "type": "integer",
            "minimum": "0"
          },
          "migration_type": {
            "enum": [
              "secure",
              "insecure"
            ],
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "online": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "migration_network": {
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "targetstorage": {
            "type": "string"
          },
          "with-local-disks": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "DELETE-NodesLxcFirewallIpset-RB": {
        "type": "object",
        "properties": {
          "cidr": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "name": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 64,
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "POST-ClusterFirewallAliases-RB": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "name": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 64,
            "type": "string"
          },
          "cidr": {
            "type": "string"
          }
        }
      },
      "ClusterConfigNodes": {
        "type": "object",
        "properties": {
          "corosync_conf": {
            "type": "string"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "corosync_authkey": {
            "type": "string"
          }
        }
      },
      "ClusterConfig": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "Nodes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "cpu": {
              "type": "number"
            },
            "level": {
              "type": "string"
            },
            "ssl_fingerprint": {
              "type": "string"
            },
            "node": {
              "type": "string"
            },
            "maxcpu": {
              "type": "integer"
            },
            "maxmem": {
              "type": "integer"
            },
            "uptime": {
              "type": "integer"
            },
            "status": {
              "enum": [
                "unknown",
                "online",
                "offline"
              ],
              "type": "string"
            },
            "mem": {
              "type": "integer"
            }
          }
        }
      },
      "POST-NodesLxcFirewallRules-RB": {
        "type": "object",
        "properties": {
          "pos": {
            "type": "integer"
          },
          "type": {
            "enum": [
              "in",
              "out",
              "forward",
              "group"
            ],
            "type": "string"
          },
          "dest": {
            "type": "string",
            "maxLength": 512
          },
          "source": {
            "type": "string",
            "maxLength": 512
          },
          "dport": {
            "type": "string"
          },
          "enable": {
            "type": "integer"
          },
          "action": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 20,
            "type": "string"
          },
          "macro": {
            "type": "string",
            "maxLength": 128
          },
          "node": {
            "type": "string"
          },
          "iface": {
            "minLength": 2,
            "maxLength": 20,
            "type": "string"
          },
          "log": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "sport": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "comment": {
            "type": "string"
          },
          "proto": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "icmp-type": {
            "type": "string"
          }
        }
      },
      "NodesScanCifs": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "share": {
              "type": "string"
            },
            "description": {
              "type": "string"
            }
          }
        }
      },
      "NodesDisksZfs-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "alloc": {
              "type": "integer"
            },
            "free": {
              "type": "integer"
            },
            "size": {
              "type": "integer"
            },
            "frag": {
              "type": "integer"
            },
            "health": {
              "type": "string"
            },
            "dedup": {
              "type": "number"
            },
            "name": {
              "type": "string"
            }
          }
        }
      },
      "NodesLxcFirewallRules-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "pos": {
              "type": "integer"
            }
          }
        }
      },
      "POST-ClusterNotificationsEndpointsWebhook-RB": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "header": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "secret": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "method": {
            "enum": [
              "post",
              "put",
              "get"
            ],
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "disable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "PUT-ClusterSdnVnetsSubnets-RB": {
        "type": "object",
        "properties": {
          "dhcp-range": {
            "type": "array",
            "items": {
              "format": "pve-sdn-dhcp-range",
              "type": "string"
            }
          },
          "snat": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "subnet": {
            "type": "string"
          },
          "vnet": {
            "type": "string"
          },
          "dnszoneprefix": {
            "type": "string"
          },
          "delete": {
            "type": "string",
            "maxLength": 4096
          },
          "dhcp-dns-server": {
            "type": "string"
          },
          "gateway": {
            "type": "string"
          }
        }
      },
      "POST-NodesQemuSnapshotRollback-RB": {
        "type": "object",
        "properties": {
          "snapname": {
            "type": "string",
            "maxLength": 40
          },
          "start": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "ClusterJobsScheduleanalyze": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "utc": {
              "type": "string"
            },
            "timestamp": {
              "type": "integer"
            }
          }
        }
      },
      "GET-ClusterMappingPci-RB": {
        "type": "object",
        "properties": {
          "check-node": {
            "type": "string"
          }
        }
      },
      "DELETE-NodesDisksDirectory-RB": {
        "type": "object",
        "properties": {
          "cleanup-disks": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "cleanup-config": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesTasks-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "GET-ClusterMappingUsb-RB": {
        "type": "object",
        "properties": {
          "check-node": {
            "type": "string"
          }
        }
      },
      "ClusterFirewallOptions": {
        "type": "object",
        "properties": {
          "policy_in": {
            "enum": [
              "ACCEPT",
              "REJECT",
              "DROP"
            ],
            "type": "string"
          },
          "policy_forward": {
            "enum": [
              "ACCEPT",
              "DROP"
            ],
            "type": "string"
          },
          "log_ratelimit": {
            "type": "string"
          },
          "ebtables": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "policy_out": {
            "enum": [
              "ACCEPT",
              "REJECT",
              "DROP"
            ],
            "type": "string"
          },
          "enable": {
            "type": "integer"
          }
        }
      },
      "NodesConfig": {
        "type": "object",
        "properties": {
          "wakeonlan": {
            "type": "string"
          },
          "acmedomain[n]": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 40
          },
          "acme": {
            "type": "string"
          },
          "startall-onboot-delay": {
            "type": "integer",
            "maximum": 300
          },
          "description": {
            "type": "string",
            "maxLength": 65536
          }
        }
      },
      "AccessUsersTfa": {
        "type": "object",
        "properties": {
          "realm": {
            "enum": [
              "oath",
              "yubico"
            ],
            "type": "string"
          },
          "user": {
            "enum": [
              "oath",
              "u2f"
            ],
            "type": "string"
          },
          "types": {
            "type": "array",
            "items": {
              "description": "A TFA type.",
              "enum": [
                "totp",
                "u2f",
                "yubico",
                "webauthn",
                "recovedry"
              ],
              "type": "string"
            }
          }
        }
      },
      "AccessAcl": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "propagate": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "roleid": {
              "type": "string"
            },
            "path": {
              "type": "string"
            },
            "ugid": {
              "type": "string"
            },
            "type": {
              "enum": [
                "user",
                "group",
                "token"
              ],
              "type": "string"
            }
          }
        }
      },
      "PUT-NodesLxcFirewallOptions-RB": {
        "type": "object",
        "properties": {
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "macfilter": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "policy_in": {
            "enum": [
              "ACCEPT",
              "REJECT",
              "DROP"
            ],
            "type": "string"
          },
          "enable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "radv": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          },
          "dhcp": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "log_level_in": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "policy_out": {
            "enum": [
              "ACCEPT",
              "REJECT",
              "DROP"
            ],
            "type": "string"
          },
          "ipfilter": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "delete": {
            "type": "string"
          },
          "ndp": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "log_level_out": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          }
        }
      },
      "ClusterNotificationsEndpointsSmtp-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "username": {
              "type": "string"
            },
            "mode": {
              "enum": [
                "insecure",
                "starttls",
                "tls"
              ],
              "type": "string"
            },
            "author": {
              "type": "string"
            },
            "mailto-user": {
              "type": "array",
              "items": {
                "format": "pve-userid",
                "type": "string"
              }
            },
            "from-address": {
              "type": "string"
            },
            "port": {
              "type": "integer"
            },
            "origin": {
              "enum": [
                "user-created",
                "builtin",
                "modified-builtin"
              ],
              "type": "string"
            },
            "mailto": {
              "type": "array",
              "items": {
                "format": "email-or-username",
                "type": "string"
              }
            },
            "comment": {
              "type": "string"
            },
            "server": {
              "type": "string"
            },
            "disable": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "name": {
              "type": "string"
            }
          }
        }
      },
      "GET-NodesStorageContent-RB": {
        "type": "object",
        "properties": {
          "storage": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesVzdumpDefaults": {
        "type": "object",
        "properties": {
          "prune-backups": {
            "type": "string"
          },
          "bwlimit": {
            "type": "integer"
          },
          "remove": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "fleecing": {
            "type": "string"
          },
          "all": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "pigz": {
            "type": "integer"
          },
          "protected": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "exclude-path": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pbs-change-detection-mode": {
            "enum": [
              "legacy",
              "data",
              "metadata"
            ],
            "type": "string"
          },
          "script": {
            "type": "string"
          },
          "tmpdir": {
            "type": "string"
          },
          "pool": {
            "type": "string"
          },
          "zstd": {
            "type": "integer"
          },
          "stopwait": {
            "type": "integer"
          },
          "exclude": {
            "type": "string"
          },
          "stop": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "mailto": {
            "type": "string"
          },
          "storage": {
            "type": "string"
          },
          "notes-template": {
            "type": "string",
            "maxLength": 1024
          },
          "dumpdir": {
            "type": "string"
          },
          "stdexcludes": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "mailnotification": {
            "enum": [
              "always",
              "failure"
            ],
            "type": "string"
          },
          "mode": {
            "enum": [
              "snapshot",
              "suspend",
              "stop"
            ],
            "type": "string"
          },
          "lockwait": {
            "type": "integer"
          },
          "notification-target": {
            "type": "string"
          },
          "performance": {
            "type": "string"
          },
          "maxfiles": {
            "type": "integer",
            "minimum": 1
          },
          "ionice": {
            "type": "integer",
            "maximum": 8
          },
          "notification-policy": {
            "enum": [
              "always",
              "failure",
              "never"
            ],
            "type": "string"
          },
          "vmid": {
            "type": "string"
          },
          "compress": {
            "enum": [
              "0",
              "1",
              "gzip",
              "lzo",
              "zstd"
            ],
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "quiet": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "notification-mode": {
            "enum": [
              "auto",
              "legacy-sendmail",
              "notification-system"
            ],
            "type": "string"
          }
        }
      },
      "DELETE-NodesStorageContent-RB": {
        "type": "object",
        "properties": {
          "storage": {
            "type": "string"
          },
          "delay": {
            "minimum": 1,
            "type": "integer",
            "maximum": 30
          },
          "volume": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "POST-NodesQemuFirewallRules-RB": {
        "type": "object",
        "properties": {
          "pos": {
            "type": "integer"
          },
          "type": {
            "enum": [
              "in",
              "out",
              "forward",
              "group"
            ],
            "type": "string"
          },
          "dest": {
            "type": "string",
            "maxLength": 512
          },
          "source": {
            "type": "string",
            "maxLength": 512
          },
          "dport": {
            "type": "string"
          },
          "enable": {
            "type": "integer"
          },
          "action": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 20,
            "type": "string"
          },
          "macro": {
            "type": "string",
            "maxLength": 128
          },
          "node": {
            "type": "string"
          },
          "iface": {
            "minLength": 2,
            "maxLength": 20,
            "type": "string"
          },
          "log": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "sport": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "comment": {
            "type": "string"
          },
          "proto": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "icmp-type": {
            "type": "string"
          }
        }
      },
      "NodesSyslog": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "t": {
              "type": "string"
            },
            "n": {
              "type": "integer"
            }
          }
        }
      },
      "NodesLxcFirewallOptions": {
        "type": "object",
        "properties": {
          "log_level_out": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "dhcp": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "macfilter": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "ndp": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "policy_in": {
            "enum": [
              "ACCEPT",
              "REJECT",
              "DROP"
            ],
            "type": "string"
          },
          "ipfilter": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "policy_out": {
            "enum": [
              "ACCEPT",
              "REJECT",
              "DROP"
            ],
            "type": "string"
          },
          "enable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "log_level_in": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "radv": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "POST-NodesLxcFirewallAliases-RB": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "name": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 64,
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "cidr": {
            "type": "string"
          }
        }
      },
      "DELETE-NodesDisksLvmthin-RB": {
        "type": "object",
        "properties": {
          "volume-group": {
            "type": "string"
          },
          "cleanup-disks": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "cleanup-config": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesDisksList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "gpt": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "osdid": {
              "type": "integer"
            },
            "used": {
              "type": "string"
            },
            "size": {
              "type": "integer"
            },
            "serial": {
              "type": "string"
            },
            "vendor": {
              "type": "string"
            },
            "devpath": {
              "type": "string"
            },
            "osdid-list": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "wwn": {
              "type": "string"
            },
            "mounted": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "parent": {
              "type": "string"
            },
            "model": {
              "type": "string"
            },
            "health": {
              "type": "string"
            }
          }
        }
      },
      "NodesRrddata": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "PUT-ClusterNotificationsEndpointsSendmail-RB": {
        "type": "object",
        "properties": {
          "author": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "from-address": {
            "type": "string"
          },
          "mailto": {
            "type": "array",
            "items": {
              "format": "email-or-username",
              "type": "string"
            }
          },
          "mailto-user": {
            "type": "array",
            "items": {
              "format": "pve-userid",
              "type": "string"
            }
          },
          "comment": {
            "type": "string"
          },
          "delete": {
            "type": "array",
            "items": {
              "format": "pve-configid",
              "type": "string"
            }
          },
          "disable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "NodesScanLvmthin": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "lv": {
              "type": "string"
            }
          }
        }
      },
      "NodesLxcFirewallRules": {
        "type": "object",
        "properties": {
          "pos": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "ipversion": {
            "type": "integer"
          },
          "dest": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "enable": {
            "type": "integer"
          },
          "action": {
            "type": "string"
          },
          "macro": {
            "type": "string"
          },
          "iface": {
            "type": "string"
          },
          "dport": {
            "type": "string"
          },
          "log": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "sport": {
            "type": "string"
          },
          "proto": {
            "type": "string"
          },
          "icmp-type": {
            "type": "string"
          }
        }
      },
      "POST-NodesStopall-RB": {
        "type": "object",
        "properties": {
          "force-stop": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "vms": {
            "type": "string"
          },
          "timeout": {
            "type": "integer",
            "maximum": 7200
          },
          "node": {
            "type": "string"
          }
        }
      },
      "PUT-ClusterMappingPci-RB": {
        "type": "object",
        "properties": {
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "mdev": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "map": {
            "type": "array",
            "items": {
              "format": {
                "description": {
                  "description": "Description of the node specific device.",
                  "maxLength": 4096,
                  "optional": 1,
                  "type": "string"
                },
                "id": {
                  "description": "The vendor and device ID that is expected. Used for detecting hardware changes",
                  "pattern": "(?^:^[0-9A-Fa-f]{4}:[0-9A-Fa-f]{4}$)",
                  "type": "string"
                },
                "iommugroup": {
                  "description": "The IOMMU group in which the device is to be expected in. Used for detecting hardware changes.",
                  "optional": 1,
                  "type": "integer"
                },
                "node": {
                  "description": "The cluster node name.",
                  "format": "pve-node",
                  "type": "string"
                },
                "path": {
                  "description": "The path to the device. If the function is omitted, the whole device is mapped. In that case use the attributes of the first device. You can give multiple paths as a semicolon seperated list, the first available will then be chosen on guest start.",
                  "pattern": "(?:[a-f0-9]{4,}:[a-f0-9]{2}:[a-f0-9]{2}(?:.[a-f0-9])?;)*[a-f0-9]{4,}:[a-f0-9]{2}:[a-f0-9]{2}(?:.[a-f0-9])?",
                  "type": "string"
                },
                "subsystem-id": {
                  "description": "The subsystem vendor and device ID that is expected. Used for detecting hardware changes.",
                  "optional": 1,
                  "pattern": "(?^:^[0-9A-Fa-f]{4}:[0-9A-Fa-f]{4}$)",
                  "type": "string"
                }
              },
              "type": "string"
            }
          },
          "description": {
            "type": "string",
            "maxLength": 4096
          },
          "delete": {
            "type": "string",
            "maxLength": 4096
          },
          "id": {
            "type": "string"
          }
        }
      },
      "PUT-AccessPassword-RB": {
        "type": "object",
        "properties": {
          "confirmation-password": {
            "minLength": 5,
            "maxLength": 64,
            "type": "string"
          },
          "password": {
            "minLength": 8,
            "maxLength": 64,
            "type": "string"
          },
          "userid": {
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "ClusterSdn": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            }
          }
        }
      },
      "NodesStorageFilerestoreDownload": {
        "type": "string",
        "format": "binary"
      },
      "ClusterFirewallMacros": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "macro": {
              "type": "string"
            },
            "descr": {
              "type": "string"
            }
          }
        }
      },
      "AccessUsersToken": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "expire": {
            "type": "integer"
          },
          "privsep": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "NodesQemuFirewallIpset-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "comment": {
              "type": "string"
            },
            "digest": {
              "type": "string",
              "maxLength": 64
            },
            "nomatch": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "cidr": {
              "type": "string"
            }
          }
        }
      },
      "AccessTicket": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "CSRFPreventionToken": {
            "type": "string"
          },
          "ticket": {
            "type": "string"
          },
          "clustername": {
            "type": "string"
          }
        }
      },
      "POST-NodesCephMds-RB": {
        "type": "object",
        "properties": {
          "hotstandby": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "name": {
            "pattern": "[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?",
            "maxLength": 200,
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesTasksLog": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "t": {
              "type": "string"
            },
            "n": {
              "type": "integer"
            }
          }
        }
      },
      "PUT-ClusterMetricsServer-RB": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "bucket": {
            "type": "string"
          },
          "organization": {
            "type": "string"
          },
          "port": {
            "minimum": 1,
            "type": "integer",
            "maximum": 65536
          },
          "disable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "influxdbproto": {
            "enum": [
              "udp",
              "http",
              "https"
            ],
            "type": "string"
          },
          "server": {
            "type": "string"
          },
          "mtu": {
            "minimum": 512,
            "type": "integer",
            "maximum": 65536
          },
          "verify-certificate": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "delete": {
            "type": "string",
            "maxLength": 4096
          },
          "token": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "timeout": {
            "type": "integer"
          },
          "proto": {
            "enum": [
              "udp",
              "tcp"
            ],
            "type": "string"
          },
          "api-path-prefix": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "max-body-size": {
            "type": "integer",
            "minimum": 1
          }
        }
      },
      "ClusterFirewallGroups": {
        "type": "object",
        "properties": {
          "pos": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "ipversion": {
            "type": "integer"
          },
          "dest": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "enable": {
            "type": "integer"
          },
          "action": {
            "type": "string"
          },
          "macro": {
            "type": "string"
          },
          "iface": {
            "type": "string"
          },
          "dport": {
            "type": "string"
          },
          "log": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "sport": {
            "type": "string"
          },
          "proto": {
            "type": "string"
          },
          "icmp-type": {
            "type": "string"
          }
        }
      },
      "POST-NodesVncshell-RB": {
        "type": "object",
        "properties": {
          "cmd": {
            "enum": [
              "upgrade",
              "ceph_install",
              "login"
            ],
            "type": "string"
          },
          "height": {
            "minimum": 16,
            "type": "integer",
            "maximum": 2160
          },
          "node": {
            "type": "string"
          },
          "websocket": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "cmd-opts": {
            "type": "string"
          },
          "width": {
            "minimum": 16,
            "type": "integer",
            "maximum": 4096
          }
        }
      },
      "POST-ClusterFirewallGroups-RB": {
        "type": "object",
        "properties": {
          "pos": {
            "type": "integer"
          },
          "type": {
            "enum": [
              "in",
              "out",
              "forward",
              "group"
            ],
            "type": "string"
          },
          "dest": {
            "type": "string",
            "maxLength": 512
          },
          "source": {
            "type": "string",
            "maxLength": 512
          },
          "dport": {
            "type": "string"
          },
          "enable": {
            "type": "integer"
          },
          "macro": {
            "type": "string",
            "maxLength": 128
          },
          "action": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 20,
            "type": "string"
          },
          "log": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "sport": {
            "type": "string"
          },
          "iface": {
            "minLength": 2,
            "maxLength": 20,
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "proto": {
            "type": "string"
          },
          "group": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 18,
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "icmp-type": {
            "type": "string"
          }
        }
      },
      "GET-ClusterAcmePlugins-RB": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "dns",
              "standalone"
            ],
            "type": "string"
          }
        }
      },
      "PUT-ClusterCephFlags-RB": {
        "type": "object",
        "properties": {
          "flag": {
            "enum": [
              "nobackfill",
              "nodeep-scrub",
              "nodown",
              "noin",
              "noout",
              "norebalance",
              "norecover",
              "noscrub",
              "notieragent",
              "noup",
              "pause"
            ],
            "type": "string"
          },
          "value": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "ClusterCephFlags-GET": {
        "type": "integer",
        "minimum": 0,
        "maximum": 1,
        "description": null
      },
      "POST-ClusterAcmeAccount-RB": {
        "type": "object",
        "properties": {
          "eab-kid": {
            "type": "string"
          },
          "eab-hmac-key": {
            "type": "string"
          },
          "directory": {
            "type": "string",
            "pattern": "^https?://.*"
          },
          "tos_url": {
            "type": "string"
          },
          "contact": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "DELETE-NodesLxc-RB": {
        "type": "object",
        "properties": {
          "force": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "destroy-unreferenced-disks": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "purge": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "POST-NodesVzdump-RB": {
        "type": "object",
        "properties": {
          "prune-backups": {
            "type": "string"
          },
          "bwlimit": {
            "type": "integer"
          },
          "remove": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "fleecing": {
            "type": "string"
          },
          "job-id": {
            "pattern": "\\S+",
            "maxLength": 50,
            "type": "string"
          },
          "all": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "pigz": {
            "type": "integer"
          },
          "protected": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "exclude-path": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pbs-change-detection-mode": {
            "enum": [
              "legacy",
              "data",
              "metadata"
            ],
            "type": "string"
          },
          "script": {
            "type": "string"
          },
          "stdout": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "pool": {
            "type": "string"
          },
          "zstd": {
            "type": "integer"
          },
          "stopwait": {
            "type": "integer"
          },
          "exclude": {
            "type": "string"
          },
          "stop": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "mailto": {
            "type": "string"
          },
          "storage": {
            "type": "string"
          },
          "notes-template": {
            "type": "string",
            "maxLength": 1024
          },
          "dumpdir": {
            "type": "string"
          },
          "stdexcludes": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "mailnotification": {
            "enum": [
              "always",
              "failure"
            ],
            "type": "string"
          },
          "mode": {
            "enum": [
              "snapshot",
              "suspend",
              "stop"
            ],
            "type": "string"
          },
          "lockwait": {
            "type": "integer"
          },
          "tmpdir": {
            "type": "string"
          },
          "notification-target": {
            "type": "string"
          },
          "performance": {
            "type": "string"
          },
          "maxfiles": {
            "type": "integer",
            "minimum": 1
          },
          "ionice": {
            "type": "integer",
            "maximum": 8
          },
          "notification-policy": {
            "enum": [
              "always",
              "failure",
              "never"
            ],
            "type": "string"
          },
          "vmid": {
            "type": "string"
          },
          "compress": {
            "enum": [
              "0",
              "1",
              "gzip",
              "lzo",
              "zstd"
            ],
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "quiet": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "notification-mode": {
            "enum": [
              "auto",
              "legacy-sendmail",
              "notification-system"
            ],
            "type": "string"
          }
        }
      },
      "ClusterNotificationsEndpointsSmtp": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "mode": {
            "enum": [
              "insecure",
              "starttls",
              "tls"
            ],
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "from-address": {
            "type": "string"
          },
          "port": {
            "type": "integer"
          },
          "server": {
            "type": "string"
          },
          "mailto": {
            "type": "array",
            "items": {
              "format": "email-or-username",
              "type": "string"
            }
          },
          "mailto-user": {
            "type": "array",
            "items": {
              "format": "pve-userid",
              "type": "string"
            }
          },
          "comment": {
            "type": "string"
          },
          "disable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "AccessGroups": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "members": {
            "type": "array",
            "items": {
              "description": "Full User ID, in the `name@realm` format.",
              "format": "pve-userid",
              "maxLength": 64,
              "type": "string"
            }
          }
        }
      },
      "GET-ClusterLog-RB": {
        "type": "object",
        "properties": {
          "max": {
            "type": "integer",
            "minimum": 1
          }
        }
      },
      "NodesSdnZonesContent": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string"
            },
            "vnet": {
              "type": "string"
            },
            "statusmsg": {
              "type": "string"
            }
          }
        }
      },
      "NodesScanGlusterfs": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "volname": {
              "type": "string"
            }
          }
        }
      },
      "NodesQemuFirewallRules-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "pos": {
              "type": "integer"
            }
          }
        }
      },
      "POST-NodesQemuSpiceproxy-RB": {
        "type": "object",
        "properties": {
          "proxy": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesDisks": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "ClusterNextid": {
        "type": "integer",
        "desciption": null
      },
      "DELETE-Pools-RB": {
        "type": "object",
        "properties": {
          "poolid": {
            "type": "string"
          }
        }
      },
      "GET-NodesScanGlusterfs-RB": {
        "type": "object",
        "properties": {
          "server": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "GET-NodesVzdumpDefaults-RB": {
        "type": "object",
        "properties": {
          "storage": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "GET-NodesQueryurlmetadata-RB": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "pattern": "https?://.*"
          },
          "verify-certificates": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "DELETE-ClusterFirewallRules-RB": {
        "type": "object",
        "properties": {
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "pos": {
            "type": "integer"
          }
        }
      },
      "DELETE-ClusterFirewallIpset-RB": {
        "type": "object",
        "properties": {
          "cidr": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "name": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 64,
            "type": "string"
          }
        }
      },
      "POST-NodesLxcStatusReboot-RB": {
        "type": "object",
        "properties": {
          "node": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "timeout": {
            "type": "integer"
          }
        }
      },
      "POST-NodesQemuAgentFilewrite-RB": {
        "type": "object",
        "properties": {
          "encode": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "file": {
            "type": "string"
          },
          "content": {
            "type": "string",
            "maxLength": 61440
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "POST-NodesCephMon-RB": {
        "type": "object",
        "properties": {
          "monid": {
            "pattern": "[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?",
            "maxLength": 200,
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "mon-address": {
            "type": "string"
          }
        }
      },
      "POST-NodesQemuAgent-RB": {
        "type": "object",
        "properties": {
          "command": {
            "enum": [
              "fsfreeze-freeze",
              "fsfreeze-status",
              "fsfreeze-thaw",
              "fstrim",
              "get-fsinfo",
              "get-host-name",
              "get-memory-block-info",
              "get-memory-blocks",
              "get-osinfo",
              "get-time",
              "get-timezone",
              "get-users",
              "get-vcpus",
              "info",
              "network-get-interfaces",
              "ping",
              "shutdown",
              "suspend-disk",
              "suspend-hybrid",
              "suspend-ram"
            ],
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "AccessRoles-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "special": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "roleid": {
              "type": "string"
            },
            "privs": {
              "type": "string"
            }
          }
        }
      },
      "POST-NodesStorageContent-RB": {
        "type": "object",
        "properties": {
          "storage": {
            "type": "string"
          },
          "target_node": {
            "type": "string"
          },
          "volume": {
            "type": "string"
          },
          "target": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "ClusterTasks": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "upid": {
              "type": "string"
            }
          }
        }
      },
      "PUT-NodesLxcConfig-RB": {
        "type": "object",
        "properties": {
          "startup": {
            "type": "string"
          },
          "tags": {
            "type": "string"
          },
          "swap": {
            "type": "integer"
          },
          "nameserver": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "ostype": {
            "enum": [
              "debian",
              "devuan",
              "ubuntu",
              "centos",
              "fedora",
              "opensuse",
              "archlinux",
              "alpine",
              "gentoo",
              "nixos",
              "unmanaged"
            ],
            "type": "string"
          },
          "debug": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "unused[n]": {
            "type": "string"
          },
          "revert": {
            "type": "string"
          },
          "cpulimit": {
            "type": "number",
            "maximum": 8192
          },
          "tty": {
            "type": "integer",
            "maximum": 6
          },
          "cmode": {
            "enum": [
              "shell",
              "console",
              "tty"
            ],
            "type": "string"
          },
          "template": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "delete": {
            "type": "string"
          },
          "hookscript": {
            "type": "string"
          },
          "onboot": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "net[n]": {
            "type": "string"
          },
          "lock": {
            "enum": [
              "backup",
              "create",
              "destroyed",
              "disk",
              "fstrim",
              "migrate",
              "mounted",
              "rollback",
              "snapshot",
              "snapshot-delete"
            ],
            "type": "string"
          },
          "mp[n]": {
            "type": "string"
          },
          "hostname": {
            "type": "string",
            "maxLength": 255
          },
          "arch": {
            "enum": [
              "amd64",
              "i386",
              "arm64",
              "armhf",
              "riscv32",
              "riscv64"
            ],
            "type": "string"
          },
          "description": {
            "type": "string",
            "maxLength": 8192
          },
          "cores": {
            "minimum": 1,
            "type": "integer",
            "maximum": 8192
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "memory": {
            "type": "integer",
            "minimum": 16
          },
          "digest": {
            "type": "string",
            "maxLength": 40
          },
          "features": {
            "type": "string"
          },
          "unprivileged": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "console": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "dev[n]": {
            "type": "string"
          },
          "protection": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          },
          "rootfs": {
            "type": "string"
          },
          "searchdomain": {
            "type": "string"
          },
          "cpuunits": {
            "type": "integer",
            "maximum": 500000
          }
        }
      },
      "GET-NodesCephOsdLvinfo-RB": {
        "type": "object",
        "properties": {
          "osdid": {
            "type": "integer"
          },
          "type": {
            "enum": [
              "block",
              "db",
              "wal"
            ],
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "POST-ClusterHaResourcesRelocate-RB": {
        "type": "object",
        "properties": {
          "node": {
            "type": "string"
          },
          "sid": {
            "type": "string"
          }
        }
      },
      "ClusterMappingUsb": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string"
            },
            "error": {
              "type": null,
              "items": {
                "properties": {
                  "message": {
                    "description": "The message of the error",
                    "type": "string"
                  },
                  "severity": {
                    "description": "The severity of the error",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "map": {
              "type": "array",
              "items": {
                "description": "A mapping for a node.",
                "type": "string"
              }
            },
            "id": {
              "type": "string"
            }
          }
        }
      },
      "GET-NodesRrd-RB": {
        "type": "object",
        "properties": {
          "timeframe": {
            "enum": [
              "hour",
              "day",
              "week",
              "month",
              "year"
            ],
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "ds": {
            "type": "string"
          },
          "cf": {
            "enum": [
              "AVERAGE",
              "MAX"
            ],
            "type": "string"
          }
        }
      },
      "Version": {
        "type": "object",
        "properties": {
          "release": {
            "type": "string"
          },
          "repoid": {
            "type": "string",
            "pattern": "[0-9a-fA-F]{8,64}"
          },
          "version": {
            "type": "string"
          },
          "console": {
            "enum": [
              "applet",
              "vv",
              "html5",
              "xtermjs"
            ],
            "type": "string"
          }
        }
      },
      "ClusterCephFlags": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "value": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "description": {
              "type": "string"
            },
            "name": {
              "enum": [
                "nobackfill",
                "nodeep-scrub",
                "nodown",
                "noin",
                "noout",
                "norebalance",
                "norecover",
                "noscrub",
                "notieragent",
                "noup",
                "pause"
              ],
              "type": "string"
            }
          }
        }
      },
      "POST-AccessRoles-RB": {
        "type": "object",
        "properties": {
          "privs": {
            "type": "string"
          },
          "roleid": {
            "type": "string"
          }
        }
      },
      "ClusterHa": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            }
          }
        }
      },
      "NodesCephLog": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "t": {
              "type": "string"
            },
            "n": {
              "type": "integer"
            }
          }
        }
      },
      "DELETE-ClusterReplication-RB": {
        "type": "object",
        "properties": {
          "force": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "keep": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "id": {
            "type": "string",
            "pattern": "[1-9][0-9]{2,8}-\\d{1,9}"
          }
        }
      },
      "PUT-ClusterSdnVnetsFirewallOptions-RB": {
        "type": "object",
        "properties": {
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "policy_forward": {
            "enum": [
              "ACCEPT",
              "DROP"
            ],
            "type": "string"
          },
          "vnet": {
            "type": "string"
          },
          "enable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "delete": {
            "type": "string"
          },
          "log_level_forward": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          }
        }
      },
      "POST-NodesAptUpdate-RB": {
        "type": "object",
        "properties": {
          "notify": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "quiet": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesCertificatesCustom": {
        "type": "object",
        "properties": {
          "issuer": {
            "type": "string"
          },
          "notafter": {
            "type": "integer"
          },
          "fingerprint": {
            "type": "string",
            "pattern": "([A-Fa-f0-9]{2}:){31}[A-Fa-f0-9]{2}"
          },
          "pem": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "notbefore": {
            "type": "integer"
          },
          "public-key-bits": {
            "type": "integer"
          },
          "public-key-type": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "san": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "POST-NodesLxcStatusStop-RB": {
        "type": "object",
        "properties": {
          "node": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "skiplock": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "overrule-shutdown": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "POST-ClusterSdnZones-RB": {
        "type": "object",
        "properties": {
          "reversedns": {
            "type": "string"
          },
          "zone": {
            "type": "string"
          },
          "ipam": {
            "type": "string"
          },
          "type": {
            "enum": [
              "evpn",
              "faucet",
              "qinq",
              "simple",
              "vlan",
              "vxlan"
            ],
            "type": "string"
          },
          "mac": {
            "type": "string"
          },
          "vrf-vxlan": {
            "type": "integer"
          },
          "nodes": {
            "type": "string"
          },
          "controller": {
            "type": "string"
          },
          "vlan-protocol": {
            "enum": [
              "802.1q",
              "802.1ad"
            ],
            "type": "string"
          },
          "dns": {
            "type": "string"
          },
          "bridge": {
            "type": "string"
          },
          "dhcp": {
            "enum": [
              "dnsmasq"
            ],
            "type": "string"
          },
          "exitnodes-primary": {
            "type": "string"
          },
          "vxlan-port": {
            "minimum": 1,
            "type": "integer",
            "maximum": 65536
          },
          "dp-id": {
            "type": "integer"
          },
          "disable-arp-nd-suppression": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "peers": {
            "type": "string"
          },
          "tag": {
            "type": "integer"
          },
          "advertise-subnets": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "rt-import": {
            "type": "string"
          },
          "bridge-disable-mac-learning": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "exitnodes": {
            "type": "string"
          },
          "mtu": {
            "type": "integer"
          },
          "exitnodes-local-routing": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "dnszone": {
            "type": "string"
          }
        }
      },
      "ClusterSdnVnetsFirewallRules-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "pos": {
              "type": "integer"
            }
          }
        }
      },
      "NodesTasks": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "pid": {
              "type": "integer",
              "title": "PID"
            },
            "status": {
              "type": "string",
              "title": "Status"
            },
            "pstart": {
              "type": "integer"
            },
            "user": {
              "type": "string",
              "title": "User"
            },
            "type": {
              "type": "string",
              "title": "Type"
            },
            "node": {
              "type": "string",
              "title": "Node"
            },
            "starttime": {
              "type": "integer",
              "title": "Starttime"
            },
            "upid": {
              "type": "string",
              "title": "UPID"
            },
            "endtime": {
              "type": "integer",
              "title": "Endtime"
            },
            "id": {
              "type": "string",
              "title": "ID"
            }
          }
        }
      },
      "POST-ClusterAcmePlugins-RB": {
        "type": "object",
        "properties": {
          "api": {
            "enum": [
              "1984hosting",
              "acmedns",
              "acmeproxy",
              "active24",
              "ad",
              "ali",
              "anx",
              "artfiles",
              "arvan",
              "aurora",
              "autodns",
              "aws",
              "azion",
              "azure",
              "bookmyname",
              "bunny",
              "cf",
              "clouddns",
              "cloudns",
              "cn",
              "conoha",
              "constellix",
              "cpanel",
              "curanet",
              "cyon",
              "da",
              "ddnss",
              "desec",
              "df",
              "dgon",
              "dnsexit",
              "dnshome",
              "dnsimple",
              "dnsservices",
              "do",
              "doapi",
              "domeneshop",
              "dp",
              "dpi",
              "dreamhost",
              "duckdns",
              "durabledns",
              "dyn",
              "dynu",
              "dynv6",
              "easydns",
              "edgedns",
              "euserv",
              "exoscale",
              "fornex",
              "freedns",
              "gandi_livedns",
              "gcloud",
              "gcore",
              "gd",
              "geoscaling",
              "googledomains",
              "he",
              "hetzner",
              "hexonet",
              "hostingde",
              "huaweicloud",
              "infoblox",
              "infomaniak",
              "internetbs",
              "inwx",
              "ionos",
              "ipv64",
              "ispconfig",
              "jd",
              "joker",
              "kappernet",
              "kas",
              "kinghost",
              "knot",
              "la",
              "leaseweb",
              "lexicon",
              "linode",
              "linode_v4",
              "loopia",
              "lua",
              "maradns",
              "me",
              "miab",
              "misaka",
              "myapi",
              "mydevil",
              "mydnsjp",
              "mythic_beasts",
              "namecheap",
              "namecom",
              "namesilo",
              "nanelo",
              "nederhost",
              "neodigit",
              "netcup",
              "netlify",
              "nic",
              "njalla",
              "nm",
              "nsd",
              "nsone",
              "nsupdate",
              "nw",
              "oci",
              "one",
              "online",
              "openprovider",
              "openstack",
              "opnsense",
              "ovh",
              "pdns",
              "pleskxml",
              "pointhq",
              "porkbun",
              "rackcorp",
              "rackspace",
              "rage4",
              "rcode0",
              "regru",
              "scaleway",
              "schlundtech",
              "selectel",
              "selfhost",
              "servercow",
              "simply",
              "tele3",
              "tencent",
              "transip",
              "udr",
              "ultra",
              "unoeuro",
              "variomedia",
              "veesp",
              "vercel",
              "vscale",
              "vultr",
              "websupport",
              "world4you",
              "yandex",
              "yc",
              "zilore",
              "zone",
              "zonomi"
            ],
            "type": "string"
          },
          "validation-delay": {
            "type": "integer",
            "maximum": 172800
          },
          "data": {
            "type": "string"
          },
          "type": {
            "enum": [
              "dns",
              "standalone"
            ],
            "type": "string"
          },
          "nodes": {
            "type": "string"
          },
          "disable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "POST-NodesQemuStatusResume-RB": {
        "type": "object",
        "properties": {
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "skiplock": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "nocheck": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesAptUpdate": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "POST-NodesQemuStatusSuspend-RB": {
        "type": "object",
        "properties": {
          "todisk": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "statestorage": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "skiplock": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "DELETE-AccessTfa-RB": {
        "type": "object",
        "properties": {
          "userid": {
            "type": "string",
            "maxLength": 64
          },
          "password": {
            "minLength": 5,
            "maxLength": 64,
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "Cluster": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "PUT-NodesDns-RB": {
        "type": "object",
        "properties": {
          "search": {
            "type": "string"
          },
          "dns3": {
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "dns1": {
            "type": "string"
          },
          "dns2": {
            "type": "string"
          }
        }
      },
      "ClusterSdnControllers": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "pending": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "state": {
              "type": "string"
            },
            "controller": {
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          }
        }
      },
      "POST-NodesLxcMigrate-RB": {
        "type": "object",
        "properties": {
          "timeout": {
            "type": "integer"
          },
          "target": {
            "type": "string"
          },
          "bwlimit": {
            "type": "number",
            "minimum": "0"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          },
          "target-storage": {
            "type": "string"
          },
          "online": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "restart": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "POST-NodesLxcRemotemigrate-RB": {
        "type": "object",
        "properties": {
          "target-vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "timeout": {
            "type": "integer"
          },
          "target-endpoint": {
            "type": "string"
          },
          "bwlimit": {
            "type": "number",
            "minimum": "0"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          },
          "target-storage": {
            "type": "string"
          },
          "online": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "delete": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "restart": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "target-bridge": {
            "type": "string"
          }
        }
      },
      "GET-NodesConfig-RB": {
        "type": "object",
        "properties": {
          "node": {
            "type": "string"
          },
          "property": {
            "enum": [
              "acme",
              "acmedomain0",
              "acmedomain1",
              "acmedomain2",
              "acmedomain3",
              "acmedomain4",
              "acmedomain5",
              "description",
              "startall-onboot-delay",
              "wakeonlan"
            ],
            "type": "string"
          }
        }
      },
      "NodesQemuRrddata": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "PUT-AccessDomains-RB": {
        "type": "object",
        "properties": {
          "sync-defaults-options": {
            "type": "string"
          },
          "group_filter": {
            "type": "string",
            "maxLength": 2048
          },
          "capath": {
            "type": "string"
          },
          "filter": {
            "type": "string",
            "maxLength": 2048
          },
          "client-id": {
            "type": "string",
            "maxLength": 256
          },
          "mode": {
            "enum": [
              "ldap",
              "ldaps",
              "ldap+starttls"
            ],
            "type": "string"
          },
          "tfa": {
            "type": "string",
            "maxLength": 128
          },
          "sync_attributes": {
            "type": "string",
            "pattern": "\\w+=[^,]+(,\\s*\\w+=[^,]+)*"
          },
          "prompt": {
            "type": "string",
            "pattern": "(?:none|login|consent|select_account|\\S+)"
          },
          "comment": {
            "type": "string",
            "maxLength": 4096
          },
          "case-sensitive": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "group_classes": {
            "type": "string"
          },
          "server2": {
            "type": "string",
            "maxLength": 256
          },
          "user_attr": {
            "pattern": "\\S{2,}",
            "maxLength": 256,
            "type": "string"
          },
          "delete": {
            "type": "string",
            "maxLength": 4096
          },
          "sslversion": {
            "enum": [
              "tlsv1",
              "tlsv1_1",
              "tlsv1_2",
              "tlsv1_3"
            ],
            "type": "string"
          },
          "group_dn": {
            "type": "string",
            "maxLength": 256
          },
          "check-connection": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "port": {
            "minimum": 1,
            "type": "integer",
            "maximum": 65535
          },
          "realm": {
            "type": "string",
            "maxLength": 32
          },
          "cert": {
            "type": "string"
          },
          "certkey": {
            "type": "string"
          },
          "issuer-url": {
            "type": "string",
            "maxLength": 256
          },
          "default": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "client-key": {
            "type": "string",
            "maxLength": 256
          },
          "base_dn": {
            "type": "string",
            "maxLength": 256
          },
          "group_name_attr": {
            "type": "string",
            "maxLength": 256
          },
          "secure": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "verify": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "autocreate": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "acr-values": {
            "type": "string",
            "pattern": "^[^\\x00-\\x1F\\x7F <>#\"]*$"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "domain": {
            "pattern": "\\S+",
            "maxLength": 256,
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "user_classes": {
            "type": "string"
          },
          "server1": {
            "type": "string",
            "maxLength": 256
          },
          "scopes": {
            "type": "string"
          },
          "bind_dn": {
            "type": "string",
            "maxLength": 256
          }
        }
      },
      "PUT-ClusterSdnIpams-RB": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "ipam": {
            "type": "string"
          },
          "section": {
            "type": "integer"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "delete": {
            "type": "string",
            "maxLength": 4096
          },
          "token": {
            "type": "string"
          }
        }
      },
      "NodesDisksLvm": {
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "properties": {
                "children": {
                  "description": "The underlying physical volumes",
                  "items": {
                    "properties": {
                      "free": {
                        "description": "The free bytes in the physical volume",
                        "type": "integer"
                      },
                      "leaf": {
                        "type": "boolean"
                      },
                      "name": {
                        "description": "The name of the physical volume",
                        "type": "string"
                      },
                      "size": {
                        "description": "The size of the physical volume in bytes",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "optional": 1,
                  "type": "array"
                },
                "free": {
                  "description": "The free bytes in the volume group",
                  "type": "integer"
                },
                "leaf": {
                  "type": "boolean"
                },
                "name": {
                  "description": "The name of the volume group",
                  "type": "string"
                },
                "size": {
                  "description": "The size of the volume group in bytes",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "leaf": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "POST-NodesQemuMovedisk-RB": {
        "type": "object",
        "properties": {
          "format": {
            "enum": [
              "raw",
              "qcow2",
              "vmdk"
            ],
            "type": "string"
          },
          "target-disk": {
            "enum": [
              "ide0",
              "ide1",
              "ide2",
              "ide3",
              "scsi0",
              "scsi1",
              "scsi2",
              "scsi3",
              "scsi4",
              "scsi5",
              "scsi6",
              "scsi7",
              "scsi8",
              "scsi9",
              "scsi10",
              "scsi11",
              "scsi12",
              "scsi13",
              "scsi14",
              "scsi15",
              "scsi16",
              "scsi17",
              "scsi18",
              "scsi19",
              "scsi20",
              "scsi21",
              "scsi22",
              "scsi23",
              "scsi24",
              "scsi25",
              "scsi26",
              "scsi27",
              "scsi28",
              "scsi29",
              "scsi30",
              "virtio0",
              "virtio1",
              "virtio2",
              "virtio3",
              "virtio4",
              "virtio5",
              "virtio6",
              "virtio7",
              "virtio8",
              "virtio9",
              "virtio10",
              "virtio11",
              "virtio12",
              "virtio13",
              "virtio14",
              "virtio15",
              "sata0",
              "sata1",
              "sata2",
              "sata3",
              "sata4",
              "sata5",
              "efidisk0",
              "tpmstate0",
              "unused0",
              "unused1",
              "unused2",
              "unused3",
              "unused4",
              "unused5",
              "unused6",
              "unused7",
              "unused8",
              "unused9",
              "unused10",
              "unused11",
              "unused12",
              "unused13",
              "unused14",
              "unused15",
              "unused16",
              "unused17",
              "unused18",
              "unused19",
              "unused20",
              "unused21",
              "unused22",
              "unused23",
              "unused24",
              "unused25",
              "unused26",
              "unused27",
              "unused28",
              "unused29",
              "unused30",
              "unused31",
              "unused32",
              "unused33",
              "unused34",
              "unused35",
              "unused36",
              "unused37",
              "unused38",
              "unused39",
              "unused40",
              "unused41",
              "unused42",
              "unused43",
              "unused44",
              "unused45",
              "unused46",
              "unused47",
              "unused48",
              "unused49",
              "unused50",
              "unused51",
              "unused52",
              "unused53",
              "unused54",
              "unused55",
              "unused56",
              "unused57",
              "unused58",
              "unused59",
              "unused60",
              "unused61",
              "unused62",
              "unused63",
              "unused64",
              "unused65",
              "unused66",
              "unused67",
              "unused68",
              "unused69",
              "unused70",
              "unused71",
              "unused72",
              "unused73",
              "unused74",
              "unused75",
              "unused76",
              "unused77",
              "unused78",
              "unused79",
              "unused80",
              "unused81",
              "unused82",
              "unused83",
              "unused84",
              "unused85",
              "unused86",
              "unused87",
              "unused88",
              "unused89",
              "unused90",
              "unused91",
              "unused92",
              "unused93",
              "unused94",
              "unused95",
              "unused96",
              "unused97",
              "unused98",
              "unused99",
              "unused100",
              "unused101",
              "unused102",
              "unused103",
              "unused104",
              "unused105",
              "unused106",
              "unused107",
              "unused108",
              "unused109",
              "unused110",
              "unused111",
              "unused112",
              "unused113",
              "unused114",
              "unused115",
              "unused116",
              "unused117",
              "unused118",
              "unused119",
              "unused120",
              "unused121",
              "unused122",
              "unused123",
              "unused124",
              "unused125",
              "unused126",
              "unused127",
              "unused128",
              "unused129",
              "unused130",
              "unused131",
              "unused132",
              "unused133",
              "unused134",
              "unused135",
              "unused136",
              "unused137",
              "unused138",
              "unused139",
              "unused140",
              "unused141",
              "unused142",
              "unused143",
              "unused144",
              "unused145",
              "unused146",
              "unused147",
              "unused148",
              "unused149",
              "unused150",
              "unused151",
              "unused152",
              "unused153",
              "unused154",
              "unused155",
              "unused156",
              "unused157",
              "unused158",
              "unused159",
              "unused160",
              "unused161",
              "unused162",
              "unused163",
              "unused164",
              "unused165",
              "unused166",
              "unused167",
              "unused168",
              "unused169",
              "unused170",
              "unused171",
              "unused172",
              "unused173",
              "unused174",
              "unused175",
              "unused176",
              "unused177",
              "unused178",
              "unused179",
              "unused180",
              "unused181",
              "unused182",
              "unused183",
              "unused184",
              "unused185",
              "unused186",
              "unused187",
              "unused188",
              "unused189",
              "unused190",
              "unused191",
              "unused192",
              "unused193",
              "unused194",
              "unused195",
              "unused196",
              "unused197",
              "unused198",
              "unused199",
              "unused200",
              "unused201",
              "unused202",
              "unused203",
              "unused204",
              "unused205",
              "unused206",
              "unused207",
              "unused208",
              "unused209",
              "unused210",
              "unused211",
              "unused212",
              "unused213",
              "unused214",
              "unused215",
              "unused216",
              "unused217",
              "unused218",
              "unused219",
              "unused220",
              "unused221",
              "unused222",
              "unused223",
              "unused224",
              "unused225",
              "unused226",
              "unused227",
              "unused228",
              "unused229",
              "unused230",
              "unused231",
              "unused232",
              "unused233",
              "unused234",
              "unused235",
              "unused236",
              "unused237",
              "unused238",
              "unused239",
              "unused240",
              "unused241",
              "unused242",
              "unused243",
              "unused244",
              "unused245",
              "unused246",
              "unused247",
              "unused248",
              "unused249",
              "unused250",
              "unused251",
              "unused252",
              "unused253",
              "unused254",
              "unused255"
            ],
            "type": "string"
          },
          "disk": {
            "enum": [
              "ide0",
              "ide1",
              "ide2",
              "ide3",
              "scsi0",
              "scsi1",
              "scsi2",
              "scsi3",
              "scsi4",
              "scsi5",
              "scsi6",
              "scsi7",
              "scsi8",
              "scsi9",
              "scsi10",
              "scsi11",
              "scsi12",
              "scsi13",
              "scsi14",
              "scsi15",
              "scsi16",
              "scsi17",
              "scsi18",
              "scsi19",
              "scsi20",
              "scsi21",
              "scsi22",
              "scsi23",
              "scsi24",
              "scsi25",
              "scsi26",
              "scsi27",
              "scsi28",
              "scsi29",
              "scsi30",
              "virtio0",
              "virtio1",
              "virtio2",
              "virtio3",
              "virtio4",
              "virtio5",
              "virtio6",
              "virtio7",
              "virtio8",
              "virtio9",
              "virtio10",
              "virtio11",
              "virtio12",
              "virtio13",
              "virtio14",
              "virtio15",
              "sata0",
              "sata1",
              "sata2",
              "sata3",
              "sata4",
              "sata5",
              "efidisk0",
              "tpmstate0",
              "unused0",
              "unused1",
              "unused2",
              "unused3",
              "unused4",
              "unused5",
              "unused6",
              "unused7",
              "unused8",
              "unused9",
              "unused10",
              "unused11",
              "unused12",
              "unused13",
              "unused14",
              "unused15",
              "unused16",
              "unused17",
              "unused18",
              "unused19",
              "unused20",
              "unused21",
              "unused22",
              "unused23",
              "unused24",
              "unused25",
              "unused26",
              "unused27",
              "unused28",
              "unused29",
              "unused30",
              "unused31",
              "unused32",
              "unused33",
              "unused34",
              "unused35",
              "unused36",
              "unused37",
              "unused38",
              "unused39",
              "unused40",
              "unused41",
              "unused42",
              "unused43",
              "unused44",
              "unused45",
              "unused46",
              "unused47",
              "unused48",
              "unused49",
              "unused50",
              "unused51",
              "unused52",
              "unused53",
              "unused54",
              "unused55",
              "unused56",
              "unused57",
              "unused58",
              "unused59",
              "unused60",
              "unused61",
              "unused62",
              "unused63",
              "unused64",
              "unused65",
              "unused66",
              "unused67",
              "unused68",
              "unused69",
              "unused70",
              "unused71",
              "unused72",
              "unused73",
              "unused74",
              "unused75",
              "unused76",
              "unused77",
              "unused78",
              "unused79",
              "unused80",
              "unused81",
              "unused82",
              "unused83",
              "unused84",
              "unused85",
              "unused86",
              "unused87",
              "unused88",
              "unused89",
              "unused90",
              "unused91",
              "unused92",
              "unused93",
              "unused94",
              "unused95",
              "unused96",
              "unused97",
              "unused98",
              "unused99",
              "unused100",
              "unused101",
              "unused102",
              "unused103",
              "unused104",
              "unused105",
              "unused106",
              "unused107",
              "unused108",
              "unused109",
              "unused110",
              "unused111",
              "unused112",
              "unused113",
              "unused114",
              "unused115",
              "unused116",
              "unused117",
              "unused118",
              "unused119",
              "unused120",
              "unused121",
              "unused122",
              "unused123",
              "unused124",
              "unused125",
              "unused126",
              "unused127",
              "unused128",
              "unused129",
              "unused130",
              "unused131",
              "unused132",
              "unused133",
              "unused134",
              "unused135",
              "unused136",
              "unused137",
              "unused138",
              "unused139",
              "unused140",
              "unused141",
              "unused142",
              "unused143",
              "unused144",
              "unused145",
              "unused146",
              "unused147",
              "unused148",
              "unused149",
              "unused150",
              "unused151",
              "unused152",
              "unused153",
              "unused154",
              "unused155",
              "unused156",
              "unused157",
              "unused158",
              "unused159",
              "unused160",
              "unused161",
              "unused162",
              "unused163",
              "unused164",
              "unused165",
              "unused166",
              "unused167",
              "unused168",
              "unused169",
              "unused170",
              "unused171",
              "unused172",
              "unused173",
              "unused174",
              "unused175",
              "unused176",
              "unused177",
              "unused178",
              "unused179",
              "unused180",
              "unused181",
              "unused182",
              "unused183",
              "unused184",
              "unused185",
              "unused186",
              "unused187",
              "unused188",
              "unused189",
              "unused190",
              "unused191",
              "unused192",
              "unused193",
              "unused194",
              "unused195",
              "unused196",
              "unused197",
              "unused198",
              "unused199",
              "unused200",
              "unused201",
              "unused202",
              "unused203",
              "unused204",
              "unused205",
              "unused206",
              "unused207",
              "unused208",
              "unused209",
              "unused210",
              "unused211",
              "unused212",
              "unused213",
              "unused214",
              "unused215",
              "unused216",
              "unused217",
              "unused218",
              "unused219",
              "unused220",
              "unused221",
              "unused222",
              "unused223",
              "unused224",
              "unused225",
              "unused226",
              "unused227",
              "unused228",
              "unused229",
              "unused230",
              "unused231",
              "unused232",
              "unused233",
              "unused234",
              "unused235",
              "unused236",
              "unused237",
              "unused238",
              "unused239",
              "unused240",
              "unused241",
              "unused242",
              "unused243",
              "unused244",
              "unused245",
              "unused246",
              "unused247",
              "unused248",
              "unused249",
              "unused250",
              "unused251",
              "unused252",
              "unused253",
              "unused254",
              "unused255"
            ],
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 40
          },
          "bwlimit": {
            "type": "integer",
            "minimum": "0"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          },
          "storage": {
            "type": "string"
          },
          "target-vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "delete": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "target-digest": {
            "type": "string",
            "maxLength": 40
          }
        }
      },
      "ClusterNotificationsEndpointsWebhook-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string"
            },
            "header": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "secret": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "method": {
              "enum": [
                "post",
                "put",
                "get"
              ],
              "type": "string"
            },
            "origin": {
              "enum": [
                "user-created",
                "builtin",
                "modified-builtin"
              ],
              "type": "string"
            },
            "body": {
              "type": "string"
            },
            "comment": {
              "type": "string"
            },
            "disable": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "name": {
              "type": "string"
            }
          }
        }
      },
      "DELETE-NodesQemuFirewallRules-RB": {
        "type": "object",
        "properties": {
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "pos": {
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "DELETE-NodesCephOsd-RB": {
        "type": "object",
        "properties": {
          "cleanup": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "osdid": {
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "ClusterFirewall": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "GET-NodesLxcRrd-RB": {
        "type": "object",
        "properties": {
          "timeframe": {
            "enum": [
              "hour",
              "day",
              "week",
              "month",
              "year"
            ],
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "ds": {
            "type": "string"
          },
          "cf": {
            "enum": [
              "AVERAGE",
              "MAX"
            ],
            "type": "string"
          }
        }
      },
      "PUT-ClusterNotificationsEndpointsGotify-RB": {
        "type": "object",
        "properties": {
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "server": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "delete": {
            "type": "array",
            "items": {
              "format": "pve-configid",
              "type": "string"
            }
          },
          "disable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "token": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "POST-ClusterHaResources-RB": {
        "type": "object",
        "properties": {
          "sid": {
            "type": "string"
          },
          "max_restart": {
            "type": "integer"
          },
          "state": {
            "enum": [
              "started",
              "stopped",
              "enabled",
              "disabled",
              "ignored"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "ct",
              "vm"
            ],
            "type": "string"
          },
          "max_relocate": {
            "type": "integer"
          },
          "comment": {
            "type": "string",
            "maxLength": 4096
          },
          "group": {
            "type": "string"
          }
        }
      },
      "POST-NodesDisksDirectory-RB": {
        "type": "object",
        "properties": {
          "add_storage": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "device": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "filesystem": {
            "enum": [
              "ext4",
              "xfs"
            ],
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "GET-NodesStorageFilerestoreDownload-RB": {
        "type": "object",
        "properties": {
          "storage": {
            "type": "string"
          },
          "volume": {
            "type": "string"
          },
          "tar": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "filepath": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "POST-ClusterHaResourcesMigrate-RB": {
        "type": "object",
        "properties": {
          "node": {
            "type": "string"
          },
          "sid": {
            "type": "string"
          }
        }
      },
      "GET-NodesLxcFeature-RB": {
        "type": "object",
        "properties": {
          "feature": {
            "enum": [
              "snapshot",
              "clone",
              "copy"
            ],
            "type": "string"
          },
          "snapname": {
            "type": "string",
            "maxLength": 40
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesQemuMtunnelwebsocket": {
        "type": "object",
        "properties": {
          "socket": {
            "type": "string"
          },
          "port": {
            "type": "string"
          }
        }
      },
      "NodesCephMds": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": null
            },
            "addr": {
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "standby_replay": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "rank": {
              "type": "integer"
            },
            "host": {
              "type": "string"
            }
          }
        }
      },
      "POST-ClusterConfigJoin-RB": {
        "type": "object",
        "properties": {
          "votes": {
            "type": "integer"
          },
          "fingerprint": {
            "type": "string",
            "pattern": "([A-Fa-f0-9]{2}:){31}[A-Fa-f0-9]{2}"
          },
          "password": {
            "type": "string",
            "maxLength": 128
          },
          "link[n]": {
            "type": "string"
          },
          "nodeid": {
            "type": "integer",
            "minimum": 1
          },
          "force": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "hostname": {
            "type": "string"
          }
        }
      },
      "NodesQemuRrd": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string"
          }
        }
      },
      "GET-ClusterResources-RB": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "vm",
              "storage",
              "node",
              "sdn"
            ],
            "type": "string"
          }
        }
      },
      "POST-NodesQemuAgentSetuserpassword-RB": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "password": {
            "minLength": 5,
            "maxLength": 1024,
            "type": "string"
          },
          "crypted": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "GET-NodesHardwarePci-RB": {
        "type": "object",
        "properties": {
          "node": {
            "type": "string"
          },
          "verbose": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "pci-class-blacklist": {
            "type": "string"
          }
        }
      },
      "PUT-ClusterReplication-RB": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string"
          },
          "schedule": {
            "type": "string",
            "maxLength": 128
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "rate": {
            "type": "number",
            "minimum": 1
          },
          "comment": {
            "type": "string",
            "maxLength": 4096
          },
          "delete": {
            "type": "string",
            "maxLength": 4096
          },
          "disable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "remove_job": {
            "enum": [
              "local",
              "full"
            ],
            "type": "string"
          },
          "id": {
            "type": "string",
            "pattern": "[1-9][0-9]{2,8}-\\d{1,9}"
          }
        }
      },
      "NodesApt": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            }
          }
        }
      },
      "POST-NodesQemuMtunnel-RB": {
        "type": "object",
        "properties": {
          "storages": {
            "type": "string"
          },
          "bridges": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "ClusterNotificationsMatcherfields": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            }
          }
        }
      },
      "POST-NodesQemuFirewallAliases-RB": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "name": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 64,
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "cidr": {
            "type": "string"
          }
        }
      },
      "POST-NodesLxcStatusShutdown-RB": {
        "type": "object",
        "properties": {
          "timeout": {
            "type": "integer"
          },
          "forceStop": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "POST-NodesQemuClone-RB": {
        "type": "object",
        "properties": {
          "format": {
            "enum": [
              "raw",
              "qcow2",
              "vmdk"
            ],
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "full": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "snapname": {
            "type": "string",
            "maxLength": 40
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "bwlimit": {
            "type": "integer",
            "minimum": "0"
          },
          "newid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          },
          "storage": {
            "type": "string"
          },
          "target": {
            "type": "string"
          },
          "pool": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "NodesCephCmdsafety": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "safe": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "POST-ClusterMetricsServer-RB": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "proto": {
            "enum": [
              "udp",
              "tcp"
            ],
            "type": "string"
          },
          "organization": {
            "type": "string"
          },
          "port": {
            "minimum": 1,
            "type": "integer",
            "maximum": 65536
          },
          "disable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "type": {
            "enum": [
              "graphite",
              "influxdb"
            ],
            "type": "string"
          },
          "influxdbproto": {
            "enum": [
              "udp",
              "http",
              "https"
            ],
            "type": "string"
          },
          "server": {
            "type": "string"
          },
          "mtu": {
            "minimum": 512,
            "type": "integer",
            "maximum": 65536
          },
          "bucket": {
            "type": "string"
          },
          "verify-certificate": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "token": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "timeout": {
            "type": "integer"
          },
          "api-path-prefix": {
            "type": "string"
          },
          "max-body-size": {
            "type": "integer",
            "minimum": 1
          }
        }
      },
      "Pools-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "comment": {
              "type": "string"
            },
            "members": {
              "type": "array",
              "items": {
                "additionalProperties": 1,
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "node": {
                    "type": "string"
                  },
                  "storage": {
                    "optional": 1,
                    "type": "string"
                  },
                  "type": {
                    "enum": [
                      "qemu",
                      "lxc",
                      "openvz",
                      "storage"
                    ],
                    "type": "string"
                  },
                  "vmid": {
                    "optional": 1,
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "poolid": {
              "type": "string"
            }
          }
        }
      },
      "DELETE-NodesQemu-RB": {
        "type": "object",
        "properties": {
          "skiplock": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "destroy-unreferenced-disks": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "purge": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "ClusterNotificationsEndpointsGotify": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "server": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "disable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "ClusterBackup": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "pattern": "\\S+",
              "maxLength": 50,
              "type": "string"
            }
          }
        }
      },
      "POST-ClusterNotificationsEndpointsSmtp-RB": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "mode": {
            "enum": [
              "insecure",
              "starttls",
              "tls"
            ],
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "mailto-user": {
            "type": "array",
            "items": {
              "format": "pve-userid",
              "type": "string"
            }
          },
          "from-address": {
            "type": "string"
          },
          "port": {
            "type": "integer"
          },
          "server": {
            "type": "string"
          },
          "mailto": {
            "type": "array",
            "items": {
              "format": "email-or-username",
              "type": "string"
            }
          },
          "comment": {
            "type": "string"
          },
          "disable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "DELETE-NodesCertificatesCustom-RB": {
        "type": "object",
        "properties": {
          "restart": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "PUT-ClusterJobsRealmsync-RB": {
        "type": "object",
        "properties": {
          "enabled": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "scope": {
            "enum": [
              "users",
              "groups",
              "both"
            ],
            "type": "string"
          },
          "schedule": {
            "type": "string",
            "maxLength": 128
          },
          "remove-vanished": {
            "type": "string",
            "pattern": "(?:(?:(?:acl|properties|entry);)*(?:acl|properties|entry))|none"
          },
          "comment": {
            "type": "string",
            "maxLength": 512
          },
          "delete": {
            "type": "string",
            "maxLength": 4096
          },
          "enable-new": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "id": {
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "ClusterAcmeDirectories": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "url": {
              "type": "string",
              "pattern": "^https?://.*"
            }
          }
        }
      },
      "GET-NodesQemuAgentExecstatus-RB": {
        "type": "object",
        "properties": {
          "pid": {
            "type": "integer"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "POST-NodesQemuStatusStart-RB": {
        "type": "object",
        "properties": {
          "migratedfrom": {
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "stateuri": {
            "type": "string",
            "maxLength": 128
          },
          "targetstorage": {
            "type": "string"
          },
          "force-cpu": {
            "type": "string"
          },
          "migration_type": {
            "enum": [
              "secure",
              "insecure"
            ],
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "timeout": {
            "type": "integer"
          },
          "migration_network": {
            "type": "string"
          },
          "machine": {
            "type": "string"
          },
          "skiplock": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "GET-NodesLxcFirewallLog-RB": {
        "type": "object",
        "properties": {
          "until": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "node": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "since": {
            "type": "integer"
          },
          "start": {
            "type": "integer"
          }
        }
      },
      "NodesCapabilities": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "POST-NodesLxcStatusStart-RB": {
        "type": "object",
        "properties": {
          "debug": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "skiplock": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesLxcPending": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "pending": {
              "type": "string"
            },
            "value": {
              "type": "string"
            },
            "key": {
              "type": "string"
            },
            "delete": {
              "type": "integer",
              "maximum": 2
            }
          }
        }
      },
      "GET-NodesQemuFeature-RB": {
        "type": "object",
        "properties": {
          "feature": {
            "enum": [
              "snapshot",
              "clone",
              "copy"
            ],
            "type": "string"
          },
          "snapname": {
            "type": "string",
            "maxLength": 40
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "GET-ClusterSdnControllers-RB": {
        "type": "object",
        "properties": {
          "pending": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "running": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "controller": {
            "type": "string"
          }
        }
      },
      "NodesQemuStatusCurrent": {
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "stopped",
              "running"
            ],
            "type": "string"
          },
          "template": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "running-machine": {
            "type": "string"
          },
          "netin": {
            "type": "integer"
          },
          "qmpstatus": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "spice": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "diskread": {
            "type": "integer"
          },
          "ha": {
            "type": "object"
          },
          "diskwrite": {
            "type": "integer"
          },
          "tags": {
            "type": "string"
          },
          "uptime": {
            "type": "integer"
          },
          "cpus": {
            "type": "number"
          },
          "pid": {
            "type": "integer"
          },
          "clipboard": {
            "enum": [
              "vnc"
            ],
            "type": "string"
          },
          "running-qemu": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "maxmem": {
            "type": "integer"
          },
          "agent": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "maxdisk": {
            "type": "integer"
          },
          "lock": {
            "type": "string"
          },
          "netout": {
            "type": "integer"
          }
        }
      },
      "PUT-AccessRoles-RB": {
        "type": "object",
        "properties": {
          "append": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "privs": {
            "type": "string"
          },
          "roleid": {
            "type": "string"
          }
        }
      },
      "GET-NodesJournal-RB": {
        "type": "object",
        "properties": {
          "endcursor": {
            "type": "string"
          },
          "until": {
            "type": "integer"
          },
          "startcursor": {
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "since": {
            "type": "integer"
          },
          "lastentries": {
            "type": "integer"
          }
        }
      },
      "PUT-ClusterBackup-RB": {
        "type": "object",
        "properties": {
          "id": {
            "pattern": "\\S+",
            "maxLength": 50,
            "type": "string"
          },
          "prune-backups": {
            "type": "string"
          },
          "bwlimit": {
            "type": "integer"
          },
          "remove": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "fleecing": {
            "type": "string"
          },
          "schedule": {
            "type": "string",
            "maxLength": 128
          },
          "all": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "dow": {
            "type": "string"
          },
          "protected": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "exclude-path": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pbs-change-detection-mode": {
            "enum": [
              "legacy",
              "data",
              "metadata"
            ],
            "type": "string"
          },
          "script": {
            "type": "string"
          },
          "repeat-missed": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "comment": {
            "type": "string",
            "maxLength": 512
          },
          "tmpdir": {
            "type": "string"
          },
          "pool": {
            "type": "string"
          },
          "dumpdir": {
            "type": "string"
          },
          "delete": {
            "type": "string"
          },
          "stopwait": {
            "type": "integer"
          },
          "enabled": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "exclude": {
            "type": "string"
          },
          "stop": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "mailto": {
            "type": "string"
          },
          "storage": {
            "type": "string"
          },
          "notes-template": {
            "type": "string",
            "maxLength": 1024
          },
          "notification-target": {
            "type": "string"
          },
          "stdexcludes": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "mailnotification": {
            "enum": [
              "always",
              "failure"
            ],
            "type": "string"
          },
          "mode": {
            "enum": [
              "snapshot",
              "suspend",
              "stop"
            ],
            "type": "string"
          },
          "lockwait": {
            "type": "integer"
          },
          "ionice": {
            "type": "integer",
            "maximum": 8
          },
          "zstd": {
            "type": "integer"
          },
          "pigz": {
            "type": "integer"
          },
          "performance": {
            "type": "string"
          },
          "maxfiles": {
            "type": "integer",
            "minimum": 1
          },
          "notification-policy": {
            "enum": [
              "always",
              "failure",
              "never"
            ],
            "type": "string"
          },
          "starttime": {
            "type": "string",
            "pattern": "\\d{1,2}:\\d{1,2}"
          },
          "vmid": {
            "type": "string"
          },
          "compress": {
            "enum": [
              "0",
              "1",
              "gzip",
              "lzo",
              "zstd"
            ],
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "quiet": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "notification-mode": {
            "enum": [
              "auto",
              "legacy-sendmail",
              "notification-system"
            ],
            "type": "string"
          }
        }
      },
      "GET-NodesCephCmdsafety-RB": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "service": {
            "enum": [
              "osd",
              "mon",
              "mds"
            ],
            "type": "string"
          },
          "action": {
            "enum": [
              "stop",
              "destroy"
            ],
            "type": "string"
          }
        }
      },
      "POST-AccessUsersToken-RB": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "expire": {
            "type": "integer"
          },
          "userid": {
            "type": "string",
            "maxLength": 64
          },
          "privsep": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "tokenid": {
            "type": "string",
            "pattern": "(?^:[A-Za-z][A-Za-z0-9\\.\\-_]+)"
          }
        }
      },
      "POST-NodesStorageUpload-RB": {
        "type": "object",
        "properties": {
          "tmpfilename": {
            "type": "string",
            "pattern": "/var/tmp/pveupload-[0-9a-f]+"
          },
          "content": {
            "enum": [
              "iso",
              "vztmpl",
              "import"
            ],
            "type": "string"
          },
          "checksum-algorithm": {
            "enum": [
              "md5",
              "sha1",
              "sha224",
              "sha256",
              "sha384",
              "sha512"
            ],
            "type": "string"
          },
          "checksum": {
            "type": "string"
          },
          "filename": {
            "type": "string",
            "maxLength": 255
          },
          "node": {
            "type": "string"
          },
          "storage": {
            "type": "string"
          }
        }
      },
      "ClusterMetricsExport": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "additionalProperties": 0,
              "properties": {
                "id": {
                  "description": "Unique identifier for this metric object, for instance 'node/<nodename>' or 'qemu/<vmid>'.",
                  "type": "string"
                },
                "metric": {
                  "description": "Name of the metric.",
                  "type": "string"
                },
                "timestamp": {
                  "description": "Time at which this metric was observed",
                  "type": "integer"
                },
                "type": {
                  "description": "Type of the metric.",
                  "enum": [
                    "gauge",
                    "counter",
                    "derive"
                  ],
                  "type": "string"
                },
                "value": {
                  "description": "Metric value.",
                  "type": "number"
                }
              },
              "type": "object"
            }
          }
        }
      },
      "POST-NodesCephFs-RB": {
        "type": "object",
        "properties": {
          "pg_num": {
            "minimum": 8,
            "type": "integer",
            "maximum": 32768
          },
          "add-storage": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "DELETE-NodesDisksZfs-RB": {
        "type": "object",
        "properties": {
          "cleanup-disks": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "cleanup-config": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesFirewall": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "NodesNetwork": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "method": {
            "type": "string"
          }
        }
      },
      "GET-NodesScanIscsi-RB": {
        "type": "object",
        "properties": {
          "portal": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesHardwareUsb": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "product": {
              "type": "string"
            },
            "class": {
              "type": "integer"
            },
            "prodid": {
              "type": "string"
            },
            "level": {
              "type": "integer"
            },
            "devnum": {
              "type": "integer"
            },
            "manufacturer": {
              "type": "string"
            },
            "busnum": {
              "type": "integer"
            },
            "port": {
              "type": "integer"
            },
            "serial": {
              "type": "string"
            },
            "speed": {
              "type": "string"
            },
            "usbpath": {
              "type": "string"
            },
            "vendid": {
              "type": "string"
            }
          }
        }
      },
      "POST-AccessOpenidAuthurl-RB": {
        "type": "object",
        "properties": {
          "realm": {
            "type": "string",
            "maxLength": 32
          },
          "redirect-url": {
            "type": "string",
            "maxLength": 255
          }
        }
      },
      "NodesQemuFirewall": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "POST-NodesLxcFirewallIpset-RB": {
        "type": "object",
        "properties": {
          "cidr": {
            "type": "string"
          },
          "nomatch": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "comment": {
            "type": "string"
          },
          "name": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 64,
            "type": "string"
          }
        }
      },
      "PUT-NodesLxcSnapshotConfig-RB": {
        "type": "object",
        "properties": {
          "snapname": {
            "type": "string",
            "maxLength": 40
          },
          "description": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "GET-ClusterAcmeTos-RB": {
        "type": "object",
        "properties": {
          "directory": {
            "type": "string",
            "pattern": "^https?://.*"
          }
        }
      },
      "GET-NodesLxcFirewallRefs-RB": {
        "type": "object",
        "properties": {
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "type": {
            "enum": [
              "alias",
              "ipset"
            ],
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesScanLvm": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "vg": {
              "type": "string"
            }
          }
        }
      },
      "NodesScanIscsi": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "portal": {
              "type": "string"
            },
            "target": {
              "type": "string"
            }
          }
        }
      },
      "AccessUsersUnlocktfa": {
        "type": "integer",
        "minimum": 0,
        "maximum": 1,
        "description": null
      },
      "GET-ClusterJobsScheduleanalyze-RB": {
        "type": "object",
        "properties": {
          "schedule": {
            "type": "string",
            "maxLength": 128
          },
          "iterations": {
            "minimum": 1,
            "type": "integer",
            "maximum": 100
          },
          "starttime": {
            "type": "integer"
          }
        }
      },
      "POST-Storage-RB": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "maxLength": 256
          },
          "prune-backups": {
            "type": "string"
          },
          "blocksize": {
            "type": "string"
          },
          "bwlimit": {
            "type": "string"
          },
          "transport": {
            "enum": [
              "tcp",
              "rdma",
              "unix"
            ],
            "type": "string"
          },
          "datastore": {
            "type": "string"
          },
          "server": {
            "type": "string"
          },
          "saferemove": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "skip-cert-verification": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "lio_tpg": {
            "type": "string"
          },
          "create-base-path": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "nodes": {
            "type": "string"
          },
          "krbd": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "fuse": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "type": {
            "enum": [
              "btrfs",
              "cephfs",
              "cifs",
              "dir",
              "esxi",
              "glusterfs",
              "iscsi",
              "iscsidirect",
              "lvm",
              "lvmthin",
              "nfs",
              "pbs",
              "rbd",
              "zfs",
              "zfspool"
            ],
            "type": "string"
          },
          "subdir": {
            "type": "string"
          },
          "target": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "iscsiprovider": {
            "type": "string"
          },
          "fs-name": {
            "type": "string"
          },
          "thinpool": {
            "type": "string"
          },
          "data-pool": {
            "type": "string"
          },
          "fingerprint": {
            "type": "string",
            "pattern": "([A-Fa-f0-9]{2}:){31}[A-Fa-f0-9]{2}"
          },
          "vgname": {
            "type": "string"
          },
          "pool": {
            "type": "string"
          },
          "saferemove_throughput": {
            "type": "string"
          },
          "preallocation": {
            "enum": [
              "off",
              "metadata",
              "falloc",
              "full"
            ],
            "type": "string"
          },
          "is_mountpoint": {
            "type": "string"
          },
          "monhost": {
            "type": "string"
          },
          "port": {
            "minimum": 1,
            "type": "integer",
            "maximum": 65535
          },
          "smbversion": {
            "enum": [
              "default",
              "2.0",
              "2.1",
              "3",
              "3.0",
              "3.11"
            ],
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "tagged_only": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "max-protected-backups": {
            "type": "integer",
            "minimum": -1
          },
          "base": {
            "type": "string"
          },
          "disable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "username": {
            "type": "string"
          },
          "master-pubkey": {
            "type": "string"
          },
          "nocow": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "volume": {
            "type": "string"
          },
          "nowritecache": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "mkdir": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "export": {
            "type": "string"
          },
          "comstar_hg": {
            "type": "string"
          },
          "server2": {
            "type": "string"
          },
          "maxfiles": {
            "type": "integer"
          },
          "portal": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "mountpoint": {
            "type": "string"
          },
          "domain": {
            "type": "string",
            "maxLength": 256
          },
          "keyring": {
            "type": "string"
          },
          "share": {
            "type": "string"
          },
          "comstar_tg": {
            "type": "string"
          },
          "encryption-key": {
            "type": "string"
          },
          "options": {
            "type": "string"
          },
          "sparse": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "authsupported": {
            "type": "string"
          },
          "create-subdirs": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "storage": {
            "type": "string"
          },
          "shared": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "content-dirs": {
            "type": "string"
          }
        }
      },
      "ClusterFirewallAliases": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "comment": {
              "type": "string"
            },
            "digest": {
              "type": "string",
              "maxLength": 64
            },
            "name": {
              "type": "string"
            },
            "cidr": {
              "type": "string"
            }
          }
        }
      },
      "POST-ClusterSdnVnetsSubnets-RB": {
        "type": "object",
        "properties": {
          "dhcp-range": {
            "type": "array",
            "items": {
              "format": "pve-sdn-dhcp-range",
              "type": "string"
            }
          },
          "snat": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "subnet": {
            "type": "string"
          },
          "type": {
            "enum": [
              "subnet"
            ],
            "type": "string"
          },
          "vnet": {
            "type": "string"
          },
          "dnszoneprefix": {
            "type": "string"
          },
          "dhcp-dns-server": {
            "type": "string"
          },
          "gateway": {
            "type": "string"
          }
        }
      },
      "NodesLxcFirewallIpset-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "comment": {
              "type": "string"
            },
            "digest": {
              "type": "string",
              "maxLength": 64
            },
            "nomatch": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "cidr": {
              "type": "string"
            }
          }
        }
      },
      "POST-NodesMigrateall-RB": {
        "type": "object",
        "properties": {
          "with-local-disks": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "vms": {
            "type": "string"
          },
          "maxworkers": {
            "type": "integer",
            "minimum": 1
          },
          "target": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "PUT-ClusterSdnControllers-RB": {
        "type": "object",
        "properties": {
          "isis-domain": {
            "type": "string"
          },
          "isis-ifaces": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "controller": {
            "type": "string"
          },
          "bgp-multipath-as-path-relax": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "ebgp-multihop": {
            "type": "integer"
          },
          "ebgp": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "isis-net": {
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "peers": {
            "type": "string"
          },
          "asn": {
            "type": "integer",
            "maximum": 4294967296
          },
          "delete": {
            "type": "string",
            "maxLength": 4096
          },
          "loopback": {
            "type": "string"
          }
        }
      },
      "NodesReplicationLog": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "t": {
              "type": "string"
            },
            "n": {
              "type": "integer"
            }
          }
        }
      },
      "NodesStorageContent-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "notes": {
              "type": "string"
            },
            "volid": {
              "type": "string"
            },
            "encrypted": {
              "type": "string"
            },
            "format": {
              "type": "string"
            },
            "protected": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "vmid": {
              "type": "integer"
            },
            "verification": {
              "type": "object",
              "properties": {
                "state": {
                  "description": "Last backup verification state.",
                  "type": "string"
                },
                "upid": {
                  "description": "Last backup verification UPID.",
                  "type": "string"
                }
              }
            },
            "used": {
              "type": "integer"
            },
            "parent": {
              "type": "string"
            },
            "ctime": {
              "type": "integer"
            },
            "size": {
              "type": "integer"
            }
          }
        }
      },
      "ClusterReplication": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "DELETE-NodesFirewallRules-RB": {
        "type": "object",
        "properties": {
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "pos": {
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesSdnZones": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "status": {
              "enum": [
                "available",
                "pending",
                "error"
              ],
              "type": "string"
            },
            "zone": {
              "type": "string"
            }
          }
        }
      },
      "POST-NodesQemuRemotemigrate-RB": {
        "type": "object",
        "properties": {
          "target-endpoint": {
            "type": "string"
          },
          "bwlimit": {
            "type": "integer",
            "minimum": "0"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          },
          "target-storage": {
            "type": "string"
          },
          "online": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "delete": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "target-vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "target-bridge": {
            "type": "string"
          }
        }
      },
      "GET-NodesLxcMtunnelwebsocket-RB": {
        "type": "object",
        "properties": {
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "socket": {
            "type": "string"
          },
          "ticket": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "PUT-ClusterSdnVnets-RB": {
        "type": "object",
        "properties": {
          "alias": {
            "pattern": "(?^i:[\\(\\)-_.\\w\\d\\s]{0,256})",
            "maxLength": 256,
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "isolate-ports": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "vnet": {
            "type": "string"
          },
          "vlanaware": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "delete": {
            "type": "string",
            "maxLength": 4096
          },
          "zone": {
            "type": "string"
          },
          "tag": {
            "type": "integer"
          }
        }
      },
      "POST-NodesCephStart-RB": {
        "type": "object",
        "properties": {
          "service": {
            "type": "string",
            "pattern": "(ceph|mon|mds|osd|mgr)(\\.[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?)?"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "POST-ClusterConfig-RB": {
        "type": "object",
        "properties": {
          "votes": {
            "type": "integer",
            "minimum": 1
          },
          "nodeid": {
            "type": "integer",
            "minimum": 1
          },
          "link[n]": {
            "type": "string"
          },
          "clustername": {
            "type": "string",
            "maxLength": 15
          }
        }
      },
      "POST-NodesSpiceshell-RB": {
        "type": "object",
        "properties": {
          "proxy": {
            "type": "string"
          },
          "cmd-opts": {
            "type": "string"
          },
          "cmd": {
            "enum": [
              "upgrade",
              "ceph_install",
              "login"
            ],
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "POST-ClusterNotificationsEndpointsSendmail-RB": {
        "type": "object",
        "properties": {
          "author": {
            "type": "string"
          },
          "mailto-user": {
            "type": "array",
            "items": {
              "format": "pve-userid",
              "type": "string"
            }
          },
          "from-address": {
            "type": "string"
          },
          "mailto": {
            "type": "array",
            "items": {
              "format": "email-or-username",
              "type": "string"
            }
          },
          "comment": {
            "type": "string"
          },
          "disable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "POST-NodesLxcSnapshotRollback-RB": {
        "type": "object",
        "properties": {
          "snapname": {
            "type": "string",
            "maxLength": 40
          },
          "start": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesLxcSnapshot-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "NodesQemuCloudinit": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "pending": {
              "type": "string"
            },
            "value": {
              "type": "string"
            },
            "key": {
              "type": "string"
            },
            "delete": {
              "type": "integer",
              "maximum": 1
            }
          }
        }
      },
      "GET-ClusterNextid-RB": {
        "type": "object",
        "properties": {
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          }
        }
      },
      "ClusterMetrics": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "NodesLxcFirewallIpset": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "comment": {
              "type": "string"
            },
            "digest": {
              "type": "string",
              "maxLength": 64
            },
            "name": {
              "minLength": 2,
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64,
              "type": "string"
            }
          }
        }
      },
      "ClusterSdnVnetsFirewallRules": {
        "type": "object",
        "properties": {
          "pos": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "ipversion": {
            "type": "integer"
          },
          "dest": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "enable": {
            "type": "integer"
          },
          "action": {
            "type": "string"
          },
          "macro": {
            "type": "string"
          },
          "iface": {
            "type": "string"
          },
          "dport": {
            "type": "string"
          },
          "log": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "sport": {
            "type": "string"
          },
          "proto": {
            "type": "string"
          },
          "icmp-type": {
            "type": "string"
          }
        }
      },
      "POST-ClusterHaGroups-RB": {
        "type": "object",
        "properties": {
          "nofailback": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "type": {
            "enum": [
              "group"
            ],
            "type": "string"
          },
          "restricted": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "nodes": {
            "type": "string"
          },
          "comment": {
            "type": "string",
            "maxLength": 4096
          },
          "group": {
            "type": "string"
          }
        }
      },
      "NodesReplication": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            }
          }
        }
      },
      "NodesCephOsdLvinfo": {
        "type": "object",
        "properties": {
          "lv_path": {
            "type": "string"
          },
          "lv_size": {
            "type": "integer"
          },
          "creation_time": {
            "type": "string"
          },
          "lv_name": {
            "type": "string"
          },
          "lv_uuid": {
            "type": "string"
          },
          "vg_name": {
            "type": "string"
          }
        }
      },
      "NodesDisksLvmthin": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "metadata_used": {
              "type": "integer"
            },
            "lv_size": {
              "type": "integer"
            },
            "vg": {
              "type": "string"
            },
            "used": {
              "type": "integer"
            },
            "metadata_size": {
              "type": "integer"
            },
            "lv": {
              "type": "string"
            }
          }
        }
      },
      "NodesStorage": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "enabled": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "content": {
              "type": "string"
            },
            "shared": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "total": {
              "type": "integer"
            },
            "avail": {
              "type": "integer"
            },
            "active": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "type": {
              "type": "string"
            },
            "used_fraction": {
              "type": "number"
            },
            "storage": {
              "type": "string"
            },
            "used": {
              "type": "integer"
            }
          }
        }
      },
      "ClusterSdnVnetsFirewallOptions": {
        "type": "object",
        "properties": {
          "enable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "policy_forward": {
            "enum": [
              "ACCEPT",
              "DROP"
            ],
            "type": "string"
          },
          "log_level_forward": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          }
        }
      },
      "GET-NodesLxcRrddata-RB": {
        "type": "object",
        "properties": {
          "timeframe": {
            "enum": [
              "hour",
              "day",
              "week",
              "month",
              "year"
            ],
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "cf": {
            "enum": [
              "AVERAGE",
              "MAX"
            ],
            "type": "string"
          }
        }
      },
      "PUT-ClusterSdnDns-RB": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "ttl": {
            "type": "integer"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "reversemaskv6": {
            "type": "integer"
          },
          "dns": {
            "type": "string"
          },
          "delete": {
            "type": "string",
            "maxLength": 4096
          },
          "url": {
            "type": "string"
          }
        }
      },
      "NodesQemuFirewallOptions": {
        "type": "object",
        "properties": {
          "log_level_out": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "dhcp": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "macfilter": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "ndp": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "policy_in": {
            "enum": [
              "ACCEPT",
              "REJECT",
              "DROP"
            ],
            "type": "string"
          },
          "ipfilter": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "policy_out": {
            "enum": [
              "ACCEPT",
              "REJECT",
              "DROP"
            ],
            "type": "string"
          },
          "enable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "log_level_in": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "radv": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "DELETE-NodesQemuFirewallAliases-RB": {
        "type": "object",
        "properties": {
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "name": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 64,
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "POST-NodesLxcMtunnel-RB": {
        "type": "object",
        "properties": {
          "storages": {
            "type": "string"
          },
          "bridges": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "GET-NodesQemuRrddata-RB": {
        "type": "object",
        "properties": {
          "timeframe": {
            "enum": [
              "hour",
              "day",
              "week",
              "month",
              "year"
            ],
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "cf": {
            "enum": [
              "AVERAGE",
              "MAX"
            ],
            "type": "string"
          }
        }
      },
      "PUT-ClusterHaResources-RB": {
        "type": "object",
        "properties": {
          "sid": {
            "type": "string"
          },
          "max_restart": {
            "type": "integer"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "delete": {
            "type": "string",
            "maxLength": 4096
          },
          "state": {
            "enum": [
              "started",
              "stopped",
              "enabled",
              "disabled",
              "ignored"
            ],
            "type": "string"
          },
          "max_relocate": {
            "type": "integer"
          },
          "comment": {
            "type": "string",
            "maxLength": 4096
          },
          "group": {
            "type": "string"
          }
        }
      },
      "POST-ClusterSdnVnets-RB": {
        "type": "object",
        "properties": {
          "isolate-ports": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "alias": {
            "pattern": "(?^i:[\\(\\)-_.\\w\\d\\s]{0,256})",
            "maxLength": 256,
            "type": "string"
          },
          "type": {
            "enum": [
              "vnet"
            ],
            "type": "string"
          },
          "vnet": {
            "type": "string"
          },
          "vlanaware": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "zone": {
            "type": "string"
          },
          "tag": {
            "type": "integer"
          }
        }
      },
      "PUT-NodesLxcFirewallIpset-RB": {
        "type": "object",
        "properties": {
          "cidr": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "nomatch": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "comment": {
            "type": "string"
          },
          "name": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 64,
            "type": "string"
          }
        }
      },
      "ClusterFirewallGroups-GET-AV": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "pos": {
              "type": "integer"
            }
          }
        }
      },
      "ClusterAcmeAccount": {
        "type": "object",
        "properties": {
          "account": {
            "type": "object"
          },
          "directory": {
            "type": "string",
            "pattern": "^https?://.*"
          },
          "location": {
            "type": "string"
          },
          "tos": {
            "type": "string"
          }
        }
      },
      "PUT-AccessTfa-RB": {
        "type": "object",
        "properties": {
          "enable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "description": {
            "type": "string",
            "maxLength": 255
          },
          "userid": {
            "type": "string",
            "maxLength": 64
          },
          "password": {
            "minLength": 5,
            "maxLength": 64,
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "ClusterHaStatusCurrent": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "crm_state": {
              "type": "string"
            },
            "sid": {
              "type": "string"
            },
            "max_restart": {
              "type": "integer"
            },
            "type": {
              "enum": [
                "quorum",
                "master",
                "lrm",
                "service"
              ],
              "type": null
            },
            "state": {
              "type": "string"
            },
            "timestamp": {
              "type": "integer"
            },
            "quorate": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "node": {
              "type": "string"
            },
            "request_state": {
              "type": "string"
            },
            "max_relocate": {
              "type": "integer"
            },
            "status": {
              "type": "string"
            },
            "id": {
              "type": "string"
            }
          }
        }
      },
      "PUT-AccessUsersToken-RB": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "expire": {
            "type": "integer"
          },
          "userid": {
            "type": "string",
            "maxLength": 64
          },
          "privsep": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "tokenid": {
            "type": "string",
            "pattern": "(?^:[A-Za-z][A-Za-z0-9\\.\\-_]+)"
          }
        }
      },
      "POST-NodesLxc-RB": {
        "type": "object",
        "properties": {
          "startup": {
            "type": "string"
          },
          "tags": {
            "type": "string"
          },
          "restore": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "nameserver": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "swap": {
            "type": "integer"
          },
          "ostype": {
            "enum": [
              "debian",
              "devuan",
              "ubuntu",
              "centos",
              "fedora",
              "opensuse",
              "archlinux",
              "alpine",
              "gentoo",
              "nixos",
              "unmanaged"
            ],
            "type": "string"
          },
          "unique": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "debug": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "force": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "unused[n]": {
            "type": "string"
          },
          "ignore-unpack-errors": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "cpulimit": {
            "type": "number",
            "maximum": 8192
          },
          "tty": {
            "type": "integer",
            "maximum": 6
          },
          "pool": {
            "type": "string"
          },
          "cmode": {
            "enum": [
              "shell",
              "console",
              "tty"
            ],
            "type": "string"
          },
          "template": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "hookscript": {
            "type": "string"
          },
          "ostemplate": {
            "type": "string",
            "maxLength": 255
          },
          "start": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "net[n]": {
            "type": "string"
          },
          "storage": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "maxLength": 8192
          },
          "mp[n]": {
            "type": "string"
          },
          "searchdomain": {
            "type": "string"
          },
          "hostname": {
            "type": "string",
            "maxLength": 255
          },
          "arch": {
            "enum": [
              "amd64",
              "i386",
              "arm64",
              "armhf",
              "riscv32",
              "riscv64"
            ],
            "type": "string"
          },
          "onboot": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "cores": {
            "minimum": 1,
            "type": "integer",
            "maximum": 8192
          },
          "lock": {
            "enum": [
              "backup",
              "create",
              "destroyed",
              "disk",
              "fstrim",
              "migrate",
              "mounted",
              "rollback",
              "snapshot",
              "snapshot-delete"
            ],
            "type": "string"
          },
          "ssh-public-keys": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "memory": {
            "type": "integer",
            "minimum": 16
          },
          "features": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "minLength": 5
          },
          "unprivileged": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "bwlimit": {
            "type": "number",
            "minimum": "0"
          },
          "console": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "dev[n]": {
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "rootfs": {
            "type": "string"
          },
          "protection": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "cpuunits": {
            "type": "integer",
            "maximum": 500000
          }
        }
      },
      "NodesStatus": {
        "type": "object",
        "properties": {
          "boot-info": {
            "type": "object",
            "properties": {
              "mode": {
                "description": "Through which firmware the system got booted.",
                "enum": [
                  "efi",
                  "legacy-bios"
                ],
                "type": "string"
              },
              "secureboot": {
                "description": "System is booted in secure mode, only applicable for the \"efi\" mode.",
                "optional": 1,
                "type": "boolean"
              }
            }
          },
          "current-kernel": {
            "type": "object",
            "properties": {
              "machine": {
                "description": "Hardware (architecture) type",
                "type": "string"
              },
              "release": {
                "description": "OS kernel release (e.g., \"6.8.0\")",
                "type": "string"
              },
              "sysname": {
                "description": "OS kernel name (e.g., \"Linux\")",
                "type": "string"
              },
              "version": {
                "description": "OS kernel version with build info",
                "type": "string"
              }
            }
          }
        }
      },
      "POST-NodesStatus-RB": {
        "type": "object",
        "properties": {
          "command": {
            "enum": [
              "reboot",
              "shutdown"
            ],
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "ClusterAcmeMeta": {
        "type": "object",
        "properties": {
          "caaIdentities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "termsOfService": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "externalAccountRequired": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "AccessTfa": {
        "type": "object",
        "properties": {
          "challenge": {
            "type": "string"
          },
          "recovery": {
            "type": "array",
            "items": {
              "description": "A recovery entry.",
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          }
        }
      },
      "POST-AccessUsers-RB": {
        "type": "object",
        "properties": {
          "expire": {
            "type": "integer"
          },
          "userid": {
            "type": "string",
            "maxLength": 64
          },
          "password": {
            "minLength": 8,
            "maxLength": 64,
            "type": "string"
          },
          "lastname": {
            "type": "string",
            "maxLength": 1024
          },
          "groups": {
            "type": "string"
          },
          "enable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "keys": {
            "type": "string",
            "pattern": "[0-9a-zA-Z!=]{0,4096}"
          },
          "email": {
            "type": "string",
            "maxLength": 254
          },
          "firstname": {
            "type": "string",
            "maxLength": 1024
          },
          "comment": {
            "type": "string",
            "maxLength": 2048
          }
        }
      },
      "POST-NodesHosts-RB": {
        "type": "object",
        "properties": {
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "node": {
            "type": "string"
          },
          "data": {
            "type": "string"
          }
        }
      },
      "POST-NodesQemuStatusReboot-RB": {
        "type": "object",
        "properties": {
          "node": {
            "type": "string"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "timeout": {
            "type": "integer"
          }
        }
      },
      "AccessUsersToken-PUT": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "expire": {
            "type": "integer"
          },
          "privsep": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "NodesCapabilitiesQemu": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "NodesCephPoolStatus": {
        "type": "object",
        "properties": {
          "noscrub": {
            "format": "int32",
            "maximum": 1,
            "title": "noscrub",
            "minimum": 0,
            "type": "integer"
          },
          "fast_read": {
            "format": "int32",
            "maximum": 1,
            "title": "Fast Read",
            "minimum": 0,
            "type": "integer"
          },
          "application": {
            "enum": [
              "rbd",
              "cephfs",
              "rgw"
            ],
            "title": "Application",
            "type": "string"
          },
          "pg_num": {
            "title": "PG Num",
            "type": "integer",
            "minimum": 1,
            "maximum": 32768
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "target_size_ratio": {
            "type": "number",
            "title": "PG Autoscale Target Ratio"
          },
          "nopgchange": {
            "format": "int32",
            "maximum": 1,
            "title": "nopgchange",
            "minimum": 0,
            "type": "integer"
          },
          "nodeep-scrub": {
            "format": "int32",
            "maximum": 1,
            "title": "nodeep-scrub",
            "minimum": 0,
            "type": "integer"
          },
          "pg_num_min": {
            "title": "min. PG Num",
            "type": "integer",
            "maximum": 32768
          },
          "statistics": {
            "type": "object",
            "title": "Statistics"
          },
          "application_list": {
            "title": "Application",
            "items": null,
            "type": "array"
          },
          "min_size": {
            "title": "Min Size",
            "type": "integer",
            "minimum": 1,
            "maximum": 7
          },
          "use_gmt_hitset": {
            "format": "int32",
            "maximum": 1,
            "title": "use_gmt_hitset",
            "minimum": 0,
            "type": "integer"
          },
          "autoscale_status": {
            "type": "object",
            "title": "Autoscale Status"
          },
          "pgp_num": {
            "type": "integer",
            "title": "PGP num"
          },
          "nosizechange": {
            "format": "int32",
            "maximum": 1,
            "title": "nosizechange",
            "minimum": 0,
            "type": "integer"
          },
          "crush_rule": {
            "type": "string",
            "title": "Crush Rule Name"
          },
          "hashpspool": {
            "format": "int32",
            "maximum": 1,
            "title": "hashpspool",
            "minimum": 0,
            "type": "integer"
          },
          "id": {
            "type": "integer",
            "title": "ID"
          },
          "target_size": {
            "pattern": "^(\\d+(\\.\\d+)?)([KMGT])?$",
            "title": "PG Autoscale Target Size",
            "type": "string"
          },
          "write_fadvise_dontneed": {
            "format": "int32",
            "maximum": 1,
            "title": "write_fadvise_dontneed",
            "minimum": 0,
            "type": "integer"
          },
          "nodelete": {
            "format": "int32",
            "maximum": 1,
            "title": "nodelete",
            "minimum": 0,
            "type": "integer"
          },
          "size": {
            "title": "Size",
            "type": "integer",
            "minimum": 1,
            "maximum": 7
          },
          "pg_autoscale_mode": {
            "enum": [
              "on",
              "off",
              "warn"
            ],
            "title": "PG Autoscale Mode",
            "type": "string"
          }
        }
      },
      "POST-NodesAptRepositories-RB": {
        "type": "object",
        "properties": {
          "index": {
            "type": "integer"
          },
          "digest": {
            "type": "string",
            "maxLength": 80
          },
          "enabled": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "path": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "ClusterCeph": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "ClusterAcmeAccount-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "NodesTime": {
        "type": "object",
        "properties": {
          "timezone": {
            "type": "string"
          },
          "time": {
            "type": "integer",
            "minimum": 1297163644
          },
          "localtime": {
            "type": "integer",
            "minimum": 1297163644
          }
        }
      },
      "ClusterNotificationsMatchers": {
        "type": "object",
        "properties": {
          "invert-match": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "mode": {
            "enum": [
              "all",
              "any"
            ],
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "target": {
            "type": "array",
            "items": {
              "format": "pve-configid",
              "type": "string"
            }
          },
          "match-calendar": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "match-severity": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "comment": {
            "type": "string"
          },
          "match-field": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "disable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "POST-NodesExecute-RB": {
        "type": "object",
        "properties": {
          "commands": {
            "type": "string"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "PUT-ClusterNotificationsMatchers-RB": {
        "type": "object",
        "properties": {
          "invert-match": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "mode": {
            "enum": [
              "all",
              "any"
            ],
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "match-field": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "target": {
            "type": "array",
            "items": {
              "format": "pve-configid",
              "type": "string"
            }
          },
          "match-calendar": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "match-severity": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "comment": {
            "type": "string"
          },
          "delete": {
            "type": "array",
            "items": {
              "format": "pve-configid",
              "type": "string"
            }
          },
          "disable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "DELETE-ClusterSdnVnetsIps-RB": {
        "type": "object",
        "properties": {
          "mac": {
            "type": "string"
          },
          "zone": {
            "type": "string"
          },
          "vnet": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          }
        }
      },
      "NodesCertificatesInfo": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "issuer": {
              "type": "string"
            },
            "notafter": {
              "type": "integer"
            },
            "fingerprint": {
              "type": "string",
              "pattern": "([A-Fa-f0-9]{2}:){31}[A-Fa-f0-9]{2}"
            },
            "pem": {
              "type": "string"
            },
            "filename": {
              "type": "string"
            },
            "notbefore": {
              "type": "integer"
            },
            "public-key-bits": {
              "type": "integer"
            },
            "public-key-type": {
              "type": "string"
            },
            "subject": {
              "type": "string"
            },
            "san": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "POST-NodesQemuConfig-RB": {
        "type": "object",
        "properties": {
          "keyboard": {
            "enum": [
              "de",
              "de-ch",
              "da",
              "en-gb",
              "en-us",
              "es",
              "fi",
              "fr",
              "fr-be",
              "fr-ca",
              "fr-ch",
              "hu",
              "is",
              "it",
              "ja",
              "lt",
              "mk",
              "nl",
              "no",
              "pl",
              "pt",
              "pt-br",
              "sv",
              "sl",
              "tr"
            ],
            "type": "string"
          },
          "efidisk0": {
            "type": "string"
          },
          "net[n]": {
            "type": "string"
          },
          "delete": {
            "type": "string"
          },
          "vcpus": {
            "type": "integer",
            "minimum": 1
          },
          "cores": {
            "type": "integer",
            "minimum": 1
          },
          "ciuser": {
            "type": "string"
          },
          "startup": {
            "type": "string"
          },
          "cdrom": {
            "type": "string"
          },
          "usb[n]": {
            "type": "string"
          },
          "cicustom": {
            "type": "string"
          },
          "ciupgrade": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "cpulimit": {
            "type": "number",
            "maximum": 128
          },
          "spice_enhancements": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "freeze": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "tpmstate0": {
            "type": "string"
          },
          "ipconfig[n]": {
            "type": "string"
          },
          "args": {
            "type": "string"
          },
          "localtime": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "rng0": {
            "type": "string"
          },
          "migrate_speed": {
            "type": "integer"
          },
          "balloon": {
            "type": "integer"
          },
          "import-working-storage": {
            "type": "string"
          },
          "skiplock": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "hookscript": {
            "type": "string"
          },
          "tdf": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "lock": {
            "enum": [
              "backup",
              "clone",
              "create",
              "migrate",
              "rollback",
              "snapshot",
              "snapshot-delete",
              "suspending",
              "suspended"
            ],
            "type": "string"
          },
          "smp": {
            "type": "integer",
            "minimum": 1
          },
          "numa": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "vmstatestorage": {
            "type": "string"
          },
          "scsihw": {
            "enum": [
              "lsi",
              "lsi53c810",
              "virtio-scsi-pci",
              "virtio-scsi-single",
              "megasas",
              "pvscsi"
            ],
            "type": "string"
          },
          "shares": {
            "type": "integer",
            "maximum": 50000
          },
          "onboot": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "cpu": {
            "type": "string"
          },
          "reboot": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "cpuunits": {
            "minimum": 1,
            "type": "integer",
            "maximum": 262144
          },
          "autostart": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "description": {
            "type": "string",
            "maxLength": 8192
          },
          "background_delay": {
            "minimum": 1,
            "type": "integer",
            "maximum": 30
          },
          "cipassword": {
            "type": "string"
          },
          "hotplug": {
            "type": "string"
          },
          "force": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "citype": {
            "enum": [
              "configdrive2",
              "nocloud",
              "opennebula"
            ],
            "type": "string"
          },
          "kvm": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "memory": {
            "type": "string"
          },
          "bios": {
            "enum": [
              "seabios",
              "ovmf"
            ],
            "type": "string"
          },
          "ivshmem": {
            "type": "string"
          },
          "vga": {
            "type": "string"
          },
          "agent": {
            "type": "string"
          },
          "audio0": {
            "type": "string"
          },
          "parallel[n]": {
            "type": "string",
            "pattern": "/dev/parport\\d+|/dev/usb/lp\\d+"
          },
          "scsi[n]": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 40
          },
          "unused[n]": {
            "type": "string"
          },
          "ide[n]": {
            "type": "string"
          },
          "boot": {
            "type": "string"
          },
          "smbios1": {
            "type": "string",
            "maxLength": 512
          },
          "keephugepages": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          },
          "tablet": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "startdate": {
            "type": "string",
            "pattern": "(now|\\d{4}-\\d{1,2}-\\d{1,2}(T\\d{1,2}:\\d{1,2}:\\d{1,2})?)"
          },
          "protection": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "numa[n]": {
            "type": "string"
          },
          "template": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "sata[n]": {
            "type": "string"
          },
          "nameserver": {
            "type": "string"
          },
          "revert": {
            "type": "string"
          },
          "machine": {
            "type": "string"
          },
          "arch": {
            "enum": [
              "x86_64",
              "aarch64"
            ],
            "type": "string"
          },
          "ostype": {
            "enum": [
              "other",
              "wxp",
              "w2k",
              "w2k3",
              "w2k8",
              "wvista",
              "win7",
              "win8",
              "win10",
              "win11",
              "l24",
              "l26",
              "solaris"
            ],
            "type": "string"
          },
          "serial[n]": {
            "type": "string",
            "pattern": "(/dev/.+|socket)"
          },
          "affinity": {
            "type": "string"
          },
          "sockets": {
            "type": "integer",
            "minimum": 1
          },
          "bootdisk": {
            "type": "string",
            "pattern": "(ide|sata|scsi|virtio)\\d+"
          },
          "searchdomain": {
            "type": "string"
          },
          "tags": {
            "type": "string"
          },
          "acpi": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "virtio[n]": {
            "type": "string"
          },
          "watchdog": {
            "type": "string"
          },
          "sshkeys": {
            "type": "string"
          },
          "amd-sev": {
            "type": "string"
          },
          "hugepages": {
            "enum": [
              "any",
              "2",
              "1024"
            ],
            "type": "string"
          },
          "vmgenid": {
            "type": "string",
            "pattern": "(?:[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}|[01])"
          },
          "hostpci[n]": {
            "type": "string"
          },
          "migrate_downtime": {
            "type": "number"
          }
        }
      },
      "NodesLxcFirewallAliases": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "comment": {
              "type": "string"
            },
            "digest": {
              "type": "string",
              "maxLength": 64
            },
            "name": {
              "type": "string"
            },
            "cidr": {
              "type": "string"
            }
          }
        }
      },
      "GET-NodesRrddata-RB": {
        "type": "object",
        "properties": {
          "timeframe": {
            "enum": [
              "hour",
              "day",
              "week",
              "month",
              "year"
            ],
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "cf": {
            "enum": [
              "AVERAGE",
              "MAX"
            ],
            "type": "string"
          }
        }
      },
      "POST-NodesCephStop-RB": {
        "type": "object",
        "properties": {
          "service": {
            "type": "string",
            "pattern": "(ceph|mon|mds|osd|mgr)(\\.[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?)?"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesLxcVncwebsocket": {
        "type": "object",
        "properties": {
          "port": {
            "type": "string"
          }
        }
      },
      "NodesCephFs": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "metadata_pool": {
              "type": "string"
            },
            "data_pool": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          }
        }
      },
      "POST-NodesCephOsdScrub-RB": {
        "type": "object",
        "properties": {
          "osdid": {
            "type": "integer"
          },
          "deep": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "node": {
            "type": "string"
          }
        }
      },
      "NodesDisksZfs": {
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "properties": {
                "cksum": {
                  "optional": 1,
                  "type": "number"
                },
                "msg": {
                  "description": "An optional message about the vdev.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the vdev or section.",
                  "type": "string"
                },
                "read": {
                  "optional": 1,
                  "type": "number"
                },
                "state": {
                  "description": "The state of the vdev.",
                  "optional": 1,
                  "type": "string"
                },
                "write": {
                  "optional": 1,
                  "type": "number"
                }
              },
              "type": "object"
            }
          },
          "state": {
            "type": "string"
          },
          "scan": {
            "type": "string"
          },
          "errors": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "GET-NodesVzdumpExtractconfig-RB": {
        "type": "object",
        "properties": {
          "node": {
            "type": "string"
          },
          "volume": {
            "type": "string"
          }
        }
      },
      "PUT-Pools-RB": {
        "type": "object",
        "properties": {
          "poolid": {
            "type": "string"
          },
          "allow-move": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "storage": {
            "type": "string"
          },
          "delete": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "comment": {
            "type": "string"
          },
          "vms": {
            "type": "string"
          }
        }
      },
      "ClusterHaResources-GET": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "sid": {
              "type": "string"
            }
          }
        }
      },
      "NodesLxcFirewallLog": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "t": {
              "type": "string"
            },
            "n": {
              "type": "integer"
            }
          }
        }
      },
      "GET-ClusterSdnVnetsSubnets-RB": {
        "type": "object",
        "properties": {
          "pending": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "running": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "subnet": {
            "type": "string"
          },
          "vnet": {
            "type": "string"
          }
        }
      },
      "NodesSdn": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "PUT-ClusterHaGroups-RB": {
        "type": "object",
        "properties": {
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "nofailback": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "restricted": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "nodes": {
            "type": "string"
          },
          "delete": {
            "type": "string",
            "maxLength": 4096
          },
          "comment": {
            "type": "string",
            "maxLength": 4096
          },
          "group": {
            "type": "string"
          }
        }
      },
      "NodesAplinfo": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "NodesStorageContent": {
        "type": "object",
        "properties": {
          "notes": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "protected": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "used": {
            "type": "integer"
          },
          "path": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          }
        }
      },
      "NodesCephMgr": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "addr": {
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "name": {
              "type": null
            },
            "host": {
              "type": "string"
            }
          }
        }
      },
      "GET-NodesReplication-RB": {
        "type": "object",
        "properties": {
          "guest": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "node": {
            "type": "string"
          }
        }
      },
      "GET-AccessUsers-RB": {
        "type": "object",
        "properties": {
          "full": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "enabled": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          }
        }
      },
      "GET-NodesQemuVncwebsocket-RB": {
        "type": "object",
        "properties": {
          "port": {
            "minimum": 5900,
            "type": "integer",
            "maximum": 5999
          },
          "vmid": {
            "minimum": 100,
            "type": "integer",
            "maximum": 999999999
          },
          "vncticket": {
            "type": "string",
            "maxLength": 512
          },
          "node": {
            "type": "string"
          }
        }
      },
      "ClusterNotificationsTargets": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "comment": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "type": {
              "enum": [
                "sendmail",
                "gotify",
                "smtp",
                "webhook"
              ],
              "type": "string"
            },
            "disable": {
              "format": "int32",
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            "origin": {
              "enum": [
                "user-created",
                "builtin",
                "modified-builtin"
              ],
              "type": "string"
            }
          }
        }
      },
      "POST-ClusterFirewallRules-RB": {
        "type": "object",
        "properties": {
          "pos": {
            "type": "integer"
          },
          "type": {
            "enum": [
              "in",
              "out",
              "forward",
              "group"
            ],
            "type": "string"
          },
          "dest": {
            "type": "string",
            "maxLength": 512
          },
          "source": {
            "type": "string",
            "maxLength": 512
          },
          "dport": {
            "type": "string"
          },
          "enable": {
            "type": "integer"
          },
          "action": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 20,
            "type": "string"
          },
          "macro": {
            "type": "string",
            "maxLength": 128
          },
          "iface": {
            "minLength": 2,
            "maxLength": 20,
            "type": "string"
          },
          "log": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "sport": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "proto": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "icmp-type": {
            "type": "string"
          }
        }
      },
      "NodesExecute": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {}
        }
      },
      "DELETE-ClusterFirewallAliases-RB": {
        "type": "object",
        "properties": {
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "name": {
            "minLength": 2,
            "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
            "maxLength": 64,
            "type": "string"
          }
        }
      },
      "NodesQemuFirewallRules": {
        "type": "object",
        "properties": {
          "pos": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "ipversion": {
            "type": "integer"
          },
          "dest": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "enable": {
            "type": "integer"
          },
          "action": {
            "type": "string"
          },
          "macro": {
            "type": "string"
          },
          "iface": {
            "type": "string"
          },
          "dport": {
            "type": "string"
          },
          "log": {
            "enum": [
              "emerg",
              "alert",
              "crit",
              "err",
              "warning",
              "notice",
              "info",
              "debug",
              "nolog"
            ],
            "type": "string"
          },
          "sport": {
            "type": "string"
          },
          "proto": {
            "type": "string"
          },
          "icmp-type": {
            "type": "string"
          }
        }
      },
      "PUT-NodesDisksWipedisk-RB": {
        "type": "object",
        "properties": {
          "node": {
            "type": "string"
          },
          "disk": {
            "type": "string",
            "pattern": "^/dev/[a-zA-Z0-9\\/]+$"
          }
        }
      },
      "PUT-ClusterNotificationsEndpointsSmtp-RB": {
        "type": "object",
        "properties": {
          "mailto-user": {
            "type": "array",
            "items": {
              "format": "pve-userid",
              "type": "string"
            }
          },
          "password": {
            "type": "string"
          },
          "from-address": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "port": {
            "type": "integer"
          },
          "disable": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "server": {
            "type": "string"
          },
          "mode": {
            "enum": [
              "insecure",
              "starttls",
              "tls"
            ],
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "delete": {
            "type": "array",
            "items": {
              "format": "pve-configid",
              "type": "string"
            }
          },
          "mailto": {
            "type": "array",
            "items": {
              "format": "email-or-username",
              "type": "string"
            }
          },
          "username": {
            "type": "string"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "NodesAptRepositories": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "properties": {
                "digest": {
                  "description": "Digest of the file as bytes.",
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                "file-type": {
                  "description": "Format of the file.",
                  "enum": [
                    "list",
                    "sources"
                  ],
                  "type": "string"
                },
                "path": {
                  "description": "Path to the problematic file.",
                  "type": "string"
                },
                "repositories": {
                  "description": "The parsed repositories.",
                  "items": {
                    "properties": {
                      "Comment": {
                        "description": "Associated comment",
                        "optional": 1,
                        "type": "string"
                      },
                      "Components": {
                        "description": "List of repository components",
                        "items": {
                          "type": "string"
                        },
                        "optional": 1,
                        "type": "array"
                      },
                      "Enabled": {
                        "description": "Whether the repository is enabled or not",
                        "type": "boolean"
                      },
                      "FileType": {
                        "description": "Format of the defining file.",
                        "enum": [
                          "list",
                          "sources"
                        ],
                        "type": "string"
                      },
                      "Options": {
                        "description": "Additional options",
                        "items": {
                          "properties": {
                            "Key": {
                              "type": "string"
                            },
                            "Values": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "optional": 1,
                        "type": "array"
                      },
                      "Suites": {
                        "description": "List of package distribuitions",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "Types": {
                        "description": "List of package types.",
                        "items": {
                          "enum": [
                            "deb",
                            "deb-src"
                          ],
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "URIs": {
                        "description": "List of repository URIs.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "digest": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "properties": {
                "error": {
                  "description": "The error message",
                  "type": "string"
                },
                "path": {
                  "description": "Path to the problematic file.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "infos": {
            "type": "array",
            "items": {
              "properties": {
                "index": {
                  "description": "Index of the associated repository within the file.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind of the information (e.g. warning).",
                  "type": "string"
                },
                "message": {
                  "description": "Information message.",
                  "type": "string"
                },
                "path": {
                  "description": "Path to the associated file.",
                  "type": "string"
                },
                "property": {
                  "description": "Property from which the info originates.",
                  "optional": 1,
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "standard-repos": {
            "type": "array",
            "items": {
              "properties": {
                "handle": {
                  "description": "Handle to identify the repository.",
                  "type": "string"
                },
                "name": {
                  "description": "Full name of the repository.",
                  "type": "string"
                },
                "status": {
                  "description": "Indicating enabled/disabled status, if the repository is configured.",
                  "optional": 1,
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        }
      },
      "PUT-ClusterSdnZones-RB": {
        "type": "object",
        "properties": {
          "reversedns": {
            "type": "string"
          },
          "zone": {
            "type": "string"
          },
          "ipam": {
            "type": "string"
          },
          "vxlan-port": {
            "minimum": 1,
            "type": "integer",
            "maximum": 65536
          },
          "mac": {
            "type": "string"
          },
          "vrf-vxlan": {
            "type": "integer"
          },
          "nodes": {
            "type": "string"
          },
          "controller": {
            "type": "string"
          },
          "vlan-protocol": {
            "enum": [
              "802.1q",
              "802.1ad"
            ],
            "type": "string"
          },
          "dns": {
            "type": "string"
          },
          "bridge": {
            "type": "string"
          },
          "dhcp": {
            "enum": [
              "dnsmasq"
            ],
            "type": "string"
          },
          "exitnodes-primary": {
            "type": "string"
          },
          "dp-id": {
            "type": "integer"
          },
          "disable-arp-nd-suppression": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "peers": {
            "type": "string"
          },
          "tag": {
            "type": "integer"
          },
          "advertise-subnets": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "rt-import": {
            "type": "string"
          },
          "bridge-disable-mac-learning": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "exitnodes": {
            "type": "string"
          },
          "delete": {
            "type": "string",
            "maxLength": 4096
          },
          "mtu": {
            "type": "integer"
          },
          "exitnodes-local-routing": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "digest": {
            "type": "string",
            "maxLength": 64
          },
          "dnszone": {
            "type": "string"
          }
        }
      },
      "NodesQemuVncwebsocket": {
        "type": "object",
        "properties": {
          "port": {
            "type": "string"
          }
        }
      },
      "GET-ClusterFirewallRefs-RB": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "alias",
              "ipset"
            ],
            "type": "string"
          }
        }
      },
      "POST-ClusterSdnControllers-RB": {
        "type": "object",
        "properties": {
          "asn": {
            "type": "integer",
            "maximum": 4294967296
          },
          "isis-net": {
            "type": "string"
          },
          "isis-ifaces": {
            "type": "string"
          },
          "controller": {
            "type": "string"
          },
          "loopback": {
            "type": "string"
          },
          "ebgp": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "type": {
            "enum": [
              "bgp",
              "evpn",
              "faucet",
              "isis"
            ],
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "isis-domain": {
            "type": "string"
          },
          "bgp-multipath-as-path-relax": {
            "format": "int32",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "peers": {
            "type": "string"
          },
          "ebgp-multihop": {
            "type": "integer"
          }
        }
      }
    }
  }
}
